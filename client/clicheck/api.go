// Package clicheck provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package clicheck

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ImageResponseAllOfDataLabel.
const (
	ImageResponseAllOfDataLabelAbuse  ImageResponseAllOfDataLabel = "Abuse"
	ImageResponseAllOfDataLabelAd     ImageResponseAllOfDataLabel = "Ad"
	ImageResponseAllOfDataLabelCustom ImageResponseAllOfDataLabel = "Custom"
	ImageResponseAllOfDataLabelNormal ImageResponseAllOfDataLabel = "Normal"
	ImageResponseAllOfDataLabelPorn   ImageResponseAllOfDataLabel = "Porn"
)

// Defines values for TextResponseAllOfDataLabel.
const (
	TextResponseAllOfDataLabelAbuse  TextResponseAllOfDataLabel = "Abuse"
	TextResponseAllOfDataLabelAd     TextResponseAllOfDataLabel = "Ad"
	TextResponseAllOfDataLabelCustom TextResponseAllOfDataLabel = "Custom"
	TextResponseAllOfDataLabelNormal TextResponseAllOfDataLabel = "Normal"
	TextResponseAllOfDataLabelPorn   TextResponseAllOfDataLabel = "Porn"
)

// DataResult defines model for DataResult.
type DataResult struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GameBatchCreditRequest defines model for GameBatchCreditRequest.
type GameBatchCreditRequest = []struct {
	UserId string `json:"userId"`
}

// GameBatchCreditResponse defines model for GameBatchCreditResponse.
type GameBatchCreditResponse struct {
	Code    int                          `json:"code"`
	Data    *GameBatchCreditResponseData `json:"data,omitempty"`
	Message string                       `json:"message"`
}

// GameBatchCreditResponseData defines model for GameBatchCreditResponseData.
type GameBatchCreditResponseData struct {
	List *[]GameBatchCreditResponseDataList `json:"list,omitempty"`
}

// GameBatchCreditResponseDataList defines model for GameBatchCreditResponseDataList.
type GameBatchCreditResponseDataList struct {
	// Limit 是否限制，根据信用分值判断，每个游戏的判断逻辑不同 (0:不限制,1:限制)
	Limit int `json:"limit"`

	// Score 通用信用分
	Score int `json:"score"`

	// TagBlack 等级越高，恶意度越高
	TagBlack int    `json:"tag_black"`
	UserId   string `json:"userId"`
}

// GameCreditResponse defines model for GameCreditResponse.
type GameCreditResponse struct {
	Code    int                     `json:"code"`
	Data    *GameCreditResponseData `json:"data,omitempty"`
	Message string                  `json:"message"`
}

// GameCreditResponseData defines model for GameCreditResponseData.
type GameCreditResponseData struct {
	// Limit 是否限制，根据信用分值判断，每个游戏的判断逻辑不同 (0:不限制,1:限制)
	Limit int `json:"limit"`

	// Score 通用信用分
	Score int `json:"score"`

	// TagBlack 等级越高，恶意度越高
	TagBlack int `json:"tag_black"`
}

// GameCreditResponseAllOf defines model for GameCreditResponse_allOf.
type GameCreditResponseAllOf struct {
	Data *GameCreditResponseData `json:"data,omitempty"`
}

// GameImageRequest defines model for GameImageRequest.
type GameImageRequest struct {
	Tasks []GameImageRequestTask `json:"tasks"`
}

// GameImageRequestTask defines model for GameImageRequestTask.
type GameImageRequestTask struct {
	DataId *string `json:"data_id,omitempty"`

	// PicType 不同类型的图片审核力度不同，头像审核会更严格<br> 1: 头像图片<br> 2: 非头像图片
	PicType int `json:"pic_type"`

	// SceneId 资料类（如昵称、个人签名，房间名，房间介绍）: 100-999<br>
	// * `110` - 举报报告：举报时，举报的内容<br>
	// * `111` - 家畜系统：家畜名字设置<br>
	// * `112` - 制作台：道具名称搜索<br>
	// * `113` - 宠物系统：宠物名字指定<br>
	// 即时通讯类（如聊天）审核的取值范围: 1000-1999<br>
	// * `1001` - 世界聊天<br>
	// * `1002` - 地区聊天<br>
	// * `1003` - 私聊频道<br>
	// * `1004` - 徐晓MOD：‘礼堂麦克风’输入<br>
	// 社交操作类（如好友申请）审核的取值范围: 2000-2999<br>
	// 空间论坛类（如帖子，弹幕审核）的取值范围: 3000-3999<br>
	// 搜索类的取值范围: 4000-4999<br>
	// * `4001` - 星球游廊：UGC名字搜索<br>
	// * `4002` - 好友系统：好友申请，屏蔽，好友搜索<br>
	SceneId SceneId `json:"scene_id"`

	// Url 待检测图片的URL。保证公网可以访问该链接；请尽量使用512KB内的图片，最大不超过10MB。
	Url string `json:"url"`
}

// GameImageResponse defines model for GameImageResponse.
type GameImageResponse struct {
	Code    int                         `json:"code"`
	Data    *GameImageResponseAllOfData `json:"data,omitempty"`
	Message string                      `json:"message"`
}

// GameImageResponseData defines model for GameImageResponseData.
type GameImageResponseData struct {
	// CheckDesc 检测描述。仅供参考
	CheckDesc *string `json:"check_desc,omitempty"`

	// DataId 检测对象的对应ID，如果请求中传入了data_id，则此处返回对应的data_id
	DataId  *string `json:"data_id,omitempty"`
	ErrCode *int    `json:"err_code,omitempty"`
	ErrMsg  *string `json:"err_msg,omitempty"`

	// Label 图片类别:<br> 0: 不区分恶意<br> 100: 正常<br> 101: 涉政<br> 102: 色情<br> 103: 低俗<br> 104: 性感<br> 105: 招嫖广告<br> 106: 业务广告<br> 107: 第三方广告<br> 108: 二维码<br> 109: 暴力血腥<br> 110: 侵权<br> 999: 其他
	Label *int `json:"label,omitempty"`

	// RequestId 本次检测任务的ID。定位问题需要提供该检测任务的ID
	RequestId *string `json:"request_id,omitempty"`
}

// GameImageResponseAllOf defines model for GameImageResponse_allOf.
type GameImageResponseAllOf struct {
	Data *GameImageResponseAllOfData `json:"data,omitempty"`
}

// GameImageResponseAllOfData defines model for GameImageResponse_allOf_data.
type GameImageResponseAllOfData struct {
	Data *[]GameImageResponseData `json:"data,omitempty"`
}

// GameTextImageRequest defines model for GameTextImageRequest.
type GameTextImageRequest struct {
	// PicList 待检测图片信息
	PicList []GameTextImageRequestPicData `json:"pic_list"`

	// SceneId 资料类（如昵称、个人签名，房间名，房间介绍）: 100-999<br>
	// * `110` - 举报报告：举报时，举报的内容<br>
	// * `111` - 家畜系统：家畜名字设置<br>
	// * `112` - 制作台：道具名称搜索<br>
	// * `113` - 宠物系统：宠物名字指定<br>
	// 即时通讯类（如聊天）审核的取值范围: 1000-1999<br>
	// * `1001` - 世界聊天<br>
	// * `1002` - 地区聊天<br>
	// * `1003` - 私聊频道<br>
	// * `1004` - 徐晓MOD：‘礼堂麦克风’输入<br>
	// 社交操作类（如好友申请）审核的取值范围: 2000-2999<br>
	// 空间论坛类（如帖子，弹幕审核）的取值范围: 3000-3999<br>
	// 搜索类的取值范围: 4000-4999<br>
	// * `4001` - 星球游廊：UGC名字搜索<br>
	// * `4002` - 好友系统：好友申请，屏蔽，好友搜索<br>
	SceneId  SceneId                      `json:"scene_id"`
	TextData GameTextImageRequestTextData `json:"text_data"`
}

// GameTextImageRequestPicData defines model for GameTextImageRequestPicData.
type GameTextImageRequestPicData struct {
	// PicType 不同类型的图片审核力度不同，头像审核会更严格<br> 1: 头像图片<br> 2: 非头像图片
	PicType *int `json:"pic_type,omitempty"`

	// Url 待检测图片的URL。保证公网可以访问该链接；请尽量使用512KB内的图片，最大不超过10MB。
	Url *string `json:"url,omitempty"`
}

// GameTextImageRequestTextData defines model for GameTextImageRequestTextData.
type GameTextImageRequestTextData struct {
	// Introduction 简介描述类。如果填写了该字段，会与text一同进行文本检测。如果该字段违规，text正常，最后仍然会变成违规不可发送。
	Introduction *string `json:"introduction,omitempty"`

	// Text 待检测文本正文信息。检测正文命中屏蔽词的情况下，会返回被屏蔽成***后的文本。
	Text *string `json:"text,omitempty"`

	// Title 标题类。如果填写了该字段，会与text一同进行文本检测。如果该字段违规，text正常，最后仍然会变成违规不可发送。
	Title *string `json:"title,omitempty"`
}

// GameTextImageResponse defines model for GameTextImageResponse.
type GameTextImageResponse struct {
	Code    int                        `json:"code"`
	Data    *GameTextImageResponseData `json:"data,omitempty"`
	Message string                     `json:"message"`
}

// GameTextImageResponseData defines model for GameTextImageResponseData.
type GameTextImageResponseData struct {
	PicCheckResults *[]GameTextImageResponseDataPic `json:"pic_check_results,omitempty"`

	// RequestId 本次检测任务的ID。定位问题需要提供该检测任务的ID
	RequestId       *string                     `json:"request_id,omitempty"`
	TextCheckResult *GameTextResponseDataResult `json:"text_check_result,omitempty"`
}

// GameTextImageResponseDataPic defines model for GameTextImageResponseDataPic.
type GameTextImageResponseDataPic struct {
	// CheckDesc 检测描述。仅供参考
	CheckDesc *string `json:"check_desc,omitempty"`

	// Label 图片类别:<br> 0: 不区分恶意<br> 100: 正常<br> 101: 涉政<br> 102: 色情<br> 103: 低俗<br> 104: 性感<br> 105: 招嫖广告<br> 106: 业务广告<br> 107: 第三方广告<br> 108: 二维码<br> 109: 暴力血腥<br> 110: 侵权<br> 999: 其他
	Label *int `json:"label,omitempty"`
}

// GameTextImageResponseAllOf defines model for GameTextImageResponse_allOf.
type GameTextImageResponseAllOf struct {
	Data *GameTextImageResponseData `json:"data,omitempty"`
}

// GameTextRequest defines model for GameTextRequest.
type GameTextRequest struct {
	Tasks []GameTextRequestTask `json:"tasks"`
}

// GameTextRequestTask defines model for GameTextRequestTask.
type GameTextRequestTask struct {
	DataId *string `json:"data_id,omitempty"`

	// Introduction 简介描述类。如果填写了该字段，会与text一同进行文本检测。如果该字段违规，text正常，最后仍然会变成违规不可发送。
	Introduction *string `json:"introduction,omitempty"`

	// SceneId 资料类（如昵称、个人签名，房间名，房间介绍）: 100-999<br>
	// * `110` - 举报报告：举报时，举报的内容<br>
	// * `111` - 家畜系统：家畜名字设置<br>
	// * `112` - 制作台：道具名称搜索<br>
	// * `113` - 宠物系统：宠物名字指定<br>
	// 即时通讯类（如聊天）审核的取值范围: 1000-1999<br>
	// * `1001` - 世界聊天<br>
	// * `1002` - 地区聊天<br>
	// * `1003` - 私聊频道<br>
	// * `1004` - 徐晓MOD：‘礼堂麦克风’输入<br>
	// 社交操作类（如好友申请）审核的取值范围: 2000-2999<br>
	// 空间论坛类（如帖子，弹幕审核）的取值范围: 3000-3999<br>
	// 搜索类的取值范围: 4000-4999<br>
	// * `4001` - 星球游廊：UGC名字搜索<br>
	// * `4002` - 好友系统：好友申请，屏蔽，好友搜索<br>
	SceneId SceneId `json:"scene_id"`

	// Text 待检测文本信息
	Text string `json:"text"`

	// Title 标题类。如果填写了该字段，会与text一同进行文本检测。如果该字段违规，text正常，最后仍然会变成违规不可发送。
	Title *string `json:"title,omitempty"`
}

// GameTextResponse defines model for GameTextResponse.
type GameTextResponse struct {
	Code    int                        `json:"code"`
	Data    *GameTextResponseAllOfData `json:"data,omitempty"`
	Message string                     `json:"message"`
}

// GameTextResponseData defines model for GameTextResponseData.
type GameTextResponseData struct {
	// DataId 检测对象的对应ID，如果请求中传入了data_id，则此处返回对应的data_id
	DataId  *string `json:"data_id,omitempty"`
	ErrCode *int    `json:"err_code,omitempty"`
	ErrMsg  *string `json:"err_msg,omitempty"`

	// RequestId 本次检测任务的ID。定位问题需要提供该检测任务的ID
	RequestId       *string                     `json:"request_id,omitempty"`
	TextCheckResult *GameTextResponseDataResult `json:"text_check_result,omitempty"`
}

// GameTextResponseDataResult defines model for GameTextResponseDataResult.
type GameTextResponseDataResult struct {
	// CheckDesc 检测描述。仅供参考。
	CheckDesc *string `json:"check_desc,omitempty"`

	// CheckResult 0：文本审核正常。<br> 1：文本违规，包含恶意，需要拼比或限制公开。聊天场景需要实现仅发送者自己可见的效果，发送者可见的文本使用filtered_text的内容。<br> 2：文本里面只包含屏蔽词，建议使用filtered_text的内容进行公开。filtered_text已经将文本中屏蔽词替换成***。
	CheckResult *int `json:"check_result,omitempty"`

	// FilteredText 如果被检测文本命中了自定义屏蔽词词库中的屏蔽词，则会返回当前字段，并将命中的屏蔽词替换为星号(*)。
	FilteredText *string `json:"filtered_text,omitempty"`

	// Keywords 该字段用户返回当前命中的多个关键词，此字段可能返回null，表示取不到有效值
	Keywords *[]string `json:"keywords,omitempty"`

	// Label 文本类别： 0： 不区分恶意<br> 100： 正常<br> 101： 涉政<br> 102： 色情<br> 103： 低俗<br> 104： 广告<br> 105： 游戏拉人<br> 106： 辱骂<br> 107： 违法违规<br> 999： 其他
	Label *int `json:"label,omitempty"`
}

// GameTextResponseAllOf defines model for GameTextResponse_allOf.
type GameTextResponseAllOf struct {
	Data *GameTextResponseAllOfData `json:"data,omitempty"`
}

// GameTextResponseAllOfData defines model for GameTextResponse_allOf_data.
type GameTextResponseAllOfData struct {
	Data *[]GameTextResponseData `json:"data,omitempty"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// DataId 该字段表示您为待检测对象分配的数据ID，传入后可方便您对文件进行标识和管理。<br> 取值：由英文字母（大小写均可）、数字及四个特殊符号(_,-,@,#)组成，<strong>长度不超过64个字符</strong>。
	DataId *string `json:"DataId,omitempty"`

	// FileUrl 该字段表示待检测图片文件的访问链接，图片支持PNG、JPG、JPEG、BMP、GIF、WEBP格式，大小不超过5MB，建议分辨率不低于256x256；<br> 图片下载时间限制为3秒，超过则会返回下载超时；<br> 由于网络安全策略，送审带重定向的链接，可能引起下载失败，请尽量避免，比如Http返回302状态码的链接，可能导致接口返回ResourceUnavailable.ImageDownloadError。
	FileUrl *string `json:"FileUrl,omitempty"`
}

// ImageResponse defines model for ImageResponse.
type ImageResponse struct {
	Code    int                     `json:"code"`
	Data    *ImageResponseAllOfData `json:"data,omitempty"`
	Message string                  `json:"message"`
}

// ImageResponseAllOfData defines model for ImageResponse_allOf_data.
type ImageResponseAllOfData struct {
	// Label Normal: 正常 Porn: 色情 Abuse: 谩骂 Ad: 广告 Custom: 自定义
	Label ImageResponseAllOfDataLabel `json:"Label"`
}

// ImageResponseAllOfDataLabel Normal: 正常 Porn: 色情 Abuse: 谩骂 Ad: 广告 Custom: 自定义
type ImageResponseAllOfDataLabel string

// SceneId 资料类（如昵称、个人签名，房间名，房间介绍）: 100-999<br>
// * `110` - 举报报告：举报时，举报的内容<br>
// * `111` - 家畜系统：家畜名字设置<br>
// * `112` - 制作台：道具名称搜索<br>
// * `113` - 宠物系统：宠物名字指定<br>
// 即时通讯类（如聊天）审核的取值范围: 1000-1999<br>
// * `1001` - 世界聊天<br>
// * `1002` - 地区聊天<br>
// * `1003` - 私聊频道<br>
// * `1004` - 徐晓MOD：‘礼堂麦克风’输入<br>
// 社交操作类（如好友申请）审核的取值范围: 2000-2999<br>
// 空间论坛类（如帖子，弹幕审核）的取值范围: 3000-3999<br>
// 搜索类的取值范围: 4000-4999<br>
// * `4001` - 星球游廊：UGC名字搜索<br>
// * `4002` - 好友系统：好友申请，屏蔽，好友搜索<br>
type SceneId = int

// TextRequest defines model for TextRequest.
type TextRequest struct {
	// Content 该字段表示待检测对象的文本内容
	Content string `json:"Content"`

	// DataId 该字段表示您为待检测对象分配的数据ID，传入后可方便您对文件进行标识和管理。<br> 取值：由英文字母（大小写均可）、数字及四个特殊符号(_,-,@,#)组成，<strong>长度不超过64个字符</strong>。
	DataId *string `json:"DataId,omitempty"`
}

// TextResponse defines model for TextResponse.
type TextResponse struct {
	Code    int                    `json:"code"`
	Data    *TextResponseAllOfData `json:"data,omitempty"`
	Message string                 `json:"message"`
}

// TextResponseAllOf defines model for TextResponse_allOf.
type TextResponseAllOf struct {
	Data *TextResponseAllOfData `json:"data,omitempty"`
}

// TextResponseAllOfData defines model for TextResponse_allOf_data.
type TextResponseAllOfData struct {
	// FilteredText 如果被检测文本命中了自定义屏蔽词词库中的屏蔽词，则会返回当前字段，并将命中的屏蔽词替换为星号(*)。
	FilteredText *string `json:"FilteredText,omitempty"`

	// Keywords 该字段用户返回当前命中的多个关键词，此字段可能返回null，表示取不到有效值
	Keywords *[]string `json:"Keywords,omitempty"`

	// Label Normal: 正常 Porn: 色情 Abuse: 谩骂 Ad: 广告 Custom: 自定义
	Label TextResponseAllOfDataLabel `json:"Label"`
}

// TextResponseAllOfDataLabel Normal: 正常 Porn: 色情 Abuse: 谩骂 Ad: 广告 Custom: 自定义
type TextResponseAllOfDataLabel string

// GetCheckV10GameGameNoCreditParams defines parameters for GetCheckV10GameGameNoCredit.
type GetCheckV10GameGameNoCreditParams struct {
	// UserId WechatOpenID or QQOpenID
	UserId string `form:"userId" json:"userId"`
}

// PostCheckV10GameGameNoBatchCreditJSONRequestBody defines body for PostCheckV10GameGameNoBatchCredit for application/json ContentType.
type PostCheckV10GameGameNoBatchCreditJSONRequestBody = GameBatchCreditRequest

// PostCheckV10GameGameNoBatchImageJSONRequestBody defines body for PostCheckV10GameGameNoBatchImage for application/json ContentType.
type PostCheckV10GameGameNoBatchImageJSONRequestBody = GameImageRequest

// PostCheckV10GameGameNoBatchTextJSONRequestBody defines body for PostCheckV10GameGameNoBatchText for application/json ContentType.
type PostCheckV10GameGameNoBatchTextJSONRequestBody = GameTextRequest

// PostCheckV10GameGameNoTextImageJSONRequestBody defines body for PostCheckV10GameGameNoTextImage for application/json ContentType.
type PostCheckV10GameGameNoTextImageJSONRequestBody = GameTextImageRequest

// PostCheckV10ImageJSONRequestBody defines body for PostCheckV10Image for application/json ContentType.
type PostCheckV10ImageJSONRequestBody = ImageRequest

// PostCheckV10TextJSONRequestBody defines body for PostCheckV10Text for application/json ContentType.
type PostCheckV10TextJSONRequestBody = TextRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostCheckV10GameGameNoBatchCreditWithBody request with any body
	PostCheckV10GameGameNoBatchCreditWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCheckV10GameGameNoBatchCredit(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchCreditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCheckV10GameGameNoBatchImageWithBody request with any body
	PostCheckV10GameGameNoBatchImageWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCheckV10GameGameNoBatchImage(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCheckV10GameGameNoBatchTextWithBody request with any body
	PostCheckV10GameGameNoBatchTextWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCheckV10GameGameNoBatchText(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchTextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCheckV10GameGameNoCredit request
	GetCheckV10GameGameNoCredit(ctx context.Context, gameNo string, params *GetCheckV10GameGameNoCreditParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCheckV10GameGameNoTextImageWithBody request with any body
	PostCheckV10GameGameNoTextImageWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCheckV10GameGameNoTextImage(ctx context.Context, gameNo string, body PostCheckV10GameGameNoTextImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCheckV10ImageWithBody request with any body
	PostCheckV10ImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCheckV10Image(ctx context.Context, body PostCheckV10ImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCheckV10TextWithBody request with any body
	PostCheckV10TextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCheckV10Text(ctx context.Context, body PostCheckV10TextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostCheckV10GameGameNoBatchCreditWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10GameGameNoBatchCreditRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10GameGameNoBatchCredit(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchCreditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10GameGameNoBatchCreditRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10GameGameNoBatchImageWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10GameGameNoBatchImageRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10GameGameNoBatchImage(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10GameGameNoBatchImageRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10GameGameNoBatchTextWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10GameGameNoBatchTextRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10GameGameNoBatchText(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchTextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10GameGameNoBatchTextRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCheckV10GameGameNoCredit(ctx context.Context, gameNo string, params *GetCheckV10GameGameNoCreditParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCheckV10GameGameNoCreditRequest(c.Server, gameNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10GameGameNoTextImageWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10GameGameNoTextImageRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10GameGameNoTextImage(ctx context.Context, gameNo string, body PostCheckV10GameGameNoTextImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10GameGameNoTextImageRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10ImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10ImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10Image(ctx context.Context, body PostCheckV10ImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10ImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10TextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10TextRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCheckV10Text(ctx context.Context, body PostCheckV10TextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCheckV10TextRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostCheckV10GameGameNoBatchCreditRequest calls the generic PostCheckV10GameGameNoBatchCredit builder with application/json body
func NewPostCheckV10GameGameNoBatchCreditRequest(server string, gameNo string, body PostCheckV10GameGameNoBatchCreditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCheckV10GameGameNoBatchCreditRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostCheckV10GameGameNoBatchCreditRequestWithBody generates requests for PostCheckV10GameGameNoBatchCredit with any type of body
func NewPostCheckV10GameGameNoBatchCreditRequestWithBody(server string, gameNo string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/check/v1.0/game/%s/batch_credit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCheckV10GameGameNoBatchImageRequest calls the generic PostCheckV10GameGameNoBatchImage builder with application/json body
func NewPostCheckV10GameGameNoBatchImageRequest(server string, gameNo string, body PostCheckV10GameGameNoBatchImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCheckV10GameGameNoBatchImageRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostCheckV10GameGameNoBatchImageRequestWithBody generates requests for PostCheckV10GameGameNoBatchImage with any type of body
func NewPostCheckV10GameGameNoBatchImageRequestWithBody(server string, gameNo string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/check/v1.0/game/%s/batch_image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCheckV10GameGameNoBatchTextRequest calls the generic PostCheckV10GameGameNoBatchText builder with application/json body
func NewPostCheckV10GameGameNoBatchTextRequest(server string, gameNo string, body PostCheckV10GameGameNoBatchTextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCheckV10GameGameNoBatchTextRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostCheckV10GameGameNoBatchTextRequestWithBody generates requests for PostCheckV10GameGameNoBatchText with any type of body
func NewPostCheckV10GameGameNoBatchTextRequestWithBody(server string, gameNo string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/check/v1.0/game/%s/batch_text", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCheckV10GameGameNoCreditRequest generates requests for GetCheckV10GameGameNoCredit
func NewGetCheckV10GameGameNoCreditRequest(server string, gameNo string, params *GetCheckV10GameGameNoCreditParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/check/v1.0/game/%s/credit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCheckV10GameGameNoTextImageRequest calls the generic PostCheckV10GameGameNoTextImage builder with application/json body
func NewPostCheckV10GameGameNoTextImageRequest(server string, gameNo string, body PostCheckV10GameGameNoTextImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCheckV10GameGameNoTextImageRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostCheckV10GameGameNoTextImageRequestWithBody generates requests for PostCheckV10GameGameNoTextImage with any type of body
func NewPostCheckV10GameGameNoTextImageRequestWithBody(server string, gameNo string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/check/v1.0/game/%s/text_image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCheckV10ImageRequest calls the generic PostCheckV10Image builder with application/json body
func NewPostCheckV10ImageRequest(server string, body PostCheckV10ImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCheckV10ImageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCheckV10ImageRequestWithBody generates requests for PostCheckV10Image with any type of body
func NewPostCheckV10ImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/check/v1.0/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCheckV10TextRequest calls the generic PostCheckV10Text builder with application/json body
func NewPostCheckV10TextRequest(server string, body PostCheckV10TextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCheckV10TextRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCheckV10TextRequestWithBody generates requests for PostCheckV10Text with any type of body
func NewPostCheckV10TextRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/check/v1.0/text")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostCheckV10GameGameNoBatchCreditWithBodyWithResponse request with any body
	PostCheckV10GameGameNoBatchCreditWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchCreditResponse, error)

	PostCheckV10GameGameNoBatchCreditWithResponse(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchCreditJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchCreditResponse, error)

	// PostCheckV10GameGameNoBatchImageWithBodyWithResponse request with any body
	PostCheckV10GameGameNoBatchImageWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchImageResponse, error)

	PostCheckV10GameGameNoBatchImageWithResponse(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchImageResponse, error)

	// PostCheckV10GameGameNoBatchTextWithBodyWithResponse request with any body
	PostCheckV10GameGameNoBatchTextWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchTextResponse, error)

	PostCheckV10GameGameNoBatchTextWithResponse(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchTextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchTextResponse, error)

	// GetCheckV10GameGameNoCreditWithResponse request
	GetCheckV10GameGameNoCreditWithResponse(ctx context.Context, gameNo string, params *GetCheckV10GameGameNoCreditParams, reqEditors ...RequestEditorFn) (*GetCheckV10GameGameNoCreditResponse, error)

	// PostCheckV10GameGameNoTextImageWithBodyWithResponse request with any body
	PostCheckV10GameGameNoTextImageWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoTextImageResponse, error)

	PostCheckV10GameGameNoTextImageWithResponse(ctx context.Context, gameNo string, body PostCheckV10GameGameNoTextImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoTextImageResponse, error)

	// PostCheckV10ImageWithBodyWithResponse request with any body
	PostCheckV10ImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10ImageResponse, error)

	PostCheckV10ImageWithResponse(ctx context.Context, body PostCheckV10ImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10ImageResponse, error)

	// PostCheckV10TextWithBodyWithResponse request with any body
	PostCheckV10TextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10TextResponse, error)

	PostCheckV10TextWithResponse(ctx context.Context, body PostCheckV10TextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10TextResponse, error)
}

type PostCheckV10GameGameNoBatchCreditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameBatchCreditResponse
}

// Status returns HTTPResponse.Status
func (r PostCheckV10GameGameNoBatchCreditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCheckV10GameGameNoBatchCreditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCheckV10GameGameNoBatchImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameImageResponse
}

// Status returns HTTPResponse.Status
func (r PostCheckV10GameGameNoBatchImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCheckV10GameGameNoBatchImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCheckV10GameGameNoBatchTextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameTextResponse
}

// Status returns HTTPResponse.Status
func (r PostCheckV10GameGameNoBatchTextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCheckV10GameGameNoBatchTextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCheckV10GameGameNoCreditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameCreditResponse
}

// Status returns HTTPResponse.Status
func (r GetCheckV10GameGameNoCreditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCheckV10GameGameNoCreditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCheckV10GameGameNoTextImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameTextImageResponse
}

// Status returns HTTPResponse.Status
func (r PostCheckV10GameGameNoTextImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCheckV10GameGameNoTextImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCheckV10ImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
}

// Status returns HTTPResponse.Status
func (r PostCheckV10ImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCheckV10ImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCheckV10TextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TextResponse
}

// Status returns HTTPResponse.Status
func (r PostCheckV10TextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCheckV10TextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostCheckV10GameGameNoBatchCreditWithBodyWithResponse request with arbitrary body returning *PostCheckV10GameGameNoBatchCreditResponse
func (c *ClientWithResponses) PostCheckV10GameGameNoBatchCreditWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchCreditResponse, error) {
	rsp, err := c.PostCheckV10GameGameNoBatchCreditWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10GameGameNoBatchCreditResponse(rsp)
}

func (c *ClientWithResponses) PostCheckV10GameGameNoBatchCreditWithResponse(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchCreditJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchCreditResponse, error) {
	rsp, err := c.PostCheckV10GameGameNoBatchCredit(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10GameGameNoBatchCreditResponse(rsp)
}

// PostCheckV10GameGameNoBatchImageWithBodyWithResponse request with arbitrary body returning *PostCheckV10GameGameNoBatchImageResponse
func (c *ClientWithResponses) PostCheckV10GameGameNoBatchImageWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchImageResponse, error) {
	rsp, err := c.PostCheckV10GameGameNoBatchImageWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10GameGameNoBatchImageResponse(rsp)
}

func (c *ClientWithResponses) PostCheckV10GameGameNoBatchImageWithResponse(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchImageResponse, error) {
	rsp, err := c.PostCheckV10GameGameNoBatchImage(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10GameGameNoBatchImageResponse(rsp)
}

// PostCheckV10GameGameNoBatchTextWithBodyWithResponse request with arbitrary body returning *PostCheckV10GameGameNoBatchTextResponse
func (c *ClientWithResponses) PostCheckV10GameGameNoBatchTextWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchTextResponse, error) {
	rsp, err := c.PostCheckV10GameGameNoBatchTextWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10GameGameNoBatchTextResponse(rsp)
}

func (c *ClientWithResponses) PostCheckV10GameGameNoBatchTextWithResponse(ctx context.Context, gameNo string, body PostCheckV10GameGameNoBatchTextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoBatchTextResponse, error) {
	rsp, err := c.PostCheckV10GameGameNoBatchText(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10GameGameNoBatchTextResponse(rsp)
}

// GetCheckV10GameGameNoCreditWithResponse request returning *GetCheckV10GameGameNoCreditResponse
func (c *ClientWithResponses) GetCheckV10GameGameNoCreditWithResponse(ctx context.Context, gameNo string, params *GetCheckV10GameGameNoCreditParams, reqEditors ...RequestEditorFn) (*GetCheckV10GameGameNoCreditResponse, error) {
	rsp, err := c.GetCheckV10GameGameNoCredit(ctx, gameNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCheckV10GameGameNoCreditResponse(rsp)
}

// PostCheckV10GameGameNoTextImageWithBodyWithResponse request with arbitrary body returning *PostCheckV10GameGameNoTextImageResponse
func (c *ClientWithResponses) PostCheckV10GameGameNoTextImageWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoTextImageResponse, error) {
	rsp, err := c.PostCheckV10GameGameNoTextImageWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10GameGameNoTextImageResponse(rsp)
}

func (c *ClientWithResponses) PostCheckV10GameGameNoTextImageWithResponse(ctx context.Context, gameNo string, body PostCheckV10GameGameNoTextImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10GameGameNoTextImageResponse, error) {
	rsp, err := c.PostCheckV10GameGameNoTextImage(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10GameGameNoTextImageResponse(rsp)
}

// PostCheckV10ImageWithBodyWithResponse request with arbitrary body returning *PostCheckV10ImageResponse
func (c *ClientWithResponses) PostCheckV10ImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10ImageResponse, error) {
	rsp, err := c.PostCheckV10ImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10ImageResponse(rsp)
}

func (c *ClientWithResponses) PostCheckV10ImageWithResponse(ctx context.Context, body PostCheckV10ImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10ImageResponse, error) {
	rsp, err := c.PostCheckV10Image(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10ImageResponse(rsp)
}

// PostCheckV10TextWithBodyWithResponse request with arbitrary body returning *PostCheckV10TextResponse
func (c *ClientWithResponses) PostCheckV10TextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCheckV10TextResponse, error) {
	rsp, err := c.PostCheckV10TextWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10TextResponse(rsp)
}

func (c *ClientWithResponses) PostCheckV10TextWithResponse(ctx context.Context, body PostCheckV10TextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCheckV10TextResponse, error) {
	rsp, err := c.PostCheckV10Text(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCheckV10TextResponse(rsp)
}

// ParsePostCheckV10GameGameNoBatchCreditResponse parses an HTTP response from a PostCheckV10GameGameNoBatchCreditWithResponse call
func ParsePostCheckV10GameGameNoBatchCreditResponse(rsp *http.Response) (*PostCheckV10GameGameNoBatchCreditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCheckV10GameGameNoBatchCreditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameBatchCreditResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCheckV10GameGameNoBatchImageResponse parses an HTTP response from a PostCheckV10GameGameNoBatchImageWithResponse call
func ParsePostCheckV10GameGameNoBatchImageResponse(rsp *http.Response) (*PostCheckV10GameGameNoBatchImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCheckV10GameGameNoBatchImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCheckV10GameGameNoBatchTextResponse parses an HTTP response from a PostCheckV10GameGameNoBatchTextWithResponse call
func ParsePostCheckV10GameGameNoBatchTextResponse(rsp *http.Response) (*PostCheckV10GameGameNoBatchTextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCheckV10GameGameNoBatchTextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameTextResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCheckV10GameGameNoCreditResponse parses an HTTP response from a GetCheckV10GameGameNoCreditWithResponse call
func ParseGetCheckV10GameGameNoCreditResponse(rsp *http.Response) (*GetCheckV10GameGameNoCreditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCheckV10GameGameNoCreditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameCreditResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCheckV10GameGameNoTextImageResponse parses an HTTP response from a PostCheckV10GameGameNoTextImageWithResponse call
func ParsePostCheckV10GameGameNoTextImageResponse(rsp *http.Response) (*PostCheckV10GameGameNoTextImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCheckV10GameGameNoTextImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameTextImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCheckV10ImageResponse parses an HTTP response from a PostCheckV10ImageWithResponse call
func ParsePostCheckV10ImageResponse(rsp *http.Response) (*PostCheckV10ImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCheckV10ImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCheckV10TextResponse parses an HTTP response from a PostCheckV10TextWithResponse call
func ParsePostCheckV10TextResponse(rsp *http.Response) (*PostCheckV10TextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCheckV10TextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TextResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
