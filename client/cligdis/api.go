// Package cligdis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package cligdis

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	InternalScopes  = "Internal.Scopes"
	Idip_authScopes = "idip_auth.Scopes"
)

// Defines values for PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType.
const (
	PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceTypeGame    PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType = "game"
	PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceTypeService PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType = "service"
)

// Defines values for PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId.
const (
	PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceIdSGXQ PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId = "SGXQ"
)

// Defines values for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType.
const (
	Console  PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType = "console"
	Platform PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType = "platform"
)

// Defines values for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType.
const (
	PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceTypeGame    PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType = "game"
	PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceTypeService PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType = "service"
)

// Defines values for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId.
const (
	PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceIdSGXQ PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId = "SGXQ"
)

// DataResult defines model for DataResult.
type DataResult struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// IdipDataPacket required prefix: "data_packet=", e.g. "data_packet={'head': .....}
type IdipDataPacket struct {
	// Body 包体信息
	Body map[string]interface{} `json:"body"`

	// Head 包头信息
	Head IdipHeader `json:"head"`
}

// IdipHeader 包头信息
type IdipHeader struct {
	// Authenticate 加密串
	Authenticate string `json:"Authenticate"`

	// Cmdid 命令ID
	Cmdid uint32 `json:"Cmdid"`

	// PacketLen 包长
	PacketLen *uint32 `json:"PacketLen"`

	// Result 错误码,返回码类型：0：处理成功，需要解开包体获得详细信息,1：处理成功，但包体返回为空，不需要处理包体（eg：查询用户角色，用户角色不存在等），其他错误,小于-100 ：用户自定义错误，需要填写szRetErrMsg
	Result *int32 `json:"Result,omitempty"`

	// RetErrMsg 错误信息
	RetErrMsg *string `json:"RetErrMsg,omitempty"`

	// SendTime 发送时间YYYYMMDD对应的整数
	SendTime uint32 `json:"SendTime"`

	// Seqid 流水号
	Seqid uint32 `json:"Seqid"`

	// ServiceName 服务名
	ServiceName string `json:"ServiceName"`

	// Version 版本号
	Version uint32 `json:"Version"`
}

// PostGdisIdipTargetServiceTypeTargetServiceIdParams defines parameters for PostGdisIdipTargetServiceTypeTargetServiceId.
type PostGdisIdipTargetServiceTypeTargetServiceIdParams struct {
	// IdipSign Data Signature
	IdipSign string `form:"idip_sign" json:"idip_sign"`
}

// PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType defines parameters for PostGdisIdipTargetServiceTypeTargetServiceId.
type PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType string

// PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId defines parameters for PostGdisIdipTargetServiceTypeTargetServiceId.
type PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId string

// PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONBody defines parameters for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName.
type PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONBody map[string]interface{}

// PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType defines parameters for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName.
type PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType string

// PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType defines parameters for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName.
type PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType string

// PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId defines parameters for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName.
type PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId string

// PostGdisIdipTargetServiceTypeTargetServiceIdApplicationIDipPlusJSONRequestBody defines body for PostGdisIdipTargetServiceTypeTargetServiceId for application/idip+json ContentType.
type PostGdisIdipTargetServiceTypeTargetServiceIdApplicationIDipPlusJSONRequestBody = IdipDataPacket

// PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONRequestBody defines body for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName for application/json ContentType.
type PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONRequestBody PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostGdisIdipTargetServiceTypeTargetServiceIdWithBody request with any body
	PostGdisIdipTargetServiceTypeTargetServiceIdWithBody(ctx context.Context, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGdisIdipTargetServiceTypeTargetServiceIdWithApplicationIDipPlusJSONBody(ctx context.Context, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, body PostGdisIdipTargetServiceTypeTargetServiceIdApplicationIDipPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithBody request with any body
	PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithBody(ctx context.Context, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName(ctx context.Context, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, body PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostGdisIdipTargetServiceTypeTargetServiceIdWithBody(ctx context.Context, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGdisIdipTargetServiceTypeTargetServiceIdRequestWithBody(c.Server, targetServiceType, targetServiceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGdisIdipTargetServiceTypeTargetServiceIdWithApplicationIDipPlusJSONBody(ctx context.Context, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, body PostGdisIdipTargetServiceTypeTargetServiceIdApplicationIDipPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGdisIdipTargetServiceTypeTargetServiceIdRequestWithApplicationIDipPlusJSONBody(c.Server, targetServiceType, targetServiceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithBody(ctx context.Context, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameRequestWithBody(c.Server, sourceType, targetServiceType, targetServiceId, serviceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName(ctx context.Context, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, body PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameRequest(c.Server, sourceType, targetServiceType, targetServiceId, serviceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostGdisIdipTargetServiceTypeTargetServiceIdRequestWithApplicationIDipPlusJSONBody calls the generic PostGdisIdipTargetServiceTypeTargetServiceId builder with application/idip+json body
func NewPostGdisIdipTargetServiceTypeTargetServiceIdRequestWithApplicationIDipPlusJSONBody(server string, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, body PostGdisIdipTargetServiceTypeTargetServiceIdApplicationIDipPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGdisIdipTargetServiceTypeTargetServiceIdRequestWithBody(server, targetServiceType, targetServiceId, params, "application/idip+json", bodyReader)
}

// NewPostGdisIdipTargetServiceTypeTargetServiceIdRequestWithBody generates requests for PostGdisIdipTargetServiceTypeTargetServiceId with any type of body
func NewPostGdisIdipTargetServiceTypeTargetServiceIdRequestWithBody(server string, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetServiceType", runtime.ParamLocationPath, targetServiceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetServiceId", runtime.ParamLocationPath, targetServiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gdis/idip/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idip_sign", runtime.ParamLocationQuery, params.IdipSign); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameRequest calls the generic PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName builder with application/json body
func NewPostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameRequest(server string, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, body PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameRequestWithBody(server, sourceType, targetServiceType, targetServiceId, serviceName, "application/json", bodyReader)
}

// NewPostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameRequestWithBody generates requests for PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName with any type of body
func NewPostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameRequestWithBody(server string, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sourceType", runtime.ParamLocationPath, sourceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetServiceType", runtime.ParamLocationPath, targetServiceType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "targetServiceId", runtime.ParamLocationPath, targetServiceId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "serviceName", runtime.ParamLocationPath, serviceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gdis/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostGdisIdipTargetServiceTypeTargetServiceIdWithBodyWithResponse request with any body
	PostGdisIdipTargetServiceTypeTargetServiceIdWithBodyWithResponse(ctx context.Context, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGdisIdipTargetServiceTypeTargetServiceIdResponse, error)

	PostGdisIdipTargetServiceTypeTargetServiceIdWithApplicationIDipPlusJSONBodyWithResponse(ctx context.Context, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, body PostGdisIdipTargetServiceTypeTargetServiceIdApplicationIDipPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGdisIdipTargetServiceTypeTargetServiceIdResponse, error)

	// PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithBodyWithResponse request with any body
	PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithBodyWithResponse(ctx context.Context, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse, error)

	PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithResponse(ctx context.Context, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, body PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse, error)
}

type PostGdisIdipTargetServiceTypeTargetServiceIdResponse struct {
	Body                   []byte
	HTTPResponse           *http.Response
	ApplicationidipJSON200 *IdipDataPacket
}

// Status returns HTTPResponse.Status
func (r PostGdisIdipTargetServiceTypeTargetServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGdisIdipTargetServiceTypeTargetServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int                     `json:"code"`
		Data    *map[string]interface{} `json:"data,omitempty"`
		Message string                  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostGdisIdipTargetServiceTypeTargetServiceIdWithBodyWithResponse request with arbitrary body returning *PostGdisIdipTargetServiceTypeTargetServiceIdResponse
func (c *ClientWithResponses) PostGdisIdipTargetServiceTypeTargetServiceIdWithBodyWithResponse(ctx context.Context, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGdisIdipTargetServiceTypeTargetServiceIdResponse, error) {
	rsp, err := c.PostGdisIdipTargetServiceTypeTargetServiceIdWithBody(ctx, targetServiceType, targetServiceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGdisIdipTargetServiceTypeTargetServiceIdResponse(rsp)
}

func (c *ClientWithResponses) PostGdisIdipTargetServiceTypeTargetServiceIdWithApplicationIDipPlusJSONBodyWithResponse(ctx context.Context, targetServiceType PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceType, targetServiceId PostGdisIdipTargetServiceTypeTargetServiceIdParamsTargetServiceId, params *PostGdisIdipTargetServiceTypeTargetServiceIdParams, body PostGdisIdipTargetServiceTypeTargetServiceIdApplicationIDipPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGdisIdipTargetServiceTypeTargetServiceIdResponse, error) {
	rsp, err := c.PostGdisIdipTargetServiceTypeTargetServiceIdWithApplicationIDipPlusJSONBody(ctx, targetServiceType, targetServiceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGdisIdipTargetServiceTypeTargetServiceIdResponse(rsp)
}

// PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithBodyWithResponse request with arbitrary body returning *PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse
func (c *ClientWithResponses) PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithBodyWithResponse(ctx context.Context, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse, error) {
	rsp, err := c.PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithBody(ctx, sourceType, targetServiceType, targetServiceId, serviceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse(rsp)
}

func (c *ClientWithResponses) PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithResponse(ctx context.Context, sourceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsSourceType, targetServiceType PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceType, targetServiceId PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameParamsTargetServiceId, serviceName string, body PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse, error) {
	rsp, err := c.PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceName(ctx, sourceType, targetServiceType, targetServiceId, serviceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse(rsp)
}

// ParsePostGdisIdipTargetServiceTypeTargetServiceIdResponse parses an HTTP response from a PostGdisIdipTargetServiceTypeTargetServiceIdWithResponse call
func ParsePostGdisIdipTargetServiceTypeTargetServiceIdResponse(rsp *http.Response) (*PostGdisIdipTargetServiceTypeTargetServiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGdisIdipTargetServiceTypeTargetServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdipDataPacket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationidipJSON200 = &dest

	}

	return response, nil
}

// ParsePostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse parses an HTTP response from a PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameWithResponse call
func ParsePostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse(rsp *http.Response) (*PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGdisSourceTypeTargetServiceTypeTargetServiceIdServiceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int                     `json:"code"`
			Data    *map[string]interface{} `json:"data,omitempty"`
			Message string                  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
