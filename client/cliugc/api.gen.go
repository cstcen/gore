// Package clitlogsender provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package clitlogsender

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ExternalScopes = "External.Scopes"
	InternalScopes = "Internal.Scopes"
)

// Defines values for PackageArchitect.
const (
	PackageArchitectAndroid PackageArchitect = "Android"
	PackageArchitectIOS     PackageArchitect = "IOS"
	PackageArchitectPackage PackageArchitect = "Package"
	PackageArchitectProject PackageArchitect = "Project"
	PackageArchitectServer  PackageArchitect = "Server"
)

// Defines values for GetBackpacksUsingGETParamsGenre.
const (
	GetBackpacksUsingGETParamsGenreANIMATION    GetBackpacksUsingGETParamsGenre = "ANIMATION"
	GetBackpacksUsingGETParamsGenreAUDIO        GetBackpacksUsingGETParamsGenre = "AUDIO"
	GetBackpacksUsingGETParamsGenreBODY         GetBackpacksUsingGETParamsGenre = "BODY"
	GetBackpacksUsingGETParamsGenreGEAR         GetBackpacksUsingGETParamsGenre = "GEAR"
	GetBackpacksUsingGETParamsGenreMATERIAL     GetBackpacksUsingGETParamsGenre = "MATERIAL"
	GetBackpacksUsingGETParamsGenreMESH         GetBackpacksUsingGETParamsGenre = "MESH"
	GetBackpacksUsingGETParamsGenreMESHBLOCK    GetBackpacksUsingGETParamsGenre = "MESHBLOCK"
	GetBackpacksUsingGETParamsGenrePARTICLE     GetBackpacksUsingGETParamsGenre = "PARTICLE"
	GetBackpacksUsingGETParamsGenreSCRIPT       GetBackpacksUsingGETParamsGenre = "SCRIPT"
	GetBackpacksUsingGETParamsGenreSTRUCTURE    GetBackpacksUsingGETParamsGenre = "STRUCTURE"
	GetBackpacksUsingGETParamsGenreTEXTURE2D    GetBackpacksUsingGETParamsGenre = "TEXTURE2D"
	GetBackpacksUsingGETParamsGenreVOXELBLOCK   GetBackpacksUsingGETParamsGenre = "VOXELBLOCK"
	GetBackpacksUsingGETParamsGenreVOXELTERRAIN GetBackpacksUsingGETParamsGenre = "VOXELTERRAIN"
	GetBackpacksUsingGETParamsGenreVPACK        GetBackpacksUsingGETParamsGenre = "VPACK"
)

// Defines values for GetBackpacksUsingGETParamsSorting.
const (
	GetBackpacksUsingGETParamsSortingN1 GetBackpacksUsingGETParamsSorting = 1
	GetBackpacksUsingGETParamsSortingN2 GetBackpacksUsingGETParamsSorting = 2
	GetBackpacksUsingGETParamsSortingN3 GetBackpacksUsingGETParamsSorting = 3
	GetBackpacksUsingGETParamsSortingN4 GetBackpacksUsingGETParamsSorting = 4
	GetBackpacksUsingGETParamsSortingN5 GetBackpacksUsingGETParamsSorting = 5
	GetBackpacksUsingGETParamsSortingN6 GetBackpacksUsingGETParamsSorting = 6
	GetBackpacksUsingGETParamsSortingN7 GetBackpacksUsingGETParamsSorting = 7
	GetBackpacksUsingGETParamsSortingN8 GetBackpacksUsingGETParamsSorting = 8
)

// Defines values for SearchBackpackAssetUsingGETParamsGenre.
const (
	SearchBackpackAssetUsingGETParamsGenreANIMATION    SearchBackpackAssetUsingGETParamsGenre = "ANIMATION"
	SearchBackpackAssetUsingGETParamsGenreAUDIO        SearchBackpackAssetUsingGETParamsGenre = "AUDIO"
	SearchBackpackAssetUsingGETParamsGenreBODY         SearchBackpackAssetUsingGETParamsGenre = "BODY"
	SearchBackpackAssetUsingGETParamsGenreGEAR         SearchBackpackAssetUsingGETParamsGenre = "GEAR"
	SearchBackpackAssetUsingGETParamsGenreMATERIAL     SearchBackpackAssetUsingGETParamsGenre = "MATERIAL"
	SearchBackpackAssetUsingGETParamsGenreMESH         SearchBackpackAssetUsingGETParamsGenre = "MESH"
	SearchBackpackAssetUsingGETParamsGenreMESHBLOCK    SearchBackpackAssetUsingGETParamsGenre = "MESHBLOCK"
	SearchBackpackAssetUsingGETParamsGenrePARTICLE     SearchBackpackAssetUsingGETParamsGenre = "PARTICLE"
	SearchBackpackAssetUsingGETParamsGenreSCRIPT       SearchBackpackAssetUsingGETParamsGenre = "SCRIPT"
	SearchBackpackAssetUsingGETParamsGenreSTRUCTURE    SearchBackpackAssetUsingGETParamsGenre = "STRUCTURE"
	SearchBackpackAssetUsingGETParamsGenreTEXTURE2D    SearchBackpackAssetUsingGETParamsGenre = "TEXTURE2D"
	SearchBackpackAssetUsingGETParamsGenreVOXELBLOCK   SearchBackpackAssetUsingGETParamsGenre = "VOXELBLOCK"
	SearchBackpackAssetUsingGETParamsGenreVOXELTERRAIN SearchBackpackAssetUsingGETParamsGenre = "VOXELTERRAIN"
	SearchBackpackAssetUsingGETParamsGenreVPACK        SearchBackpackAssetUsingGETParamsGenre = "VPACK"
)

// Defines values for SearchBackpackAssetUsingGETParamsSorting.
const (
	SearchBackpackAssetUsingGETParamsSortingN1 SearchBackpackAssetUsingGETParamsSorting = 1
	SearchBackpackAssetUsingGETParamsSortingN2 SearchBackpackAssetUsingGETParamsSorting = 2
	SearchBackpackAssetUsingGETParamsSortingN3 SearchBackpackAssetUsingGETParamsSorting = 3
	SearchBackpackAssetUsingGETParamsSortingN4 SearchBackpackAssetUsingGETParamsSorting = 4
	SearchBackpackAssetUsingGETParamsSortingN5 SearchBackpackAssetUsingGETParamsSorting = 5
	SearchBackpackAssetUsingGETParamsSortingN6 SearchBackpackAssetUsingGETParamsSorting = 6
	SearchBackpackAssetUsingGETParamsSortingN7 SearchBackpackAssetUsingGETParamsSorting = 7
	SearchBackpackAssetUsingGETParamsSortingN8 SearchBackpackAssetUsingGETParamsSorting = 8
)

// Defines values for FavoriteListUsingGETParamsType.
const (
	FavoriteListUsingGETParamsTypeALL       FavoriteListUsingGETParamsType = "ALL"
	FavoriteListUsingGETParamsTypeUGCDESIGN FavoriteListUsingGETParamsType = "UGC_DESIGN"
	FavoriteListUsingGETParamsTypeUGCMOD    FavoriteListUsingGETParamsType = "UGC_MOD"
)

// Defines values for FavoriteListUsingGETParamsSorting.
const (
	FavoriteListUsingGETParamsSortingN1 FavoriteListUsingGETParamsSorting = 1
	FavoriteListUsingGETParamsSortingN2 FavoriteListUsingGETParamsSorting = 2
	FavoriteListUsingGETParamsSortingN3 FavoriteListUsingGETParamsSorting = 3
	FavoriteListUsingGETParamsSortingN4 FavoriteListUsingGETParamsSorting = 4
	FavoriteListUsingGETParamsSortingN5 FavoriteListUsingGETParamsSorting = 5
	FavoriteListUsingGETParamsSortingN6 FavoriteListUsingGETParamsSorting = 6
	FavoriteListUsingGETParamsSortingN7 FavoriteListUsingGETParamsSorting = 7
)

// Defines values for GetUgcV21FavoriteSearchParamsType.
const (
	GetUgcV21FavoriteSearchParamsTypeUGCASSET  GetUgcV21FavoriteSearchParamsType = "UGC_ASSET"
	GetUgcV21FavoriteSearchParamsTypeUGCDESIGN GetUgcV21FavoriteSearchParamsType = "UGC_DESIGN"
	GetUgcV21FavoriteSearchParamsTypeUGCMOD    GetUgcV21FavoriteSearchParamsType = "UGC_MOD"
	GetUgcV21FavoriteSearchParamsTypeUGCMOUNT  GetUgcV21FavoriteSearchParamsType = "UGC_MOUNT"
)

// Defines values for UgcGameResourcesDownloadUsingPOSTParamsDevice.
const (
	UgcGameResourcesDownloadUsingPOSTParamsDeviceAndroid UgcGameResourcesDownloadUsingPOSTParamsDevice = "Android"
	UgcGameResourcesDownloadUsingPOSTParamsDeviceIOS     UgcGameResourcesDownloadUsingPOSTParamsDevice = "IOS"
	UgcGameResourcesDownloadUsingPOSTParamsDevicePackage UgcGameResourcesDownloadUsingPOSTParamsDevice = "Package"
	UgcGameResourcesDownloadUsingPOSTParamsDeviceProject UgcGameResourcesDownloadUsingPOSTParamsDevice = "Project"
	UgcGameResourcesDownloadUsingPOSTParamsDeviceServer  UgcGameResourcesDownloadUsingPOSTParamsDevice = "Server"
)

// Defines values for InsertHomelandUsingPOST1ParamsPlatform.
const (
	QQ     InsertHomelandUsingPOST1ParamsPlatform = "QQ"
	WECHAT InsertHomelandUsingPOST1ParamsPlatform = "WECHAT"
)

// Defines values for GetUgcInfoListUsingGETParamsType.
//const (
//	GetUgcInfoListUsingGETParamsTypeN1  GetUgcInfoListUsingGETParamsType = 1
//	GetUgcInfoListUsingGETParamsTypeN10 GetUgcInfoListUsingGETParamsType = 10
//	GetUgcInfoListUsingGETParamsTypeN11 GetUgcInfoListUsingGETParamsType = 11
//	GetUgcInfoListUsingGETParamsTypeN12 GetUgcInfoListUsingGETParamsType = 12
//	GetUgcInfoListUsingGETParamsTypeN13 GetUgcInfoListUsingGETParamsType = 13
//	GetUgcInfoListUsingGETParamsTypeN20 GetUgcInfoListUsingGETParamsType = 20
//	GetUgcInfoListUsingGETParamsTypeN21 GetUgcInfoListUsingGETParamsType = 21
//	GetUgcInfoListUsingGETParamsTypeN30 GetUgcInfoListUsingGETParamsType = 30
//)

// Defines values for GetUgcInfoListUsingGETParamsGenre.
const (
	GetUgcInfoListUsingGETParamsGenreBATTLE     GetUgcInfoListUsingGETParamsGenre = "BATTLE"
	GetUgcInfoListUsingGETParamsGenreBUILDING   GetUgcInfoListUsingGETParamsGenre = "BUILDING"
	GetUgcInfoListUsingGETParamsGenreCASUAL     GetUgcInfoListUsingGETParamsGenre = "CASUAL"
	GetUgcInfoListUsingGETParamsGenreCIRCUIT    GetUgcInfoListUsingGETParamsGenre = "CIRCUIT"
	GetUgcInfoListUsingGETParamsGenreDECORATION GetUgcInfoListUsingGETParamsGenre = "DECORATION"
	GetUgcInfoListUsingGETParamsGenreFPS        GetUgcInfoListUsingGETParamsGenre = "FPS"
	GetUgcInfoListUsingGETParamsGenreGUNFIGHT   GetUgcInfoListUsingGETParamsGenre = "GUNFIGHT"
	GetUgcInfoListUsingGETParamsGenreLANDMARK   GetUgcInfoListUsingGETParamsGenre = "LANDMARK"
	GetUgcInfoListUsingGETParamsGenrePIXEL      GetUgcInfoListUsingGETParamsGenre = "PIXEL"
	GetUgcInfoListUsingGETParamsGenreRESOURCE   GetUgcInfoListUsingGETParamsGenre = "RESOURCE"
	GetUgcInfoListUsingGETParamsGenreRUNNING    GetUgcInfoListUsingGETParamsGenre = "RUNNING"
)

// Defines values for GetUgcInfoListUsingGETParamsModType.
const (
	GetUgcInfoListUsingGETParamsModTypeN0 GetUgcInfoListUsingGETParamsModType = 0
	GetUgcInfoListUsingGETParamsModTypeN1 GetUgcInfoListUsingGETParamsModType = 1
	GetUgcInfoListUsingGETParamsModTypeN2 GetUgcInfoListUsingGETParamsModType = 2
)

// Defines values for GetUgcInfoListUsingGETParamsSorting.
const (
	GetUgcInfoListUsingGETParamsSortingN1 GetUgcInfoListUsingGETParamsSorting = 1
	GetUgcInfoListUsingGETParamsSortingN2 GetUgcInfoListUsingGETParamsSorting = 2
	GetUgcInfoListUsingGETParamsSortingN3 GetUgcInfoListUsingGETParamsSorting = 3
	GetUgcInfoListUsingGETParamsSortingN4 GetUgcInfoListUsingGETParamsSorting = 4
	GetUgcInfoListUsingGETParamsSortingN5 GetUgcInfoListUsingGETParamsSorting = 5
	GetUgcInfoListUsingGETParamsSortingN6 GetUgcInfoListUsingGETParamsSorting = 6
	GetUgcInfoListUsingGETParamsSortingN7 GetUgcInfoListUsingGETParamsSorting = 7
	GetUgcInfoListUsingGETParamsSortingN8 GetUgcInfoListUsingGETParamsSorting = 8
)

// Defines values for CreateUGCUsingPOSTMultipartBodyGenre.
const (
	CreateUGCUsingPOSTMultipartBodyGenreBATTLE     CreateUGCUsingPOSTMultipartBodyGenre = "BATTLE"
	CreateUGCUsingPOSTMultipartBodyGenreBUILDING   CreateUGCUsingPOSTMultipartBodyGenre = "BUILDING"
	CreateUGCUsingPOSTMultipartBodyGenreCASUAL     CreateUGCUsingPOSTMultipartBodyGenre = "CASUAL"
	CreateUGCUsingPOSTMultipartBodyGenreCIRCUIT    CreateUGCUsingPOSTMultipartBodyGenre = "CIRCUIT"
	CreateUGCUsingPOSTMultipartBodyGenreDECORATION CreateUGCUsingPOSTMultipartBodyGenre = "DECORATION"
	CreateUGCUsingPOSTMultipartBodyGenreFPS        CreateUGCUsingPOSTMultipartBodyGenre = "FPS"
	CreateUGCUsingPOSTMultipartBodyGenreGUNFIGHT   CreateUGCUsingPOSTMultipartBodyGenre = "GUNFIGHT"
	CreateUGCUsingPOSTMultipartBodyGenreLANDMARK   CreateUGCUsingPOSTMultipartBodyGenre = "LANDMARK"
	CreateUGCUsingPOSTMultipartBodyGenrePIXEL      CreateUGCUsingPOSTMultipartBodyGenre = "PIXEL"
	CreateUGCUsingPOSTMultipartBodyGenreRESOURCE   CreateUGCUsingPOSTMultipartBodyGenre = "RESOURCE"
	CreateUGCUsingPOSTMultipartBodyGenreRUNNING    CreateUGCUsingPOSTMultipartBodyGenre = "RUNNING"
)

// Defines values for CreateUGCUsingPOSTMultipartBodyModType.
const (
	CreateUGCUsingPOSTMultipartBodyModTypeN0 CreateUGCUsingPOSTMultipartBodyModType = 0
	CreateUGCUsingPOSTMultipartBodyModTypeN1 CreateUGCUsingPOSTMultipartBodyModType = 1
	CreateUGCUsingPOSTMultipartBodyModTypeN2 CreateUGCUsingPOSTMultipartBodyModType = 2
)

// Defines values for CreateUGCUsingPOSTMultipartBodyUgcType.
const (
	CreateUGCUsingPOSTMultipartBodyUgcTypeN1  CreateUGCUsingPOSTMultipartBodyUgcType = 1
	CreateUGCUsingPOSTMultipartBodyUgcTypeN10 CreateUGCUsingPOSTMultipartBodyUgcType = 10
	CreateUGCUsingPOSTMultipartBodyUgcTypeN11 CreateUGCUsingPOSTMultipartBodyUgcType = 11
	CreateUGCUsingPOSTMultipartBodyUgcTypeN12 CreateUGCUsingPOSTMultipartBodyUgcType = 12
	CreateUGCUsingPOSTMultipartBodyUgcTypeN13 CreateUGCUsingPOSTMultipartBodyUgcType = 13
	CreateUGCUsingPOSTMultipartBodyUgcTypeN20 CreateUGCUsingPOSTMultipartBodyUgcType = 20
	CreateUGCUsingPOSTMultipartBodyUgcTypeN21 CreateUGCUsingPOSTMultipartBodyUgcType = 21
	CreateUGCUsingPOSTMultipartBodyUgcTypeN22 CreateUGCUsingPOSTMultipartBodyUgcType = 22
	CreateUGCUsingPOSTMultipartBodyUgcTypeN30 CreateUGCUsingPOSTMultipartBodyUgcType = 30
)

// Defines values for UploadFileUsingPOSTParamsFileType.
const (
	UploadFileUsingPOSTParamsFileTypeIMAGE    UploadFileUsingPOSTParamsFileType = "IMAGE"
	UploadFileUsingPOSTParamsFileTypeRESOURCE UploadFileUsingPOSTParamsFileType = "RESOURCE"
	UploadFileUsingPOSTParamsFileTypeVIDEO    UploadFileUsingPOSTParamsFileType = "VIDEO"
)

// Defines values for UploadFileUsingPOSTParamsDevice.
const (
	UploadFileUsingPOSTParamsDeviceAndroid UploadFileUsingPOSTParamsDevice = "Android"
	UploadFileUsingPOSTParamsDeviceIOS     UploadFileUsingPOSTParamsDevice = "IOS"
	UploadFileUsingPOSTParamsDevicePackage UploadFileUsingPOSTParamsDevice = "Package"
	UploadFileUsingPOSTParamsDeviceProject UploadFileUsingPOSTParamsDevice = "Project"
	UploadFileUsingPOSTParamsDeviceServer  UploadFileUsingPOSTParamsDevice = "Server"
)

// Defines values for GetUgcInfoUsingGETParamsDevice.
const (
	GetUgcInfoUsingGETParamsDeviceAndroid GetUgcInfoUsingGETParamsDevice = "Android"
	GetUgcInfoUsingGETParamsDeviceIOS     GetUgcInfoUsingGETParamsDevice = "IOS"
	GetUgcInfoUsingGETParamsDevicePackage GetUgcInfoUsingGETParamsDevice = "Package"
	GetUgcInfoUsingGETParamsDeviceProject GetUgcInfoUsingGETParamsDevice = "Project"
	GetUgcInfoUsingGETParamsDeviceServer  GetUgcInfoUsingGETParamsDevice = "Server"
)

// Defines values for InternalUgcUpdateUsingPOST1MultipartBodyGenre.
const (
	InternalUgcUpdateUsingPOST1MultipartBodyGenreBATTLE     InternalUgcUpdateUsingPOST1MultipartBodyGenre = "BATTLE"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreBUILDING   InternalUgcUpdateUsingPOST1MultipartBodyGenre = "BUILDING"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreCASUAL     InternalUgcUpdateUsingPOST1MultipartBodyGenre = "CASUAL"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreCIRCUIT    InternalUgcUpdateUsingPOST1MultipartBodyGenre = "CIRCUIT"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreDECORATION InternalUgcUpdateUsingPOST1MultipartBodyGenre = "DECORATION"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreFPS        InternalUgcUpdateUsingPOST1MultipartBodyGenre = "FPS"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreGUNFIGHT   InternalUgcUpdateUsingPOST1MultipartBodyGenre = "GUNFIGHT"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreLANDMARK   InternalUgcUpdateUsingPOST1MultipartBodyGenre = "LANDMARK"
	InternalUgcUpdateUsingPOST1MultipartBodyGenrePIXEL      InternalUgcUpdateUsingPOST1MultipartBodyGenre = "PIXEL"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreRESOURCE   InternalUgcUpdateUsingPOST1MultipartBodyGenre = "RESOURCE"
	InternalUgcUpdateUsingPOST1MultipartBodyGenreRUNNING    InternalUgcUpdateUsingPOST1MultipartBodyGenre = "RUNNING"
)

// Defines values for InternalUgcUpdateUsingPOST1MultipartBodyModType.
const (
	InternalUgcUpdateUsingPOST1MultipartBodyModTypeN0 InternalUgcUpdateUsingPOST1MultipartBodyModType = 0
	InternalUgcUpdateUsingPOST1MultipartBodyModTypeN1 InternalUgcUpdateUsingPOST1MultipartBodyModType = 1
	InternalUgcUpdateUsingPOST1MultipartBodyModTypeN2 InternalUgcUpdateUsingPOST1MultipartBodyModType = 2
)

// Defines values for InternalUgcUpdateUsingPOST1MultipartBodyUgcType.
const (
	InternalUgcUpdateUsingPOST1MultipartBodyUgcTypeN1  InternalUgcUpdateUsingPOST1MultipartBodyUgcType = 1
	InternalUgcUpdateUsingPOST1MultipartBodyUgcTypeN10 InternalUgcUpdateUsingPOST1MultipartBodyUgcType = 10
	InternalUgcUpdateUsingPOST1MultipartBodyUgcTypeN11 InternalUgcUpdateUsingPOST1MultipartBodyUgcType = 11
	InternalUgcUpdateUsingPOST1MultipartBodyUgcTypeN12 InternalUgcUpdateUsingPOST1MultipartBodyUgcType = 12
	InternalUgcUpdateUsingPOST1MultipartBodyUgcTypeN13 InternalUgcUpdateUsingPOST1MultipartBodyUgcType = 13
	InternalUgcUpdateUsingPOST1MultipartBodyUgcTypeN20 InternalUgcUpdateUsingPOST1MultipartBodyUgcType = 20
	InternalUgcUpdateUsingPOST1MultipartBodyUgcTypeN21 InternalUgcUpdateUsingPOST1MultipartBodyUgcType = 21
	InternalUgcUpdateUsingPOST1MultipartBodyUgcTypeN30 InternalUgcUpdateUsingPOST1MultipartBodyUgcType = 30
)

// Defines values for InternalUgcUpdateUsingPUTMultipartBodyGenre.
const (
	InternalUgcUpdateUsingPUTMultipartBodyGenreBATTLE     InternalUgcUpdateUsingPUTMultipartBodyGenre = "BATTLE"
	InternalUgcUpdateUsingPUTMultipartBodyGenreBUILDING   InternalUgcUpdateUsingPUTMultipartBodyGenre = "BUILDING"
	InternalUgcUpdateUsingPUTMultipartBodyGenreCASUAL     InternalUgcUpdateUsingPUTMultipartBodyGenre = "CASUAL"
	InternalUgcUpdateUsingPUTMultipartBodyGenreCIRCUIT    InternalUgcUpdateUsingPUTMultipartBodyGenre = "CIRCUIT"
	InternalUgcUpdateUsingPUTMultipartBodyGenreDECORATION InternalUgcUpdateUsingPUTMultipartBodyGenre = "DECORATION"
	InternalUgcUpdateUsingPUTMultipartBodyGenreFPS        InternalUgcUpdateUsingPUTMultipartBodyGenre = "FPS"
	InternalUgcUpdateUsingPUTMultipartBodyGenreGUNFIGHT   InternalUgcUpdateUsingPUTMultipartBodyGenre = "GUNFIGHT"
	InternalUgcUpdateUsingPUTMultipartBodyGenreLANDMARK   InternalUgcUpdateUsingPUTMultipartBodyGenre = "LANDMARK"
	InternalUgcUpdateUsingPUTMultipartBodyGenrePIXEL      InternalUgcUpdateUsingPUTMultipartBodyGenre = "PIXEL"
	InternalUgcUpdateUsingPUTMultipartBodyGenreRESOURCE   InternalUgcUpdateUsingPUTMultipartBodyGenre = "RESOURCE"
	InternalUgcUpdateUsingPUTMultipartBodyGenreRUNNING    InternalUgcUpdateUsingPUTMultipartBodyGenre = "RUNNING"
)

// Defines values for InternalUgcUpdateUsingPUTMultipartBodyModType.
const (
	InternalUgcUpdateUsingPUTMultipartBodyModTypeN0 InternalUgcUpdateUsingPUTMultipartBodyModType = 0
	InternalUgcUpdateUsingPUTMultipartBodyModTypeN1 InternalUgcUpdateUsingPUTMultipartBodyModType = 1
	InternalUgcUpdateUsingPUTMultipartBodyModTypeN2 InternalUgcUpdateUsingPUTMultipartBodyModType = 2
)

// Defines values for InternalUgcUpdateUsingPUTMultipartBodyUgcType.
const (
	InternalUgcUpdateUsingPUTMultipartBodyUgcTypeN1  InternalUgcUpdateUsingPUTMultipartBodyUgcType = 1
	InternalUgcUpdateUsingPUTMultipartBodyUgcTypeN10 InternalUgcUpdateUsingPUTMultipartBodyUgcType = 10
	InternalUgcUpdateUsingPUTMultipartBodyUgcTypeN11 InternalUgcUpdateUsingPUTMultipartBodyUgcType = 11
	InternalUgcUpdateUsingPUTMultipartBodyUgcTypeN12 InternalUgcUpdateUsingPUTMultipartBodyUgcType = 12
	InternalUgcUpdateUsingPUTMultipartBodyUgcTypeN13 InternalUgcUpdateUsingPUTMultipartBodyUgcType = 13
	InternalUgcUpdateUsingPUTMultipartBodyUgcTypeN20 InternalUgcUpdateUsingPUTMultipartBodyUgcType = 20
	InternalUgcUpdateUsingPUTMultipartBodyUgcTypeN21 InternalUgcUpdateUsingPUTMultipartBodyUgcType = 21
	InternalUgcUpdateUsingPUTMultipartBodyUgcTypeN30 InternalUgcUpdateUsingPUTMultipartBodyUgcType = 30
)

// Defines values for UgcInternalResourceDownloadUsingPOSTParamsDevice.
const (
	UgcInternalResourceDownloadUsingPOSTParamsDeviceAndroid UgcInternalResourceDownloadUsingPOSTParamsDevice = "Android"
	UgcInternalResourceDownloadUsingPOSTParamsDeviceIOS     UgcInternalResourceDownloadUsingPOSTParamsDevice = "IOS"
	UgcInternalResourceDownloadUsingPOSTParamsDevicePackage UgcInternalResourceDownloadUsingPOSTParamsDevice = "Package"
	UgcInternalResourceDownloadUsingPOSTParamsDeviceProject UgcInternalResourceDownloadUsingPOSTParamsDevice = "Project"
	UgcInternalResourceDownloadUsingPOSTParamsDeviceServer  UgcInternalResourceDownloadUsingPOSTParamsDevice = "Server"
)

// Defines values for UgcInternalGetUsingPOSTParamsDevice.
const (
	UgcInternalGetUsingPOSTParamsDeviceAndroid UgcInternalGetUsingPOSTParamsDevice = "Android"
	UgcInternalGetUsingPOSTParamsDeviceIOS     UgcInternalGetUsingPOSTParamsDevice = "IOS"
	UgcInternalGetUsingPOSTParamsDevicePackage UgcInternalGetUsingPOSTParamsDevice = "Package"
	UgcInternalGetUsingPOSTParamsDeviceProject UgcInternalGetUsingPOSTParamsDevice = "Project"
	UgcInternalGetUsingPOSTParamsDeviceServer  UgcInternalGetUsingPOSTParamsDevice = "Server"
)

// Defines values for UgcInternalGetUsingPOSTFormdataBodyOrigin.
const (
	UgcInternalGetUsingPOSTFormdataBodyOriginSGXQ     UgcInternalGetUsingPOSTFormdataBodyOrigin = "SGXQ"
	UgcInternalGetUsingPOSTFormdataBodyOriginVULCANUS UgcInternalGetUsingPOSTFormdataBodyOrigin = "VULCANUS"
	UgcInternalGetUsingPOSTFormdataBodyOriginWEB      UgcInternalGetUsingPOSTFormdataBodyOrigin = "WEB"
)

// Defines values for UgcVersionCreateUsingPOSTMultipartBodyGenre.
const (
	UgcVersionCreateUsingPOSTMultipartBodyGenreBATTLE     UgcVersionCreateUsingPOSTMultipartBodyGenre = "BATTLE"
	UgcVersionCreateUsingPOSTMultipartBodyGenreBUILDING   UgcVersionCreateUsingPOSTMultipartBodyGenre = "BUILDING"
	UgcVersionCreateUsingPOSTMultipartBodyGenreCASUAL     UgcVersionCreateUsingPOSTMultipartBodyGenre = "CASUAL"
	UgcVersionCreateUsingPOSTMultipartBodyGenreCIRCUIT    UgcVersionCreateUsingPOSTMultipartBodyGenre = "CIRCUIT"
	UgcVersionCreateUsingPOSTMultipartBodyGenreDECORATION UgcVersionCreateUsingPOSTMultipartBodyGenre = "DECORATION"
	UgcVersionCreateUsingPOSTMultipartBodyGenreFPS        UgcVersionCreateUsingPOSTMultipartBodyGenre = "FPS"
	UgcVersionCreateUsingPOSTMultipartBodyGenreGUNFIGHT   UgcVersionCreateUsingPOSTMultipartBodyGenre = "GUNFIGHT"
	UgcVersionCreateUsingPOSTMultipartBodyGenreLANDMARK   UgcVersionCreateUsingPOSTMultipartBodyGenre = "LANDMARK"
	UgcVersionCreateUsingPOSTMultipartBodyGenrePIXEL      UgcVersionCreateUsingPOSTMultipartBodyGenre = "PIXEL"
	UgcVersionCreateUsingPOSTMultipartBodyGenreRESOURCE   UgcVersionCreateUsingPOSTMultipartBodyGenre = "RESOURCE"
	UgcVersionCreateUsingPOSTMultipartBodyGenreRUNNING    UgcVersionCreateUsingPOSTMultipartBodyGenre = "RUNNING"
)

// Defines values for UgcVersionCreateUsingPOSTMultipartBodyModType.
const (
	UgcVersionCreateUsingPOSTMultipartBodyModTypeN0 UgcVersionCreateUsingPOSTMultipartBodyModType = 0
	UgcVersionCreateUsingPOSTMultipartBodyModTypeN1 UgcVersionCreateUsingPOSTMultipartBodyModType = 1
	UgcVersionCreateUsingPOSTMultipartBodyModTypeN2 UgcVersionCreateUsingPOSTMultipartBodyModType = 2
)

// Defines values for UgcVersionCreateUsingPOSTMultipartBodyUgcType.
const (
	UgcVersionCreateUsingPOSTMultipartBodyUgcTypeN1  UgcVersionCreateUsingPOSTMultipartBodyUgcType = 1
	UgcVersionCreateUsingPOSTMultipartBodyUgcTypeN10 UgcVersionCreateUsingPOSTMultipartBodyUgcType = 10
	UgcVersionCreateUsingPOSTMultipartBodyUgcTypeN11 UgcVersionCreateUsingPOSTMultipartBodyUgcType = 11
	UgcVersionCreateUsingPOSTMultipartBodyUgcTypeN12 UgcVersionCreateUsingPOSTMultipartBodyUgcType = 12
	UgcVersionCreateUsingPOSTMultipartBodyUgcTypeN13 UgcVersionCreateUsingPOSTMultipartBodyUgcType = 13
	UgcVersionCreateUsingPOSTMultipartBodyUgcTypeN20 UgcVersionCreateUsingPOSTMultipartBodyUgcType = 20
	UgcVersionCreateUsingPOSTMultipartBodyUgcTypeN21 UgcVersionCreateUsingPOSTMultipartBodyUgcType = 21
	UgcVersionCreateUsingPOSTMultipartBodyUgcTypeN30 UgcVersionCreateUsingPOSTMultipartBodyUgcType = 30
)

// Defines values for InternalUpdateVersionUsingPOSTMultipartBodyGenre.
const (
	InternalUpdateVersionUsingPOSTMultipartBodyGenreBATTLE     InternalUpdateVersionUsingPOSTMultipartBodyGenre = "BATTLE"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreBUILDING   InternalUpdateVersionUsingPOSTMultipartBodyGenre = "BUILDING"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreCASUAL     InternalUpdateVersionUsingPOSTMultipartBodyGenre = "CASUAL"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreCIRCUIT    InternalUpdateVersionUsingPOSTMultipartBodyGenre = "CIRCUIT"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreDECORATION InternalUpdateVersionUsingPOSTMultipartBodyGenre = "DECORATION"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreFPS        InternalUpdateVersionUsingPOSTMultipartBodyGenre = "FPS"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreGUNFIGHT   InternalUpdateVersionUsingPOSTMultipartBodyGenre = "GUNFIGHT"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreLANDMARK   InternalUpdateVersionUsingPOSTMultipartBodyGenre = "LANDMARK"
	InternalUpdateVersionUsingPOSTMultipartBodyGenrePIXEL      InternalUpdateVersionUsingPOSTMultipartBodyGenre = "PIXEL"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreRESOURCE   InternalUpdateVersionUsingPOSTMultipartBodyGenre = "RESOURCE"
	InternalUpdateVersionUsingPOSTMultipartBodyGenreRUNNING    InternalUpdateVersionUsingPOSTMultipartBodyGenre = "RUNNING"
)

// Defines values for InternalUpdateVersionUsingPOSTMultipartBodyModType.
const (
	InternalUpdateVersionUsingPOSTMultipartBodyModTypeN0 InternalUpdateVersionUsingPOSTMultipartBodyModType = 0
	InternalUpdateVersionUsingPOSTMultipartBodyModTypeN1 InternalUpdateVersionUsingPOSTMultipartBodyModType = 1
	InternalUpdateVersionUsingPOSTMultipartBodyModTypeN2 InternalUpdateVersionUsingPOSTMultipartBodyModType = 2
)

// Defines values for InternalUpdateVersionUsingPOSTMultipartBodyUgcType.
const (
	InternalUpdateVersionUsingPOSTMultipartBodyUgcTypeN1  InternalUpdateVersionUsingPOSTMultipartBodyUgcType = 1
	InternalUpdateVersionUsingPOSTMultipartBodyUgcTypeN10 InternalUpdateVersionUsingPOSTMultipartBodyUgcType = 10
	InternalUpdateVersionUsingPOSTMultipartBodyUgcTypeN11 InternalUpdateVersionUsingPOSTMultipartBodyUgcType = 11
	InternalUpdateVersionUsingPOSTMultipartBodyUgcTypeN12 InternalUpdateVersionUsingPOSTMultipartBodyUgcType = 12
	InternalUpdateVersionUsingPOSTMultipartBodyUgcTypeN13 InternalUpdateVersionUsingPOSTMultipartBodyUgcType = 13
	InternalUpdateVersionUsingPOSTMultipartBodyUgcTypeN20 InternalUpdateVersionUsingPOSTMultipartBodyUgcType = 20
	InternalUpdateVersionUsingPOSTMultipartBodyUgcTypeN21 InternalUpdateVersionUsingPOSTMultipartBodyUgcType = 21
	InternalUpdateVersionUsingPOSTMultipartBodyUgcTypeN30 InternalUpdateVersionUsingPOSTMultipartBodyUgcType = 30
)

// Defines values for InternalUpdateVersionUsingPUTMultipartBodyGenre.
const (
	InternalUpdateVersionUsingPUTMultipartBodyGenreBATTLE     InternalUpdateVersionUsingPUTMultipartBodyGenre = "BATTLE"
	InternalUpdateVersionUsingPUTMultipartBodyGenreBUILDING   InternalUpdateVersionUsingPUTMultipartBodyGenre = "BUILDING"
	InternalUpdateVersionUsingPUTMultipartBodyGenreCASUAL     InternalUpdateVersionUsingPUTMultipartBodyGenre = "CASUAL"
	InternalUpdateVersionUsingPUTMultipartBodyGenreCIRCUIT    InternalUpdateVersionUsingPUTMultipartBodyGenre = "CIRCUIT"
	InternalUpdateVersionUsingPUTMultipartBodyGenreDECORATION InternalUpdateVersionUsingPUTMultipartBodyGenre = "DECORATION"
	InternalUpdateVersionUsingPUTMultipartBodyGenreFPS        InternalUpdateVersionUsingPUTMultipartBodyGenre = "FPS"
	InternalUpdateVersionUsingPUTMultipartBodyGenreGUNFIGHT   InternalUpdateVersionUsingPUTMultipartBodyGenre = "GUNFIGHT"
	InternalUpdateVersionUsingPUTMultipartBodyGenreLANDMARK   InternalUpdateVersionUsingPUTMultipartBodyGenre = "LANDMARK"
	InternalUpdateVersionUsingPUTMultipartBodyGenrePIXEL      InternalUpdateVersionUsingPUTMultipartBodyGenre = "PIXEL"
	InternalUpdateVersionUsingPUTMultipartBodyGenreRESOURCE   InternalUpdateVersionUsingPUTMultipartBodyGenre = "RESOURCE"
	InternalUpdateVersionUsingPUTMultipartBodyGenreRUNNING    InternalUpdateVersionUsingPUTMultipartBodyGenre = "RUNNING"
)

// Defines values for InternalUpdateVersionUsingPUTMultipartBodyModType.
const (
	InternalUpdateVersionUsingPUTMultipartBodyModTypeN0 InternalUpdateVersionUsingPUTMultipartBodyModType = 0
	InternalUpdateVersionUsingPUTMultipartBodyModTypeN1 InternalUpdateVersionUsingPUTMultipartBodyModType = 1
	InternalUpdateVersionUsingPUTMultipartBodyModTypeN2 InternalUpdateVersionUsingPUTMultipartBodyModType = 2
)

// Defines values for InternalUpdateVersionUsingPUTMultipartBodyUgcType.
const (
	InternalUpdateVersionUsingPUTMultipartBodyUgcTypeN1  InternalUpdateVersionUsingPUTMultipartBodyUgcType = 1
	InternalUpdateVersionUsingPUTMultipartBodyUgcTypeN10 InternalUpdateVersionUsingPUTMultipartBodyUgcType = 10
	InternalUpdateVersionUsingPUTMultipartBodyUgcTypeN11 InternalUpdateVersionUsingPUTMultipartBodyUgcType = 11
	InternalUpdateVersionUsingPUTMultipartBodyUgcTypeN12 InternalUpdateVersionUsingPUTMultipartBodyUgcType = 12
	InternalUpdateVersionUsingPUTMultipartBodyUgcTypeN13 InternalUpdateVersionUsingPUTMultipartBodyUgcType = 13
	InternalUpdateVersionUsingPUTMultipartBodyUgcTypeN20 InternalUpdateVersionUsingPUTMultipartBodyUgcType = 20
	InternalUpdateVersionUsingPUTMultipartBodyUgcTypeN21 InternalUpdateVersionUsingPUTMultipartBodyUgcType = 21
	InternalUpdateVersionUsingPUTMultipartBodyUgcTypeN30 InternalUpdateVersionUsingPUTMultipartBodyUgcType = 30
)

// Defines values for TagListUsingGET1ParamsBrand.
const (
	TagListUsingGET1ParamsBrandN1 TagListUsingGET1ParamsBrand = 1
	TagListUsingGET1ParamsBrandN2 TagListUsingGET1ParamsBrand = 2
)

// Defines values for TagOperatingUsingGETParamsBrand.
const (
	TagOperatingUsingGETParamsBrandN1 TagOperatingUsingGETParamsBrand = 1
	TagOperatingUsingGETParamsBrandN2 TagOperatingUsingGETParamsBrand = 2
)

// Defines values for TagSearchUsingGETParamsBrand.
const (
	TagSearchUsingGETParamsBrandN1 TagSearchUsingGETParamsBrand = 1
	TagSearchUsingGETParamsBrandN2 TagSearchUsingGETParamsBrand = 2
)

// Defines values for GetNewUgcListUsingGETParamsType.
//const (
//	GetNewUgcListUsingGETParamsTypeN1  GetNewUgcListUsingGETParamsType = 1
//	GetNewUgcListUsingGETParamsTypeN10 GetNewUgcListUsingGETParamsType = 10
//	GetNewUgcListUsingGETParamsTypeN11 GetNewUgcListUsingGETParamsType = 11
//	GetNewUgcListUsingGETParamsTypeN12 GetNewUgcListUsingGETParamsType = 12
//	GetNewUgcListUsingGETParamsTypeN13 GetNewUgcListUsingGETParamsType = 13
//	GetNewUgcListUsingGETParamsTypeN20 GetNewUgcListUsingGETParamsType = 20
//	GetNewUgcListUsingGETParamsTypeN21 GetNewUgcListUsingGETParamsType = 21
//	GetNewUgcListUsingGETParamsTypeN22 GetNewUgcListUsingGETParamsType = 22
//	GetNewUgcListUsingGETParamsTypeN30 GetNewUgcListUsingGETParamsType = 30
//)

// Defines values for GetNewUgcListUsingGETParamsGenre.
const (
	GetNewUgcListUsingGETParamsGenreBATTLE     GetNewUgcListUsingGETParamsGenre = "BATTLE"
	GetNewUgcListUsingGETParamsGenreBUILDING   GetNewUgcListUsingGETParamsGenre = "BUILDING"
	GetNewUgcListUsingGETParamsGenreCASUAL     GetNewUgcListUsingGETParamsGenre = "CASUAL"
	GetNewUgcListUsingGETParamsGenreCIRCUIT    GetNewUgcListUsingGETParamsGenre = "CIRCUIT"
	GetNewUgcListUsingGETParamsGenreDECORATION GetNewUgcListUsingGETParamsGenre = "DECORATION"
	GetNewUgcListUsingGETParamsGenreFPS        GetNewUgcListUsingGETParamsGenre = "FPS"
	GetNewUgcListUsingGETParamsGenreGUNFIGHT   GetNewUgcListUsingGETParamsGenre = "GUNFIGHT"
	GetNewUgcListUsingGETParamsGenreLANDMARK   GetNewUgcListUsingGETParamsGenre = "LANDMARK"
	GetNewUgcListUsingGETParamsGenrePIXEL      GetNewUgcListUsingGETParamsGenre = "PIXEL"
	GetNewUgcListUsingGETParamsGenreRESOURCE   GetNewUgcListUsingGETParamsGenre = "RESOURCE"
	GetNewUgcListUsingGETParamsGenreRUNNING    GetNewUgcListUsingGETParamsGenre = "RUNNING"
)

// Defines values for GetNewUgcListUsingGETParamsModType.
const (
	GetNewUgcListUsingGETParamsModTypeN0 GetNewUgcListUsingGETParamsModType = 0
	GetNewUgcListUsingGETParamsModTypeN1 GetNewUgcListUsingGETParamsModType = 1
	GetNewUgcListUsingGETParamsModTypeN2 GetNewUgcListUsingGETParamsModType = 2
)

// Defines values for GetNewUgcListUsingGETParamsSorting.
const (
	GetNewUgcListUsingGETParamsSortingN1 GetNewUgcListUsingGETParamsSorting = 1
	GetNewUgcListUsingGETParamsSortingN2 GetNewUgcListUsingGETParamsSorting = 2
	GetNewUgcListUsingGETParamsSortingN3 GetNewUgcListUsingGETParamsSorting = 3
	GetNewUgcListUsingGETParamsSortingN4 GetNewUgcListUsingGETParamsSorting = 4
	GetNewUgcListUsingGETParamsSortingN5 GetNewUgcListUsingGETParamsSorting = 5
	GetNewUgcListUsingGETParamsSortingN6 GetNewUgcListUsingGETParamsSorting = 6
	GetNewUgcListUsingGETParamsSortingN7 GetNewUgcListUsingGETParamsSorting = 7
	GetNewUgcListUsingGETParamsSortingN8 GetNewUgcListUsingGETParamsSorting = 8
)

// Defines values for CreateUsingPOST2MultipartBodyGenre.
const (
	CreateUsingPOST2MultipartBodyGenreBATTLE     CreateUsingPOST2MultipartBodyGenre = "BATTLE"
	CreateUsingPOST2MultipartBodyGenreBUILDING   CreateUsingPOST2MultipartBodyGenre = "BUILDING"
	CreateUsingPOST2MultipartBodyGenreCASUAL     CreateUsingPOST2MultipartBodyGenre = "CASUAL"
	CreateUsingPOST2MultipartBodyGenreCIRCUIT    CreateUsingPOST2MultipartBodyGenre = "CIRCUIT"
	CreateUsingPOST2MultipartBodyGenreDECORATION CreateUsingPOST2MultipartBodyGenre = "DECORATION"
	CreateUsingPOST2MultipartBodyGenreFPS        CreateUsingPOST2MultipartBodyGenre = "FPS"
	CreateUsingPOST2MultipartBodyGenreGUNFIGHT   CreateUsingPOST2MultipartBodyGenre = "GUNFIGHT"
	CreateUsingPOST2MultipartBodyGenreLANDMARK   CreateUsingPOST2MultipartBodyGenre = "LANDMARK"
	CreateUsingPOST2MultipartBodyGenrePIXEL      CreateUsingPOST2MultipartBodyGenre = "PIXEL"
	CreateUsingPOST2MultipartBodyGenreRESOURCE   CreateUsingPOST2MultipartBodyGenre = "RESOURCE"
	CreateUsingPOST2MultipartBodyGenreRUNNING    CreateUsingPOST2MultipartBodyGenre = "RUNNING"
)

// Defines values for CreateUsingPOST2MultipartBodyModType.
const (
	CreateUsingPOST2MultipartBodyModTypeN0 CreateUsingPOST2MultipartBodyModType = 0
	CreateUsingPOST2MultipartBodyModTypeN1 CreateUsingPOST2MultipartBodyModType = 1
	CreateUsingPOST2MultipartBodyModTypeN2 CreateUsingPOST2MultipartBodyModType = 2
)

// Defines values for CreateUsingPOST2MultipartBodyUgcType.
const (
	CreateUsingPOST2MultipartBodyUgcTypeN1  CreateUsingPOST2MultipartBodyUgcType = 1
	CreateUsingPOST2MultipartBodyUgcTypeN10 CreateUsingPOST2MultipartBodyUgcType = 10
	CreateUsingPOST2MultipartBodyUgcTypeN11 CreateUsingPOST2MultipartBodyUgcType = 11
	CreateUsingPOST2MultipartBodyUgcTypeN12 CreateUsingPOST2MultipartBodyUgcType = 12
	CreateUsingPOST2MultipartBodyUgcTypeN13 CreateUsingPOST2MultipartBodyUgcType = 13
	CreateUsingPOST2MultipartBodyUgcTypeN20 CreateUsingPOST2MultipartBodyUgcType = 20
	CreateUsingPOST2MultipartBodyUgcTypeN21 CreateUsingPOST2MultipartBodyUgcType = 21
	CreateUsingPOST2MultipartBodyUgcTypeN30 CreateUsingPOST2MultipartBodyUgcType = 30
)

// Defines values for GetMemberUGCPublishedDynamicUsingGETParamsType.
const (
	GetMemberUGCPublishedDynamicUsingGETParamsTypeALL       GetMemberUGCPublishedDynamicUsingGETParamsType = "ALL"
	GetMemberUGCPublishedDynamicUsingGETParamsTypeUGCDESIGN GetMemberUGCPublishedDynamicUsingGETParamsType = "UGC_DESIGN"
	GetMemberUGCPublishedDynamicUsingGETParamsTypeUGCMOD    GetMemberUGCPublishedDynamicUsingGETParamsType = "UGC_MOD"
)

// Defines values for GenreListUsingGET1ParamsType.
const (
	GenreListUsingGET1ParamsTypeALL       GenreListUsingGET1ParamsType = "ALL"
	GenreListUsingGET1ParamsTypeUGCASSET  GenreListUsingGET1ParamsType = "UGC_ASSET"
	GenreListUsingGET1ParamsTypeUGCDESIGN GenreListUsingGET1ParamsType = "UGC_DESIGN"
	GenreListUsingGET1ParamsTypeUGCMOD    GenreListUsingGET1ParamsType = "UGC_MOD"
	GenreListUsingGET1ParamsTypeUGCMOUNT  GenreListUsingGET1ParamsType = "UGC_MOUNT"
)

// Defines values for UgcGetRecordsListUsingGETParamsGenre.
const (
	ANIMATION    UgcGetRecordsListUsingGETParamsGenre = "ANIMATION"
	AUDIO        UgcGetRecordsListUsingGETParamsGenre = "AUDIO"
	BODY         UgcGetRecordsListUsingGETParamsGenre = "BODY"
	GEAR         UgcGetRecordsListUsingGETParamsGenre = "GEAR"
	MATERIAL     UgcGetRecordsListUsingGETParamsGenre = "MATERIAL"
	MESH         UgcGetRecordsListUsingGETParamsGenre = "MESH"
	MESHBLOCK    UgcGetRecordsListUsingGETParamsGenre = "MESHBLOCK"
	PARTICLE     UgcGetRecordsListUsingGETParamsGenre = "PARTICLE"
	SCRIPT       UgcGetRecordsListUsingGETParamsGenre = "SCRIPT"
	STRUCTURE    UgcGetRecordsListUsingGETParamsGenre = "STRUCTURE"
	TEXTURE2D    UgcGetRecordsListUsingGETParamsGenre = "TEXTURE2D"
	VOXELBLOCK   UgcGetRecordsListUsingGETParamsGenre = "VOXELBLOCK"
	VOXELTERRAIN UgcGetRecordsListUsingGETParamsGenre = "VOXELTERRAIN"
	VPACK        UgcGetRecordsListUsingGETParamsGenre = "VPACK"
)

// Defines values for UgcGetRecordsListUsingGETParamsOrigin.
const (
	UgcGetRecordsListUsingGETParamsOriginSGXQ     UgcGetRecordsListUsingGETParamsOrigin = "SGXQ"
	UgcGetRecordsListUsingGETParamsOriginVULCANUS UgcGetRecordsListUsingGETParamsOrigin = "VULCANUS"
	UgcGetRecordsListUsingGETParamsOriginWEB      UgcGetRecordsListUsingGETParamsOrigin = "WEB"
)

// Defines values for GetUGCDynamicUsingGETParamsType.
const (
	GetUGCDynamicUsingGETParamsTypeALL       GetUGCDynamicUsingGETParamsType = "ALL"
	GetUGCDynamicUsingGETParamsTypeUGCDESIGN GetUGCDynamicUsingGETParamsType = "UGC_DESIGN"
	GetUGCDynamicUsingGETParamsTypeUGCMOD    GetUGCDynamicUsingGETParamsType = "UGC_MOD"
)

// Defines values for GetMyUgcListUsingGETParamsType.
//const (
//	GetMyUgcListUsingGETParamsTypeN1  GetMyUgcListUsingGETParamsType = 1
//	GetMyUgcListUsingGETParamsTypeN10 GetMyUgcListUsingGETParamsType = 10
//	GetMyUgcListUsingGETParamsTypeN11 GetMyUgcListUsingGETParamsType = 11
//	GetMyUgcListUsingGETParamsTypeN12 GetMyUgcListUsingGETParamsType = 12
//	GetMyUgcListUsingGETParamsTypeN13 GetMyUgcListUsingGETParamsType = 13
//	GetMyUgcListUsingGETParamsTypeN20 GetMyUgcListUsingGETParamsType = 20
//	GetMyUgcListUsingGETParamsTypeN21 GetMyUgcListUsingGETParamsType = 21
//	GetMyUgcListUsingGETParamsTypeN30 GetMyUgcListUsingGETParamsType = 30
//)

// Defines values for GetMyUgcListUsingGETParamsStatus.
const (
	Failed    GetMyUgcListUsingGETParamsStatus = "failed"
	Published GetMyUgcListUsingGETParamsStatus = "published"
	Rejected  GetMyUgcListUsingGETParamsStatus = "rejected"
	Review    GetMyUgcListUsingGETParamsStatus = "review"
	Reviewing GetMyUgcListUsingGETParamsStatus = "reviewing"
)

// Defines values for GetMyUgcListUsingGETParamsSorting.
const (
	GetMyUgcListUsingGETParamsSortingN1 GetMyUgcListUsingGETParamsSorting = 1
	GetMyUgcListUsingGETParamsSortingN2 GetMyUgcListUsingGETParamsSorting = 2
	GetMyUgcListUsingGETParamsSortingN3 GetMyUgcListUsingGETParamsSorting = 3
	GetMyUgcListUsingGETParamsSortingN4 GetMyUgcListUsingGETParamsSorting = 4
	GetMyUgcListUsingGETParamsSortingN5 GetMyUgcListUsingGETParamsSorting = 5
	GetMyUgcListUsingGETParamsSortingN6 GetMyUgcListUsingGETParamsSorting = 6
	GetMyUgcListUsingGETParamsSortingN7 GetMyUgcListUsingGETParamsSorting = 7
	GetMyUgcListUsingGETParamsSortingN8 GetMyUgcListUsingGETParamsSorting = 8
)

// Defines values for GetUgcV21UgcMyugcSearchParamsUgcType.
const (
	GetUgcV21UgcMyugcSearchParamsUgcTypeN1  GetUgcV21UgcMyugcSearchParamsUgcType = 1
	GetUgcV21UgcMyugcSearchParamsUgcTypeN10 GetUgcV21UgcMyugcSearchParamsUgcType = 10
	GetUgcV21UgcMyugcSearchParamsUgcTypeN11 GetUgcV21UgcMyugcSearchParamsUgcType = 11
	GetUgcV21UgcMyugcSearchParamsUgcTypeN12 GetUgcV21UgcMyugcSearchParamsUgcType = 12
	GetUgcV21UgcMyugcSearchParamsUgcTypeN13 GetUgcV21UgcMyugcSearchParamsUgcType = 13
	GetUgcV21UgcMyugcSearchParamsUgcTypeN20 GetUgcV21UgcMyugcSearchParamsUgcType = 20
	GetUgcV21UgcMyugcSearchParamsUgcTypeN21 GetUgcV21UgcMyugcSearchParamsUgcType = 21
	GetUgcV21UgcMyugcSearchParamsUgcTypeN30 GetUgcV21UgcMyugcSearchParamsUgcType = 30
)

// Defines values for GetUgcV21UgcMyugcSearchParamsGenre.
const (
	GetUgcV21UgcMyugcSearchParamsGenreBATTLE     GetUgcV21UgcMyugcSearchParamsGenre = "BATTLE"
	GetUgcV21UgcMyugcSearchParamsGenreBUILDING   GetUgcV21UgcMyugcSearchParamsGenre = "BUILDING"
	GetUgcV21UgcMyugcSearchParamsGenreCASUAL     GetUgcV21UgcMyugcSearchParamsGenre = "CASUAL"
	GetUgcV21UgcMyugcSearchParamsGenreCIRCUIT    GetUgcV21UgcMyugcSearchParamsGenre = "CIRCUIT"
	GetUgcV21UgcMyugcSearchParamsGenreDECORATION GetUgcV21UgcMyugcSearchParamsGenre = "DECORATION"
	GetUgcV21UgcMyugcSearchParamsGenreFPS        GetUgcV21UgcMyugcSearchParamsGenre = "FPS"
	GetUgcV21UgcMyugcSearchParamsGenreGUNFIGHT   GetUgcV21UgcMyugcSearchParamsGenre = "GUNFIGHT"
	GetUgcV21UgcMyugcSearchParamsGenreLANDMARK   GetUgcV21UgcMyugcSearchParamsGenre = "LANDMARK"
	GetUgcV21UgcMyugcSearchParamsGenrePIXEL      GetUgcV21UgcMyugcSearchParamsGenre = "PIXEL"
	GetUgcV21UgcMyugcSearchParamsGenreRESOURCE   GetUgcV21UgcMyugcSearchParamsGenre = "RESOURCE"
	GetUgcV21UgcMyugcSearchParamsGenreRUNNING    GetUgcV21UgcMyugcSearchParamsGenre = "RUNNING"
)

// Defines values for RecentPlayListUsingGETParamsSorting.
const (
	RecentPlayListUsingGETParamsSortingN1 RecentPlayListUsingGETParamsSorting = 1
	RecentPlayListUsingGETParamsSortingN2 RecentPlayListUsingGETParamsSorting = 2
	RecentPlayListUsingGETParamsSortingN3 RecentPlayListUsingGETParamsSorting = 3
	RecentPlayListUsingGETParamsSortingN4 RecentPlayListUsingGETParamsSorting = 4
	RecentPlayListUsingGETParamsSortingN5 RecentPlayListUsingGETParamsSorting = 5
	RecentPlayListUsingGETParamsSortingN6 RecentPlayListUsingGETParamsSorting = 6
	RecentPlayListUsingGETParamsSortingN7 RecentPlayListUsingGETParamsSorting = 7
	RecentPlayListUsingGETParamsSortingN8 RecentPlayListUsingGETParamsSorting = 8
)

// Defines values for GetRecordsListUsingGETParamsType.
const (
	GetRecordsListUsingGETParamsTypeALL       GetRecordsListUsingGETParamsType = "ALL"
	GetRecordsListUsingGETParamsTypeUGCDESIGN GetRecordsListUsingGETParamsType = "UGC_DESIGN"
	GetRecordsListUsingGETParamsTypeUGCMOD    GetRecordsListUsingGETParamsType = "UGC_MOD"
)

// Defines values for MyRecordsEmptyUsingDELETEParamsType.
const (
	MyRecordsEmptyUsingDELETEParamsTypeALL       MyRecordsEmptyUsingDELETEParamsType = "ALL"
	MyRecordsEmptyUsingDELETEParamsTypeUGCDESIGN MyRecordsEmptyUsingDELETEParamsType = "UGC_DESIGN"
	MyRecordsEmptyUsingDELETEParamsTypeUGCMOD    MyRecordsEmptyUsingDELETEParamsType = "UGC_MOD"
)

// Defines values for MyRecordsEmptyUsingPOSTParamsType.
const (
	MyRecordsEmptyUsingPOSTParamsTypeALL       MyRecordsEmptyUsingPOSTParamsType = "ALL"
	MyRecordsEmptyUsingPOSTParamsTypeUGCDESIGN MyRecordsEmptyUsingPOSTParamsType = "UGC_DESIGN"
	MyRecordsEmptyUsingPOSTParamsTypeUGCMOD    MyRecordsEmptyUsingPOSTParamsType = "UGC_MOD"
)

// Defines values for SearchUsingGET1ParamsUgcType.
//const (
//	SearchUsingGET1ParamsUgcTypeN1  SearchUsingGET1ParamsUgcType = 1
//	SearchUsingGET1ParamsUgcTypeN10 SearchUsingGET1ParamsUgcType = 10
//	SearchUsingGET1ParamsUgcTypeN11 SearchUsingGET1ParamsUgcType = 11
//	SearchUsingGET1ParamsUgcTypeN12 SearchUsingGET1ParamsUgcType = 12
//	SearchUsingGET1ParamsUgcTypeN13 SearchUsingGET1ParamsUgcType = 13
//	SearchUsingGET1ParamsUgcTypeN20 SearchUsingGET1ParamsUgcType = 20
//	SearchUsingGET1ParamsUgcTypeN21 SearchUsingGET1ParamsUgcType = 21
//	SearchUsingGET1ParamsUgcTypeN30 SearchUsingGET1ParamsUgcType = 30
//)

// Defines values for SearchUsingGET1ParamsGenre.
const (
	SearchUsingGET1ParamsGenreBATTLE     SearchUsingGET1ParamsGenre = "BATTLE"
	SearchUsingGET1ParamsGenreBUILDING   SearchUsingGET1ParamsGenre = "BUILDING"
	SearchUsingGET1ParamsGenreCASUAL     SearchUsingGET1ParamsGenre = "CASUAL"
	SearchUsingGET1ParamsGenreCIRCUIT    SearchUsingGET1ParamsGenre = "CIRCUIT"
	SearchUsingGET1ParamsGenreDECORATION SearchUsingGET1ParamsGenre = "DECORATION"
	SearchUsingGET1ParamsGenreFPS        SearchUsingGET1ParamsGenre = "FPS"
	SearchUsingGET1ParamsGenreGUNFIGHT   SearchUsingGET1ParamsGenre = "GUNFIGHT"
	SearchUsingGET1ParamsGenreLANDMARK   SearchUsingGET1ParamsGenre = "LANDMARK"
	SearchUsingGET1ParamsGenrePIXEL      SearchUsingGET1ParamsGenre = "PIXEL"
	SearchUsingGET1ParamsGenreRESOURCE   SearchUsingGET1ParamsGenre = "RESOURCE"
	SearchUsingGET1ParamsGenreRUNNING    SearchUsingGET1ParamsGenre = "RUNNING"
)

// Defines values for SearchUsingGET1ParamsSearchTarget.
const (
	Content  SearchUsingGET1ParamsSearchTarget = "content"
	Nickname SearchUsingGET1ParamsSearchTarget = "nickname"
	Tag      SearchUsingGET1ParamsSearchTarget = "tag"
	Title    SearchUsingGET1ParamsSearchTarget = "title"
)

// Defines values for SearchUsingGET1ParamsSorting.
const (
	SearchUsingGET1ParamsSortingN1 SearchUsingGET1ParamsSorting = 1
	SearchUsingGET1ParamsSortingN2 SearchUsingGET1ParamsSorting = 2
	SearchUsingGET1ParamsSortingN3 SearchUsingGET1ParamsSorting = 3
	SearchUsingGET1ParamsSortingN4 SearchUsingGET1ParamsSorting = 4
	SearchUsingGET1ParamsSortingN5 SearchUsingGET1ParamsSorting = 5
	SearchUsingGET1ParamsSortingN6 SearchUsingGET1ParamsSorting = 6
	SearchUsingGET1ParamsSortingN7 SearchUsingGET1ParamsSorting = 7
	SearchUsingGET1ParamsSortingN8 SearchUsingGET1ParamsSorting = 8
)

// Defines values for UploadUsingPOSTParamsFileType.
const (
	UploadUsingPOSTParamsFileTypeIMAGE    UploadUsingPOSTParamsFileType = "IMAGE"
	UploadUsingPOSTParamsFileTypeRESOURCE UploadUsingPOSTParamsFileType = "RESOURCE"
	UploadUsingPOSTParamsFileTypeVIDEO    UploadUsingPOSTParamsFileType = "VIDEO"
)

// Defines values for UploadUsingPOSTParamsDevice.
const (
	UploadUsingPOSTParamsDeviceAndroid UploadUsingPOSTParamsDevice = "Android"
	UploadUsingPOSTParamsDeviceIOS     UploadUsingPOSTParamsDevice = "IOS"
	UploadUsingPOSTParamsDevicePackage UploadUsingPOSTParamsDevice = "Package"
	UploadUsingPOSTParamsDeviceProject UploadUsingPOSTParamsDevice = "Project"
	UploadUsingPOSTParamsDeviceServer  UploadUsingPOSTParamsDevice = "Server"
)

// Defines values for GetMemberFavoriteListUsingGETParamsType.
const (
	ALL       GetMemberFavoriteListUsingGETParamsType = "ALL"
	UGCDESIGN GetMemberFavoriteListUsingGETParamsType = "UGC_DESIGN"
	UGCMOD    GetMemberFavoriteListUsingGETParamsType = "UGC_MOD"
)

// Defines values for GetMemberUGCListUsingGETParamsType.
//const (
//	GetMemberUGCListUsingGETParamsTypeN1  GetMemberUGCListUsingGETParamsType = 1
//	GetMemberUGCListUsingGETParamsTypeN10 GetMemberUGCListUsingGETParamsType = 10
//	GetMemberUGCListUsingGETParamsTypeN11 GetMemberUGCListUsingGETParamsType = 11
//	GetMemberUGCListUsingGETParamsTypeN12 GetMemberUGCListUsingGETParamsType = 12
//	GetMemberUGCListUsingGETParamsTypeN13 GetMemberUGCListUsingGETParamsType = 13
//	GetMemberUGCListUsingGETParamsTypeN20 GetMemberUGCListUsingGETParamsType = 20
//	GetMemberUGCListUsingGETParamsTypeN21 GetMemberUGCListUsingGETParamsType = 21
//	GetMemberUGCListUsingGETParamsTypeN30 GetMemberUGCListUsingGETParamsType = 30
//)

// Defines values for GetMemberUGCListUsingGETParamsSorting.
const (
	GetMemberUGCListUsingGETParamsSortingN1 GetMemberUGCListUsingGETParamsSorting = 1
	GetMemberUGCListUsingGETParamsSortingN2 GetMemberUGCListUsingGETParamsSorting = 2
	GetMemberUGCListUsingGETParamsSortingN3 GetMemberUGCListUsingGETParamsSorting = 3
	GetMemberUGCListUsingGETParamsSortingN4 GetMemberUGCListUsingGETParamsSorting = 4
	GetMemberUGCListUsingGETParamsSortingN5 GetMemberUGCListUsingGETParamsSorting = 5
	GetMemberUGCListUsingGETParamsSortingN6 GetMemberUGCListUsingGETParamsSorting = 6
	GetMemberUGCListUsingGETParamsSortingN7 GetMemberUGCListUsingGETParamsSorting = 7
	GetMemberUGCListUsingGETParamsSortingN8 GetMemberUGCListUsingGETParamsSorting = 8
)

// Defines values for UgcInfoUsingGET1ParamsDevice.
const (
	UgcInfoUsingGET1ParamsDeviceAndroid UgcInfoUsingGET1ParamsDevice = "Android"
	UgcInfoUsingGET1ParamsDeviceIOS     UgcInfoUsingGET1ParamsDevice = "IOS"
	UgcInfoUsingGET1ParamsDevicePackage UgcInfoUsingGET1ParamsDevice = "Package"
	UgcInfoUsingGET1ParamsDeviceProject UgcInfoUsingGET1ParamsDevice = "Project"
	UgcInfoUsingGET1ParamsDeviceServer  UgcInfoUsingGET1ParamsDevice = "Server"
)

// Defines values for UgcUpdateUsingPOST1MultipartBodyGenre.
const (
	UgcUpdateUsingPOST1MultipartBodyGenreBATTLE     UgcUpdateUsingPOST1MultipartBodyGenre = "BATTLE"
	UgcUpdateUsingPOST1MultipartBodyGenreBUILDING   UgcUpdateUsingPOST1MultipartBodyGenre = "BUILDING"
	UgcUpdateUsingPOST1MultipartBodyGenreCASUAL     UgcUpdateUsingPOST1MultipartBodyGenre = "CASUAL"
	UgcUpdateUsingPOST1MultipartBodyGenreCIRCUIT    UgcUpdateUsingPOST1MultipartBodyGenre = "CIRCUIT"
	UgcUpdateUsingPOST1MultipartBodyGenreDECORATION UgcUpdateUsingPOST1MultipartBodyGenre = "DECORATION"
	UgcUpdateUsingPOST1MultipartBodyGenreFPS        UgcUpdateUsingPOST1MultipartBodyGenre = "FPS"
	UgcUpdateUsingPOST1MultipartBodyGenreGUNFIGHT   UgcUpdateUsingPOST1MultipartBodyGenre = "GUNFIGHT"
	UgcUpdateUsingPOST1MultipartBodyGenreLANDMARK   UgcUpdateUsingPOST1MultipartBodyGenre = "LANDMARK"
	UgcUpdateUsingPOST1MultipartBodyGenrePIXEL      UgcUpdateUsingPOST1MultipartBodyGenre = "PIXEL"
	UgcUpdateUsingPOST1MultipartBodyGenreRESOURCE   UgcUpdateUsingPOST1MultipartBodyGenre = "RESOURCE"
	UgcUpdateUsingPOST1MultipartBodyGenreRUNNING    UgcUpdateUsingPOST1MultipartBodyGenre = "RUNNING"
)

// Defines values for UgcUpdateUsingPOST1MultipartBodyModType.
const (
	UgcUpdateUsingPOST1MultipartBodyModTypeN0 UgcUpdateUsingPOST1MultipartBodyModType = 0
	UgcUpdateUsingPOST1MultipartBodyModTypeN1 UgcUpdateUsingPOST1MultipartBodyModType = 1
	UgcUpdateUsingPOST1MultipartBodyModTypeN2 UgcUpdateUsingPOST1MultipartBodyModType = 2
)

// Defines values for UgcUpdateUsingPOST1MultipartBodyUgcType.
const (
	UgcUpdateUsingPOST1MultipartBodyUgcTypeN1  UgcUpdateUsingPOST1MultipartBodyUgcType = 1
	UgcUpdateUsingPOST1MultipartBodyUgcTypeN10 UgcUpdateUsingPOST1MultipartBodyUgcType = 10
	UgcUpdateUsingPOST1MultipartBodyUgcTypeN11 UgcUpdateUsingPOST1MultipartBodyUgcType = 11
	UgcUpdateUsingPOST1MultipartBodyUgcTypeN12 UgcUpdateUsingPOST1MultipartBodyUgcType = 12
	UgcUpdateUsingPOST1MultipartBodyUgcTypeN13 UgcUpdateUsingPOST1MultipartBodyUgcType = 13
	UgcUpdateUsingPOST1MultipartBodyUgcTypeN20 UgcUpdateUsingPOST1MultipartBodyUgcType = 20
	UgcUpdateUsingPOST1MultipartBodyUgcTypeN21 UgcUpdateUsingPOST1MultipartBodyUgcType = 21
	UgcUpdateUsingPOST1MultipartBodyUgcTypeN30 UgcUpdateUsingPOST1MultipartBodyUgcType = 30
)

// Defines values for UgcUpdateUsingPUT1MultipartBodyGenre.
const (
	UgcUpdateUsingPUT1MultipartBodyGenreBATTLE     UgcUpdateUsingPUT1MultipartBodyGenre = "BATTLE"
	UgcUpdateUsingPUT1MultipartBodyGenreBUILDING   UgcUpdateUsingPUT1MultipartBodyGenre = "BUILDING"
	UgcUpdateUsingPUT1MultipartBodyGenreCASUAL     UgcUpdateUsingPUT1MultipartBodyGenre = "CASUAL"
	UgcUpdateUsingPUT1MultipartBodyGenreCIRCUIT    UgcUpdateUsingPUT1MultipartBodyGenre = "CIRCUIT"
	UgcUpdateUsingPUT1MultipartBodyGenreDECORATION UgcUpdateUsingPUT1MultipartBodyGenre = "DECORATION"
	UgcUpdateUsingPUT1MultipartBodyGenreFPS        UgcUpdateUsingPUT1MultipartBodyGenre = "FPS"
	UgcUpdateUsingPUT1MultipartBodyGenreGUNFIGHT   UgcUpdateUsingPUT1MultipartBodyGenre = "GUNFIGHT"
	UgcUpdateUsingPUT1MultipartBodyGenreLANDMARK   UgcUpdateUsingPUT1MultipartBodyGenre = "LANDMARK"
	UgcUpdateUsingPUT1MultipartBodyGenrePIXEL      UgcUpdateUsingPUT1MultipartBodyGenre = "PIXEL"
	UgcUpdateUsingPUT1MultipartBodyGenreRESOURCE   UgcUpdateUsingPUT1MultipartBodyGenre = "RESOURCE"
	UgcUpdateUsingPUT1MultipartBodyGenreRUNNING    UgcUpdateUsingPUT1MultipartBodyGenre = "RUNNING"
)

// Defines values for UgcUpdateUsingPUT1MultipartBodyModType.
const (
	UgcUpdateUsingPUT1MultipartBodyModTypeN0 UgcUpdateUsingPUT1MultipartBodyModType = 0
	UgcUpdateUsingPUT1MultipartBodyModTypeN1 UgcUpdateUsingPUT1MultipartBodyModType = 1
	UgcUpdateUsingPUT1MultipartBodyModTypeN2 UgcUpdateUsingPUT1MultipartBodyModType = 2
)

// Defines values for UgcUpdateUsingPUT1MultipartBodyUgcType.
const (
	UgcUpdateUsingPUT1MultipartBodyUgcTypeN1  UgcUpdateUsingPUT1MultipartBodyUgcType = 1
	UgcUpdateUsingPUT1MultipartBodyUgcTypeN10 UgcUpdateUsingPUT1MultipartBodyUgcType = 10
	UgcUpdateUsingPUT1MultipartBodyUgcTypeN11 UgcUpdateUsingPUT1MultipartBodyUgcType = 11
	UgcUpdateUsingPUT1MultipartBodyUgcTypeN12 UgcUpdateUsingPUT1MultipartBodyUgcType = 12
	UgcUpdateUsingPUT1MultipartBodyUgcTypeN13 UgcUpdateUsingPUT1MultipartBodyUgcType = 13
	UgcUpdateUsingPUT1MultipartBodyUgcTypeN20 UgcUpdateUsingPUT1MultipartBodyUgcType = 20
	UgcUpdateUsingPUT1MultipartBodyUgcTypeN21 UgcUpdateUsingPUT1MultipartBodyUgcType = 21
	UgcUpdateUsingPUT1MultipartBodyUgcTypeN30 UgcUpdateUsingPUT1MultipartBodyUgcType = 30
)

// Defines values for GetUgcV21UgcUgcIdDownloadParamsDevice.
const (
	GetUgcV21UgcUgcIdDownloadParamsDeviceAndroid GetUgcV21UgcUgcIdDownloadParamsDevice = "Android"
	GetUgcV21UgcUgcIdDownloadParamsDeviceIOS     GetUgcV21UgcUgcIdDownloadParamsDevice = "IOS"
	GetUgcV21UgcUgcIdDownloadParamsDevicePackage GetUgcV21UgcUgcIdDownloadParamsDevice = "Package"
	GetUgcV21UgcUgcIdDownloadParamsDeviceProject GetUgcV21UgcUgcIdDownloadParamsDevice = "Project"
	GetUgcV21UgcUgcIdDownloadParamsDeviceServer  GetUgcV21UgcUgcIdDownloadParamsDevice = "Server"
)

// Defines values for UgcResourceDownloadUsingPOSTParamsDevice.
const (
	UgcResourceDownloadUsingPOSTParamsDeviceAndroid UgcResourceDownloadUsingPOSTParamsDevice = "Android"
	UgcResourceDownloadUsingPOSTParamsDeviceIOS     UgcResourceDownloadUsingPOSTParamsDevice = "IOS"
	UgcResourceDownloadUsingPOSTParamsDevicePackage UgcResourceDownloadUsingPOSTParamsDevice = "Package"
	UgcResourceDownloadUsingPOSTParamsDeviceProject UgcResourceDownloadUsingPOSTParamsDevice = "Project"
	UgcResourceDownloadUsingPOSTParamsDeviceServer  UgcResourceDownloadUsingPOSTParamsDevice = "Server"
)

// Defines values for UgcGetUsingPOSTParamsOrigin.
const (
	SGXQ     UgcGetUsingPOSTParamsOrigin = "SGXQ"
	VULCANUS UgcGetUsingPOSTParamsOrigin = "VULCANUS"
	WEB      UgcGetUsingPOSTParamsOrigin = "WEB"
)

// Defines values for UgcGetUsingPOSTParamsDevice.
const (
	Android UgcGetUsingPOSTParamsDevice = "Android"
	IOS     UgcGetUsingPOSTParamsDevice = "IOS"
	Package UgcGetUsingPOSTParamsDevice = "Package"
	Project UgcGetUsingPOSTParamsDevice = "Project"
	Server  UgcGetUsingPOSTParamsDevice = "Server"
)

// Defines values for UgcVersionCreateUsingPOST1MultipartBodyGenre.
const (
	UgcVersionCreateUsingPOST1MultipartBodyGenreBATTLE     UgcVersionCreateUsingPOST1MultipartBodyGenre = "BATTLE"
	UgcVersionCreateUsingPOST1MultipartBodyGenreBUILDING   UgcVersionCreateUsingPOST1MultipartBodyGenre = "BUILDING"
	UgcVersionCreateUsingPOST1MultipartBodyGenreCASUAL     UgcVersionCreateUsingPOST1MultipartBodyGenre = "CASUAL"
	UgcVersionCreateUsingPOST1MultipartBodyGenreCIRCUIT    UgcVersionCreateUsingPOST1MultipartBodyGenre = "CIRCUIT"
	UgcVersionCreateUsingPOST1MultipartBodyGenreDECORATION UgcVersionCreateUsingPOST1MultipartBodyGenre = "DECORATION"
	UgcVersionCreateUsingPOST1MultipartBodyGenreFPS        UgcVersionCreateUsingPOST1MultipartBodyGenre = "FPS"
	UgcVersionCreateUsingPOST1MultipartBodyGenreGUNFIGHT   UgcVersionCreateUsingPOST1MultipartBodyGenre = "GUNFIGHT"
	UgcVersionCreateUsingPOST1MultipartBodyGenreLANDMARK   UgcVersionCreateUsingPOST1MultipartBodyGenre = "LANDMARK"
	UgcVersionCreateUsingPOST1MultipartBodyGenrePIXEL      UgcVersionCreateUsingPOST1MultipartBodyGenre = "PIXEL"
	UgcVersionCreateUsingPOST1MultipartBodyGenreRESOURCE   UgcVersionCreateUsingPOST1MultipartBodyGenre = "RESOURCE"
	UgcVersionCreateUsingPOST1MultipartBodyGenreRUNNING    UgcVersionCreateUsingPOST1MultipartBodyGenre = "RUNNING"
)

// Defines values for UgcVersionCreateUsingPOST1MultipartBodyModType.
const (
	UgcVersionCreateUsingPOST1MultipartBodyModTypeN0 UgcVersionCreateUsingPOST1MultipartBodyModType = 0
	UgcVersionCreateUsingPOST1MultipartBodyModTypeN1 UgcVersionCreateUsingPOST1MultipartBodyModType = 1
	UgcVersionCreateUsingPOST1MultipartBodyModTypeN2 UgcVersionCreateUsingPOST1MultipartBodyModType = 2
)

// Defines values for UgcVersionCreateUsingPOST1MultipartBodyUgcType.
const (
	UgcVersionCreateUsingPOST1MultipartBodyUgcTypeN1  UgcVersionCreateUsingPOST1MultipartBodyUgcType = 1
	UgcVersionCreateUsingPOST1MultipartBodyUgcTypeN10 UgcVersionCreateUsingPOST1MultipartBodyUgcType = 10
	UgcVersionCreateUsingPOST1MultipartBodyUgcTypeN11 UgcVersionCreateUsingPOST1MultipartBodyUgcType = 11
	UgcVersionCreateUsingPOST1MultipartBodyUgcTypeN12 UgcVersionCreateUsingPOST1MultipartBodyUgcType = 12
	UgcVersionCreateUsingPOST1MultipartBodyUgcTypeN13 UgcVersionCreateUsingPOST1MultipartBodyUgcType = 13
	UgcVersionCreateUsingPOST1MultipartBodyUgcTypeN20 UgcVersionCreateUsingPOST1MultipartBodyUgcType = 20
	UgcVersionCreateUsingPOST1MultipartBodyUgcTypeN21 UgcVersionCreateUsingPOST1MultipartBodyUgcType = 21
	UgcVersionCreateUsingPOST1MultipartBodyUgcTypeN30 UgcVersionCreateUsingPOST1MultipartBodyUgcType = 30
)

// Defines values for UpdateVersionUsingPOST1MultipartBodyGenre.
const (
	UpdateVersionUsingPOST1MultipartBodyGenreBATTLE     UpdateVersionUsingPOST1MultipartBodyGenre = "BATTLE"
	UpdateVersionUsingPOST1MultipartBodyGenreBUILDING   UpdateVersionUsingPOST1MultipartBodyGenre = "BUILDING"
	UpdateVersionUsingPOST1MultipartBodyGenreCASUAL     UpdateVersionUsingPOST1MultipartBodyGenre = "CASUAL"
	UpdateVersionUsingPOST1MultipartBodyGenreCIRCUIT    UpdateVersionUsingPOST1MultipartBodyGenre = "CIRCUIT"
	UpdateVersionUsingPOST1MultipartBodyGenreDECORATION UpdateVersionUsingPOST1MultipartBodyGenre = "DECORATION"
	UpdateVersionUsingPOST1MultipartBodyGenreFPS        UpdateVersionUsingPOST1MultipartBodyGenre = "FPS"
	UpdateVersionUsingPOST1MultipartBodyGenreGUNFIGHT   UpdateVersionUsingPOST1MultipartBodyGenre = "GUNFIGHT"
	UpdateVersionUsingPOST1MultipartBodyGenreLANDMARK   UpdateVersionUsingPOST1MultipartBodyGenre = "LANDMARK"
	UpdateVersionUsingPOST1MultipartBodyGenrePIXEL      UpdateVersionUsingPOST1MultipartBodyGenre = "PIXEL"
	UpdateVersionUsingPOST1MultipartBodyGenreRESOURCE   UpdateVersionUsingPOST1MultipartBodyGenre = "RESOURCE"
	UpdateVersionUsingPOST1MultipartBodyGenreRUNNING    UpdateVersionUsingPOST1MultipartBodyGenre = "RUNNING"
)

// Defines values for UpdateVersionUsingPOST1MultipartBodyModType.
const (
	UpdateVersionUsingPOST1MultipartBodyModTypeN0 UpdateVersionUsingPOST1MultipartBodyModType = 0
	UpdateVersionUsingPOST1MultipartBodyModTypeN1 UpdateVersionUsingPOST1MultipartBodyModType = 1
	UpdateVersionUsingPOST1MultipartBodyModTypeN2 UpdateVersionUsingPOST1MultipartBodyModType = 2
)

// Defines values for UpdateVersionUsingPOST1MultipartBodyUgcType.
const (
	UpdateVersionUsingPOST1MultipartBodyUgcTypeN1  UpdateVersionUsingPOST1MultipartBodyUgcType = 1
	UpdateVersionUsingPOST1MultipartBodyUgcTypeN10 UpdateVersionUsingPOST1MultipartBodyUgcType = 10
	UpdateVersionUsingPOST1MultipartBodyUgcTypeN11 UpdateVersionUsingPOST1MultipartBodyUgcType = 11
	UpdateVersionUsingPOST1MultipartBodyUgcTypeN12 UpdateVersionUsingPOST1MultipartBodyUgcType = 12
	UpdateVersionUsingPOST1MultipartBodyUgcTypeN13 UpdateVersionUsingPOST1MultipartBodyUgcType = 13
	UpdateVersionUsingPOST1MultipartBodyUgcTypeN20 UpdateVersionUsingPOST1MultipartBodyUgcType = 20
	UpdateVersionUsingPOST1MultipartBodyUgcTypeN21 UpdateVersionUsingPOST1MultipartBodyUgcType = 21
	UpdateVersionUsingPOST1MultipartBodyUgcTypeN30 UpdateVersionUsingPOST1MultipartBodyUgcType = 30
)

// Defines values for UpdateVersionUsingPUT1MultipartBodyGenre.
const (
	UpdateVersionUsingPUT1MultipartBodyGenreBATTLE     UpdateVersionUsingPUT1MultipartBodyGenre = "BATTLE"
	UpdateVersionUsingPUT1MultipartBodyGenreBUILDING   UpdateVersionUsingPUT1MultipartBodyGenre = "BUILDING"
	UpdateVersionUsingPUT1MultipartBodyGenreCASUAL     UpdateVersionUsingPUT1MultipartBodyGenre = "CASUAL"
	UpdateVersionUsingPUT1MultipartBodyGenreCIRCUIT    UpdateVersionUsingPUT1MultipartBodyGenre = "CIRCUIT"
	UpdateVersionUsingPUT1MultipartBodyGenreDECORATION UpdateVersionUsingPUT1MultipartBodyGenre = "DECORATION"
	UpdateVersionUsingPUT1MultipartBodyGenreFPS        UpdateVersionUsingPUT1MultipartBodyGenre = "FPS"
	UpdateVersionUsingPUT1MultipartBodyGenreGUNFIGHT   UpdateVersionUsingPUT1MultipartBodyGenre = "GUNFIGHT"
	UpdateVersionUsingPUT1MultipartBodyGenreLANDMARK   UpdateVersionUsingPUT1MultipartBodyGenre = "LANDMARK"
	UpdateVersionUsingPUT1MultipartBodyGenrePIXEL      UpdateVersionUsingPUT1MultipartBodyGenre = "PIXEL"
	UpdateVersionUsingPUT1MultipartBodyGenreRESOURCE   UpdateVersionUsingPUT1MultipartBodyGenre = "RESOURCE"
	UpdateVersionUsingPUT1MultipartBodyGenreRUNNING    UpdateVersionUsingPUT1MultipartBodyGenre = "RUNNING"
)

// Defines values for UpdateVersionUsingPUT1MultipartBodyModType.
const (
	UpdateVersionUsingPUT1MultipartBodyModTypeN0 UpdateVersionUsingPUT1MultipartBodyModType = 0
	UpdateVersionUsingPUT1MultipartBodyModTypeN1 UpdateVersionUsingPUT1MultipartBodyModType = 1
	UpdateVersionUsingPUT1MultipartBodyModTypeN2 UpdateVersionUsingPUT1MultipartBodyModType = 2
)

// Defines values for UpdateVersionUsingPUT1MultipartBodyUgcType.
const (
	UpdateVersionUsingPUT1MultipartBodyUgcTypeN1  UpdateVersionUsingPUT1MultipartBodyUgcType = 1
	UpdateVersionUsingPUT1MultipartBodyUgcTypeN10 UpdateVersionUsingPUT1MultipartBodyUgcType = 10
	UpdateVersionUsingPUT1MultipartBodyUgcTypeN11 UpdateVersionUsingPUT1MultipartBodyUgcType = 11
	UpdateVersionUsingPUT1MultipartBodyUgcTypeN12 UpdateVersionUsingPUT1MultipartBodyUgcType = 12
	UpdateVersionUsingPUT1MultipartBodyUgcTypeN13 UpdateVersionUsingPUT1MultipartBodyUgcType = 13
	UpdateVersionUsingPUT1MultipartBodyUgcTypeN20 UpdateVersionUsingPUT1MultipartBodyUgcType = 20
	UpdateVersionUsingPUT1MultipartBodyUgcTypeN21 UpdateVersionUsingPUT1MultipartBodyUgcType = 21
	UpdateVersionUsingPUT1MultipartBodyUgcTypeN30 UpdateVersionUsingPUT1MultipartBodyUgcType = 30
)

// AllowedApplyResponse defines model for AllowedApplyResponse.
type AllowedApplyResponse struct {
	// Code code
	Code *int32 `json:"code,omitempty"`

	// Data data
	Data *map[string]interface{} `json:"data,omitempty"`

	// Message message
	Message *string `json:"message,omitempty"`
}

// BluePrintPriceInfo defines model for BluePrintPriceInfo.
type BluePrintPriceInfo struct {
	// Moneytype 设计图价格类型
	Moneytype *int32 `json:"moneytype,omitempty"`

	// Price 设计图单价
	Price *int32 `json:"price,omitempty"`
}

// DataResult defines model for DataResult.
type DataResult struct {
	// ReturnCode 状态码
	ReturnCode *int `json:"return_code,omitempty"`

	// ReturnMessage 状态码描述
	ReturnMessage *string `json:"return_message,omitempty"`
}

// DownloadInfo defines model for DownloadInfo.
type DownloadInfo struct {
	// DownloadUrl UGC文件下载地址，可直接访问该地址进行资源下载（下载地址存在有限期）
	DownloadUrl *DownloadUrl `json:"downloadUrl,omitempty"`

	// PackageArchitect 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	PackageArchitect *PackageArchitect `json:"packageArchitect,omitempty"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`
}

// DownloadInfoResp defines model for DownloadInfoResp.
type DownloadInfoResp struct {
	Context *DownloadInfo `json:"context,omitempty"`

	// ReturnCode 状态码
	ReturnCode *int `json:"return_code,omitempty"`

	// ReturnMessage 状态码描述
	ReturnMessage *string `json:"return_message,omitempty"`
}

// EvaluateInfo 评分信息
type EvaluateInfo struct {
	// CharacterNo 角色编号
	CharacterNo *int64 `json:"characterNo,omitempty"`

	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// EvalId 评分 ID
	EvalId *string `json:"evalId,omitempty"`

	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// Score 评分  【1-5】
	Score *int32 `json:"score,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UpdatedDt 更改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`

	// VersionId UGC 版本 ID
	VersionId *int32 `json:"versionId,omitempty"`
}

// EvaluateInfoListResult 评价详情列表
type EvaluateInfoListResult struct {
	// List 数据列表
	List *[]EvaluateInfo `json:"list,omitempty"`

	// TotalCnt 数据总数
	TotalCnt *int64 `json:"totalCnt,omitempty"`
}

// EvaluateInfoListResults defines model for EvaluateInfoListResults.
type EvaluateInfoListResults struct {
	// Context 评价详情列表
	Context *EvaluateInfoListResult `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// EvaluateInfoResults defines model for EvaluateInfoResults.
type EvaluateInfoResults struct {
	// Context 评分信息
	Context *EvaluateInfo `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// EvaluateRatings defines model for EvaluateRatings.
type EvaluateRatings struct {
	// Count 评分数量
	Count *int32 `json:"count,omitempty"`

	// Score 评分值 【1-5】
	Score *int32 `json:"score,omitempty"`
}

// EvaluateRatingsResponse defines model for EvaluateRatingsResponse.
type EvaluateRatingsResponse struct {
	// AvgScore 评分平均分
	AvgScore *float32 `json:"avgScore,omitempty"`

	// MyRating 我的评分
	MyRating *int32             `json:"myRating,omitempty"`
	Ratings  *[]EvaluateRatings `json:"ratings,omitempty"`

	// SumScore 评分总分
	SumScore *float32 `json:"sumScore,omitempty"`

	// TotalCount 评分总人数
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// EvaluateRatingsResponseListResult defines model for EvaluateRatingsResponseListResult.
type EvaluateRatingsResponseListResult struct {
	Context *EvaluateRatingsResponse `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// EvaluateResponse 评分响应结果
type EvaluateResponse struct {
	EvaluateInfos *[]EvaluateInfo `json:"evaluateInfos,omitempty"`

	// GradeAvg UGC 评分
	GradeAvg *float32 `json:"gradeAvg,omitempty"`

	// GradeCnt 评分人数
	GradeCnt *int32 `json:"gradeCnt,omitempty"`

	// GradeSum 评分总分
	GradeSum *float32 `json:"gradeSum,omitempty"`

	// TotalCnt 评分记录总数
	TotalCnt *int32 `json:"totalCnt,omitempty"`
}

// EvaluateResponseListResults defines model for EvaluateResponseListResults.
type EvaluateResponseListResults struct {
	// Context 评分响应结果
	Context *EvaluateResponse `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// FavoriteInfo 收藏信息
type FavoriteInfo struct {
	// CharacterNo 角色编号
	CharacterNo *int64 `json:"characterNo,omitempty"`

	// CreatedDt 收藏时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// FavoId 收藏编号
	FavoId *string `json:"favoId,omitempty"`

	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// Status 状态 【published、delete】
	Status *string `json:"status,omitempty"`

	// Type 类型：{ UGC_MOD (玩法地图)  UGC_DESIGN (设计图)}
	Type *string `json:"type,omitempty"`

	// UgcId UGC ID
	UgcId   *string  `json:"ugcId,omitempty"`
	UgcInfo *UgcInfo `json:"ugcInfo,omitempty"`

	// UpdatedDt 修改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`
}

// FavoriteInfoListResults defines model for FavoriteInfoListResults.
type FavoriteInfoListResults struct {
	// Context 收藏信息
	Context *FavoriteInfo `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// GDISResponse defines model for GDISResponse.
type GDISResponse struct {
	// Code code
	Code *int32 `json:"code,omitempty"`

	// Data 内容
	Data *map[string]interface{} `json:"data,omitempty"`

	// Message message
	Message *string `json:"message,omitempty"`
}

// GdisClearModRatingReq defines model for GdisClearModRatingReq.
type GdisClearModRatingReq struct {
	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// NicknameNo 角色编号
	NicknameNo *int64 `json:"nicknameNo,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`
}

// GdisOutAllModReq defines model for GdisOutAllModReq.
type GdisOutAllModReq struct {
	// IsOutMod true (下架该用户所有MOD) , false (上架该用户所有MOD)
	IsOutMod *bool `json:"isOutMod,omitempty"`

	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// NicknameNo 角色编号
	NicknameNo *int64 `json:"nicknameNo,omitempty"`
}

// GdisSoldOutModReq defines model for GdisSoldOutModReq.
type GdisSoldOutModReq struct {
	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// NicknameNo 角色编号
	NicknameNo *int64 `json:"nicknameNo,omitempty"`

	// SoldOut 是否下架此 MOD true or false （false 不做处理）
	SoldOut *bool `json:"soldOut,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`
}

// Leaderboard 排行榜信息
type Leaderboard struct {
	// Id 主键
	Id *string `json:"id,omitempty"`

	// Stat 排位信息
	Stat *[]string `json:"stat,omitempty"`

	// Stats 排位信息
	Stats *[]Stats `json:"stats,omitempty"`

	// TemplateId 模板ID
	TemplateId *string `json:"template_id,omitempty"`
}

// MapResult defines model for MapResult.
type MapResult map[string]interface{}

// Media defines model for Media.
type Media struct {
	// MediaNo media 编号
	MediaNo *int32 `json:"mediaNo,omitempty"`

	// MediaType media 类型 IMAGE,VIDEO,RESOURCE,BANNER
	MediaType *string `json:"mediaType,omitempty"`

	// MediaUrl media 路径
	MediaUrl *string `json:"mediaUrl,omitempty"`

	// PreviewUrl 封面
	PreviewUrl *string `json:"previewUrl,omitempty"`
	RegDt      *int64  `json:"regDt,omitempty"`

	// RegType 注册类型
	// Deprecated:
	RegType *string `json:"regType,omitempty"`

	// ServiceType 服务类型
	// Deprecated:
	ServiceType *string `json:"serviceType,omitempty"`

	// UpdDt 更新时间
	UpdDt *int64 `json:"updDt,omitempty"`
}

// ModSandboxMeta defines model for ModSandboxMeta.
type ModSandboxMeta struct {
	// DistributeType 分配规则 ：{ 0：solo / 1:team / 2:party }
	DistributeType *int32 `json:"distribute_type,omitempty"`

	// MinCount 最小开始人数，默认为1
	MinCount *int32 `json:"min_count,omitempty"`

	// ProjectType project选择 ：{0：sandbox  1：arcade 2：vulcanus}
	ProjectType *int32 `json:"project_type,omitempty"`

	// TeamGapCount 队伍最小差异数，默认为0
	TeamGapCount *int32  `json:"team_gap_count,omitempty"`
	Teams        *[]Team `json:"teams,omitempty"`
}

// OldResponseResultString defines model for OldResponseResultString.
type OldResponseResultString struct {
	// Context context
	Context *string `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// Packages UGC多文件版本信息
type Packages = []struct {
	// PackageArchitect 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	PackageArchitect *PackageArchitect `json:"packageArchitect,omitempty"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageCreatedDt 文件上传时间
	PackageCreatedDt *PackageCreatedDt `json:"packageCreatedDt,omitempty"`

	// PackageDefault 是否为默认下载文件，如果下载时不指定device,将下载默认文件
	PackageDefault *PackageDefault `json:"packageDefault,omitempty"`

	// PackageFileName UGC 文件名
	PackageFileName *PackageFileName `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageUpdatedDt 文件替换时间
	PackageUpdatedDt *PackageUpdatedDt `json:"packageUpdatedDt,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`
}

// ReportReply defines model for ReportReply.
type ReportReply struct {
	// ReplyContent 评论内容
	ReplyContent *string `json:"replyContent,omitempty"`

	// ReplyNo 评论编号
	ReplyNo *string `json:"replyNo,omitempty"`
}

// ReportUgcInfo defines model for ReportUgcInfo.
type ReportUgcInfo struct {
	// Status UGC 状态
	Status *string `json:"status,omitempty"`

	// UgcContent UGC 内容描述
	UgcContent *string `json:"ugcContent,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UgcPreviewUrl UGC 预览图
	UgcPreviewUrl *string `json:"ugcPreviewUrl,omitempty"`

	// UgcTitle UGC 标题
	UgcTitle *string `json:"ugcTitle,omitempty"`

	// UgcType UGC 类型
	UgcType *int32 `json:"ugcType,omitempty"`
}

// ResponseResult defines model for ResponseResult.
type ResponseResult struct {
	// Context context
	Context *map[string]interface{} `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// ResponseResultBoolean defines model for ResponseResultBoolean.
type ResponseResultBoolean struct {
	// Context context
	Context *bool `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// SandboxMeta 游戏自定义参数 / sandbox meta
type SandboxMeta struct {
	// BlueprintBuildPrice 设计图价格信息
	BlueprintBuildPrice *[]BluePrintPriceInfo `json:"blueprintBuildPrice,omitempty"`

	// BlueprintId 设计图主键
	BlueprintId *string `json:"blueprintId,omitempty"`

	// BlueprintType 设计图类型
	BlueprintType *string `json:"blueprintType,omitempty"`

	// CustomVehicleStat Custom 坐骑信息
	CustomVehicleStat *map[string]interface{} `json:"custom_vehicle_stat,omitempty"`

	// Extra 额外描述
	Extra *string `json:"extra,omitempty"`

	// FilePackingVersion 包装文件版本
	FilePackingVersion *string `json:"filePackingVersion,omitempty"`

	// Leaderboard 排行榜信息
	Leaderboard *Leaderboard    `json:"leaderboard,omitempty"`
	Mms         *ModSandboxMeta `json:"mms,omitempty"`
}

// Stats defines model for Stats.
type Stats struct {
	// Death 死亡
	Death *string `json:"death,omitempty"`

	// Kill 击杀
	Kill *string `json:"kill,omitempty"`

	// Sumscore 总分
	Sumscore *string `json:"sumscore,omitempty"`
}

// TagInfo 标签详情
type TagInfo struct {
	// CreateBy 作者信息
	CreateBy *UgcMember `json:"createBy,omitempty"`

	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// OfficialScore 管理员操作值
	OfficialScore *int64 `json:"officialScore,omitempty"`

	// Status 状态
	Status *string `json:"status,omitempty"`

	// TagBrand Tag 创建者类型
	TagBrand *int32 `json:"tagBrand,omitempty"`

	// TagId 标签 ID
	TagId *string `json:"tagId,omitempty"`

	// TagName 标签名
	TagName *string `json:"tagName,omitempty"`

	// TagType 标签类型
	TagType *[]string `json:"tagType,omitempty"`

	// UpdatedDt 更改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`

	// UserScore 作品采用量
	UserScore *int64 `json:"userScore,omitempty"`
	Visible   *bool  `json:"visible,omitempty"`
}

// TagInfoListResult defines model for TagInfoListResult.
type TagInfoListResult struct {
	// List 数据列表
	List *[]TagInfo `json:"list,omitempty"`

	// TotalCnt 数据总数
	TotalCnt *int64 `json:"totalCnt,omitempty"`
}

// TagInfoListResults defines model for TagInfoListResults.
type TagInfoListResults struct {
	Context *TagInfoListResult `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// TagInfoResult defines model for TagInfoResult.
type TagInfoResult struct {
	// Context 标签详情
	Context *TagInfo `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// Team defines model for Team.
type Team struct {
	// TeamMaxUser 团队最大人数
	TeamMaxUser *int32 `json:"team_max_user,omitempty"`

	// TeamName 团队名
	TeamName *string `json:"team_name,omitempty"`
}

// TeamInfo 组队信息
type TeamInfo struct {
	// CoverImage 背景图网址
	CoverImage *string `json:"coverImage,omitempty"`

	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// Description 团队说明
	Description *string `json:"description,omitempty"`

	// MemberList 组员信息
	MemberList *[]int64 `json:"memberList,omitempty"`

	// OwnerId 组长编号(MemberNo)
	OwnerId *int64 `json:"ownerId,omitempty"`

	// ProfileImage 头像图网址
	ProfileImage *string `json:"profileImage,omitempty"`

	// TeamId 创造组编号
	TeamId *string `json:"teamId,omitempty"`

	// TeamName 创造组名字
	TeamName *string `json:"teamName,omitempty"`

	// UpdatedDt 修改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`
}

// TopUGC defines model for TopUGC.
type TopUGC struct {
	// Content content
	Content *string `json:"content,omitempty"`

	// Count UGC Count
	Count *int32 `json:"count,omitempty"`

	// PreviewUrl UGC preview url
	PreviewUrl *string `json:"preview_url,omitempty"`

	// Title UGC Title
	Title *string `json:"title,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugc_id,omitempty"`

	// VersionId UGC Version
	VersionId *int32 `json:"version_id,omitempty"`
}

// UGCResponseResultString defines model for UGCResponseResultString.
type UGCResponseResultString struct {
	// Code code
	Code *int32 `json:"code,omitempty"`

	// Data data
	Data *string `json:"data,omitempty"`

	// Message message
	Message *string `json:"message,omitempty"`
}

// UgcBackpack 资源背包
type UgcBackpack struct {
	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// Genre ugc分类
	Genre *string `json:"genre,omitempty"`

	// LastDownloadDt 最后下载时间
	LastDownloadDt *int64 `json:"lastDownloadDt,omitempty"`

	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// PreviewUrl 封面图url
	PreviewUrl *string `json:"previewUrl,omitempty"`

	// Title 标题
	Title *string `json:"title,omitempty"`

	// UgcId ugcId
	UgcId *string `json:"ugcId,omitempty"`
}

// UgcBackpackListResult defines model for UgcBackpackListResult.
type UgcBackpackListResult struct {
	// List 数据列表
	List *[]UgcBackpack `json:"list,omitempty"`

	// TotalCnt 数据总数
	TotalCnt *int64 `json:"totalCnt,omitempty"`
}

// UgcBackpackListResults defines model for UgcBackpackListResults.
type UgcBackpackListResults struct {
	Context *UgcBackpackListResult `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcBackpackResult UGC为assert
type UgcBackpackResult struct {
	// Context 资源背包
	Context *UgcBackpack `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcBase UGC Base 实体
type UgcBase struct {
	// Content 内容
	Content *string `json:"content,omitempty"`

	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// CustomOrder 管理员操作值
	CustomOrder *int32 `json:"customOrder,omitempty"`

	// DownloadCnt UGC 下载数量
	DownloadCnt *int32 `json:"downloadCnt,omitempty"`

	// GameId 游戏编号
	GameId *int32 `json:"gameId,omitempty"`

	// Genre UGC 分类
	Genre *string `json:"genre,omitempty"`

	// GradeAvg UGC 评分
	GradeAvg *float32 `json:"gradeAvg,omitempty"`

	// GradeCnt UGC 评分数量
	GradeCnt *int32 `json:"gradeCnt,omitempty"`

	// HotScore UGC 热度
	HotScore *int32 `json:"hotScore,omitempty"`

	// IsTop 是否置顶
	IsTop *bool `json:"isTop,omitempty"`

	// ModType 游戏模式 (mod type)
	ModType *int32 `json:"modType,omitempty"`
	Order   *int32 `json:"order,omitempty"`

	// PlayCnt UGC 游戏计数
	PlayCnt *int32 `json:"playCnt,omitempty"`

	// ReadCnt UGC 阅读数量
	ReadCnt *int32 `json:"readCnt,omitempty"`

	// ReplyCnt UGC 评论数量
	ReplyCnt *int32 `json:"replyCnt,omitempty"`

	// ShareCnt UGC 分享数量
	ShareCnt *int32 `json:"shareCnt,omitempty"`

	// Status 状态
	Status *string `json:"status,omitempty"`

	// TagList 标签集合
	TagList *[]TagInfo `json:"tagList,omitempty"`

	// Team 组队信息
	Team *TeamInfo `json:"team,omitempty"`

	// Title 标题
	Title *string `json:"title,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UgcMediaList UGC media
	UgcMediaList *[]UgcMedia `json:"ugcMediaList,omitempty"`

	// UgcMeta UGC Version 实体
	UgcMeta *UgcVersion `json:"ugcMeta,omitempty"`

	// UgcType UGC 类型
	UgcType *int32 `json:"ugcType,omitempty"`

	// UpdatedDt 修改时间 / Update Date
	UpdatedDt *int64 `json:"updatedDt,omitempty"`

	// User 作者信息
	User *UgcMember `json:"user,omitempty"`
}

// UgcBaseListResopnse defines model for UgcBaseListResopnse.
type UgcBaseListResopnse struct {
	// List 数据列表
	List *[]UgcBase `json:"list,omitempty"`

	// TotalCnt 数据总数
	TotalCnt *int64 `json:"totalCnt,omitempty"`
}

// UgcBaseListResults defines model for UgcBaseListResults.
type UgcBaseListResults struct {
	Context *UgcBaseListResopnse `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcBaseResult defines model for UgcBaseResult.
type UgcBaseResult struct {
	// Context UGC Base 实体
	Context *UgcBase `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcGenreResponse defines model for UgcGenreResponse.
type UgcGenreResponse struct {
	// GenreId 类型 ID
	GenreId *string `json:"genreId,omitempty"`

	// GenreName 类型名
	GenreName *string `json:"genreName,omitempty"`

	// ImgUrl genre 图片
	ImgUrl *string `json:"imgUrl,omitempty"`

	// OrderId 顺序 ID
	OrderId *int32 `json:"orderId,omitempty"`

	// SearchRecommendList 搜索推荐词
	SearchRecommendList *[]string `json:"searchRecommendList,omitempty"`

	// Type 类型  MOD / DESIGN
	Type *string `json:"type,omitempty"`
}

// UgcGenreResponseListResult defines model for UgcGenreResponseListResult.
type UgcGenreResponseListResult struct {
	// Context context
	Context *[]UgcGenreResponse `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcGetAssetRecords defines model for UgcGetAssetRecords.
type UgcGetAssetRecords struct {
	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// Id 主键
	Id *string `json:"id,omitempty"`

	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// Origin 来源 WEB/VULCANUS/SGXQ
	Origin  *string  `json:"origin,omitempty"`
	UgcInfo *UgcInfo `json:"ugcInfo,omitempty"`
}

// UgcGetAssetRecordsListResult defines model for UgcGetAssetRecordsListResult.
type UgcGetAssetRecordsListResult struct {
	Context *UgcGetAssetRecordsListResults `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcGetAssetRecordsListResults defines model for UgcGetAssetRecordsListResults.
type UgcGetAssetRecordsListResults struct {
	// List 数据列表
	List *[]UgcGetAssetRecords `json:"list,omitempty"`

	// TotalCnt 数据总数
	TotalCnt *int64 `json:"totalCnt,omitempty"`
}

// UgcHomelandMeta UGC Homeland Meta
type UgcHomelandMeta struct {
	// Content 家园星球说明
	Content *string `json:"content,omitempty"`

	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// DurTime 累计停留时间（秒）
	DurTime *int64 `json:"durTime,omitempty"`

	// FileId 文件ID
	FileId *string `json:"fileId,omitempty"`

	// FileName 文件名
	FileName *string `json:"fileName,omitempty"`

	// FilePath 文件存储地址
	FilePath *string `json:"filePath,omitempty"`

	// FileSize 文件大小
	FileSize *int64 `json:"fileSize,omitempty"`

	// FirstApprovalDt 第一次审核通过时间（GMT）
	FirstApprovalDt *int64 `json:"firstApprovalDt,omitempty"`

	// GameId 游戏编号
	GameId *int32 `json:"gameId,omitempty"`

	// LikeValue 累计点赞数
	LikeValue *int64   `json:"likeValue,omitempty"`
	Media     *[]Media `json:"media,omitempty"`

	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// Nickname 昵称
	Nickname *string `json:"nickname,omitempty"`

	// NicknameNo 角色编号
	NicknameNo *int64 `json:"nicknameNo,omitempty"`

	// Platform 用户登录平台【QQ/WECHAT】
	Platform *string `json:"platform,omitempty"`

	// Rank 运营方选定的名次值
	Rank *int32 `json:"rank,omitempty"`

	// RejectReason 审批不通过原因
	RejectReason *string `json:"rejectReason,omitempty"`

	// Score GMT运营人员打分数
	Score *int64 `json:"score,omitempty"`

	// SeasonId 赛季id
	SeasonId *string `json:"seasonId,omitempty"`

	// Status 状态：review (待审核), approval(批准[第一次审核通过状态]), rejected(驳回), published(已发布[第二次审核通过]), delete(删除状态);
	Status *string `json:"status,omitempty"`

	// Title 家园星球标题
	Title *string `json:"title,omitempty"`

	// Type 星球类型：0:玩家星球，1:活动运营星球;默认查询所有
	Type *int `json:"type,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UpdatedDt 修改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`

	// Visible 是否展示
	Visible *bool `json:"visible,omitempty"`

	// VisitValue 累计访客数
	VisitValue *int64 `json:"visitValue,omitempty"`

	// ZoneGuid 家园星球固有guid
	ZoneGuid *string `json:"zoneGuid,omitempty"`

	// ZoneId 家园星球领地ID
	ZoneId *string `json:"zoneId,omitempty"`
}

// UgcHomelandMetaListResult defines model for UgcHomelandMetaListResult.
type UgcHomelandMetaListResult struct {
	// List 数据列表
	List *[]UgcHomelandMeta `json:"list,omitempty"`

	// TotalCnt 数据总数
	TotalCnt *int64 `json:"totalCnt,omitempty"`
}

// UgcHomelandMetaResponseListResult defines model for UgcHomelandMetaResponseListResult.
type UgcHomelandMetaResponseListResult struct {
	// Code code
	Code *int32                     `json:"code,omitempty"`
	Data *UgcHomelandMetaListResult `json:"data,omitempty"`

	// Message message
	Message *string `json:"message,omitempty"`
}

// UgcHomelandMetaResponseResult defines model for UgcHomelandMetaResponseResult.
type UgcHomelandMetaResponseResult struct {
	// Code code
	Code *int32 `json:"code,omitempty"`

	// Data UGC Homeland Meta
	Data *UgcHomelandMeta `json:"data,omitempty"`

	// Message message
	Message *string `json:"message,omitempty"`
}

// UgcInfo defines model for UgcInfo.
type UgcInfo struct {
	// Content UGC 内容描述
	Content *string `json:"content,omitempty"`

	// Creator 作者信息
	Creator *UgcMember `json:"creator,omitempty"`

	// Genre UGC 分类
	Genre *string `json:"genre,omitempty"`

	// Order 显示顺序,数值越小越靠前
	Order *int32 `json:"order,omitempty"`

	// PreviewImg UGC 预览图
	PreviewImg *string `json:"previewImg,omitempty"`

	// Title UGC 标题
	Title *string `json:"title,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UgcType UGC 类型1. Asset  10. 玩法地图 11.官方玩法地图  12.官方玩法地图 13.系统玩法地图  20. 设计图 21.官方设计图  22. Quest  30. 坐骑
	UgcType *int32 `json:"ugcType,omitempty"`

	// VersionId UGC 版本 ID
	VersionId *int32 `json:"versionId,omitempty"`

	// VersionString 玩家自定义版本信息 / Players custom version information
	VersionString *string `json:"versionString,omitempty"`
}

// UgcInfoResponse UGC Info 实体
type UgcInfoResponse struct {
	// Content 内容
	Content *string `json:"content,omitempty"`

	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// CustomOrder 管理员操作值
	CustomOrder *int32 `json:"customOrder,omitempty"`

	// DownloadCnt UGC 下载数量
	DownloadCnt *int32 `json:"downloadCnt,omitempty"`

	// GameId 游戏编号
	GameId *int32 `json:"gameId,omitempty"`

	// Genre UGC 分类
	Genre *string `json:"genre,omitempty"`

	// GradeAvg UGC 评分
	GradeAvg *float32 `json:"gradeAvg,omitempty"`

	// GradeCnt UGC 评分数量
	GradeCnt *int32 `json:"gradeCnt,omitempty"`

	// HotScore UGC 热度
	HotScore *int32 `json:"hotScore,omitempty"`

	// IsEvaluated 是否评分
	IsEvaluated *bool `json:"isEvaluated,omitempty"`

	// IsFavorite 是否收藏
	IsFavorite *bool `json:"isFavorite,omitempty"`

	// IsPlay 是否玩过游戏
	IsPlay *bool `json:"isPlay,omitempty"`

	// IsTop 是否置顶
	IsTop *bool `json:"isTop,omitempty"`

	// ModType 游戏模式 (mod type)
	ModType *int32 `json:"modType,omitempty"`

	// OperationTagName 运营标签名
	OperationTagName *string `json:"operationTagName,omitempty"`
	Order            *int32  `json:"order,omitempty"`

	// PlayCnt UGC 游戏计数
	PlayCnt *int32 `json:"playCnt,omitempty"`

	// ReadCnt UGC 阅读数量
	ReadCnt *int32 `json:"readCnt,omitempty"`

	// ReplyCnt UGC 评论数量
	ReplyCnt *int32 `json:"replyCnt,omitempty"`

	// ShareCnt UGC 分享数量
	ShareCnt *int32 `json:"shareCnt,omitempty"`

	// Status 状态
	Status *string `json:"status,omitempty"`

	// TagList 标签集合
	TagList *[]TagInfo `json:"tagList,omitempty"`

	// TagType 标签：HOT/RECOMMEND/NEW
	TagType *string `json:"tagType,omitempty"`

	// Team 组队信息
	Team *TeamInfo `json:"team,omitempty"`

	// Title 标题
	Title *string `json:"title,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UgcMediaList UGC media
	UgcMediaList *[]UgcMedia `json:"ugcMediaList,omitempty"`

	// UgcMeta UGC Version 实体
	UgcMeta *UgcVersion `json:"ugcMeta,omitempty"`

	// UgcType UGC 类型
	UgcType *int32 `json:"ugcType,omitempty"`

	// UgcVersionList UGC Version List
	UgcVersionList *[]UgcVersion `json:"ugcVersionList,omitempty"`

	// UpdatedDt 修改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`

	// User 作者信息
	User *UgcMember `json:"user,omitempty"`
}

// UgcInfoResponseResult defines model for UgcInfoResponseResult.
type UgcInfoResponseResult struct {
	// Context UGC Info 实体
	Context *UgcInfoResponse `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcLatestOperateLog ugc操作日志
type UgcLatestOperateLog struct {
	// Content UGC Content
	Content *string `json:"content,omitempty"`

	// CreatedDt 下载时间
	CreatedDt *int64  `json:"createdDt,omitempty"`
	Id        *string `json:"id,omitempty"`

	// LogId ID 删除 使用
	LogId *string `json:"logId,omitempty"`

	// LogType 日志类型 ： { PLAY(玩游戏) / DOWNLOAD（下载蓝图） / PUBLISHED （发布 UGC ）/ RECORDS (浏览UGC)}
	LogType *string `json:"logType,omitempty"`

	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// PreviewUrl 预览图
	PreviewUrl *string `json:"previewUrl,omitempty"`

	// Title UGC Title
	Title *string `json:"title,omitempty"`

	// UgcId UGC ID
	UgcId string `json:"ugcId"`

	// UgcType UGC 类型
	UgcType *int32 `json:"ugcType,omitempty"`

	// VersionId UGC 版本 ID
	VersionId *int32 `json:"versionId,omitempty"`
}

// UgcLatestOperateLogListResult defines model for UgcLatestOperateLogListResult.
type UgcLatestOperateLogListResult struct {
	Context *UgcLatestOperateLogListResults `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcLatestOperateLogListResults defines model for UgcLatestOperateLogListResults.
type UgcLatestOperateLogListResults struct {
	List     *[]UgcLatestOperateLog `json:"list,omitempty"`
	TotalCnt *int64                 `json:"totalCnt,omitempty"`
}

// UgcLatestOperateLogResult defines model for UgcLatestOperateLogResult.
type UgcLatestOperateLogResult struct {
	// Context ugc操作日志
	Context *UgcLatestOperateLog `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcMedia defines model for UgcMedia.
type UgcMedia struct {
	// MediaNo media 编号
	MediaNo *int32 `json:"mediaNo,omitempty"`

	// MediaType media 类型
	MediaType *string `json:"mediaType,omitempty"`

	// MediaUrl media 路径
	MediaUrl *string `json:"mediaUrl,omitempty"`

	// PreviewUrl 封面
	PreviewUrl *string `json:"previewUrl,omitempty"`
	RegDt      *int64  `json:"regDt,omitempty"`

	// RegType 注册类型
	// Deprecated:
	RegType *string `json:"regType,omitempty"`

	// ServiceType 服务类型
	// Deprecated:
	ServiceType *string `json:"serviceType,omitempty"`

	// UpdDt 更新时间
	UpdDt *int64 `json:"updDt,omitempty"`
}

// UgcMember 作者信息
type UgcMember struct {
	// CharacterNo 角色编号
	CharacterNo *int64 `json:"characterNo,omitempty"`

	// MemberNo 用户编号
	MemberNo *int64 `json:"memberNo,omitempty"`

	// Nickname 玩家昵称
	Nickname *string `json:"nickname,omitempty"`

	// ProfileImg 玩家头像
	ProfileImg *string `json:"profileImg,omitempty"`
}

// UgcRecordResponse defines model for UgcRecordResponse.
type UgcRecordResponse struct {
	// Genre UGC 分类
	Genre *string `json:"genre,omitempty"`

	// GradeAvg 评分
	GradeAvg *float32 `json:"gradeAvg,omitempty"`

	// HistoryDt 时间
	HistoryDt *int64 `json:"historyDt,omitempty"`

	// HotScore UGC 热度
	HotScore *int32 `json:"hotScore,omitempty"`

	// ReadCnt 阅读量
	ReadCnt *int32 `json:"readCnt,omitempty"`

	// TagList 标签信息
	TagList *[]TagInfo `json:"tagList,omitempty"`

	// Title 标题
	Title *string `json:"title,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UgcMediaList 媒体资源
	UgcMediaList *[]UgcMedia `json:"ugcMediaList,omitempty"`

	// UgcType  UGC 类型
	UgcType *int32 `json:"ugcType,omitempty"`

	// User 作者信息
	User *UgcMember `json:"user,omitempty"`
}

// UgcRecordResponseListResult defines model for UgcRecordResponseListResult.
type UgcRecordResponseListResult struct {
	List     *[]UgcRecordResponse `json:"list,omitempty"`
	TotalCnt *int64               `json:"totalCnt,omitempty"`
}

// UgcRecordResponseListResults defines model for UgcRecordResponseListResults.
type UgcRecordResponseListResults struct {
	Context *UgcRecordResponseListResult `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcReport defines model for UgcReport.
type UgcReport struct {
	// CreatedDt 举报创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// ReportContent 举报内容
	ReportContent *string `json:"reportContent,omitempty"`

	// ReportId 举报 ID
	ReportId *string `json:"reportId,omitempty"`

	// ReportMember 作者信息
	ReportMember *UgcMember `json:"reportMember,omitempty"`

	// ReportReason 举报原因
	ReportReason *[]string    `json:"reportReason,omitempty"`
	ReportReply  *ReportReply `json:"reportReply,omitempty"`

	// ReportType 举报类型 UGC/REPLY
	ReportType    *string        `json:"reportType,omitempty"`
	ReportUgcInfo *ReportUgcInfo `json:"reportUgcInfo,omitempty"`

	// TargetReportMember 作者信息
	TargetReportMember *UgcMember `json:"targetReportMember,omitempty"`

	// UpdatedDt 举报修改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`
}

// UgcReportRequest defines model for UgcReportRequest.
type UgcReportRequest struct {
	// ReplyNo 评论编号
	ReplyNo *string `json:"replyNo,omitempty"`

	// ReportContent 举报内容
	ReportContent *string `json:"reportContent,omitempty"`

	// ReportReason 举报原因
	ReportReason *[]string `json:"reportReason,omitempty"`

	// ReportType 举报类型 UGC/REPLY
	ReportType *string `json:"reportType,omitempty"`

	// UgcId 举报的 UGC ID
	UgcId *string `json:"ugcId,omitempty"`
}

// UgcReportResult defines model for UgcReportResult.
type UgcReportResult struct {
	Context *UgcReport `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcResponse defines model for UgcResponse.
type UgcResponse struct {
	// Content 内容
	Content *string `json:"content,omitempty"`

	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// CustomOrder 管理员操作值
	CustomOrder *int32 `json:"customOrder,omitempty"`

	// DownloadCnt UGC 下载数量
	DownloadCnt *int32 `json:"downloadCnt,omitempty"`

	// GameId 游戏编号
	GameId *int32 `json:"gameId,omitempty"`

	// Genre UGC 分类
	Genre *string `json:"genre,omitempty"`

	// GradeAvg UGC 评分
	GradeAvg *float32 `json:"gradeAvg,omitempty"`

	// GradeCnt UGC 评分数量
	GradeCnt *int32 `json:"gradeCnt,omitempty"`

	// HotScore UGC 热度
	HotScore *int32 `json:"hotScore,omitempty"`

	// IsFavorite 是否收藏 true or false
	IsFavorite *bool `json:"isFavorite,omitempty"`

	// IsTop 是否置顶
	IsTop *bool `json:"isTop,omitempty"`

	// ModType 游戏模式 (mod type)
	ModType *int32 `json:"modType,omitempty"`

	// OperationTagName 运营标签名
	OperationTagName *string `json:"operationTagName,omitempty"`
	Order            *int32  `json:"order,omitempty"`

	// PlayCnt UGC 游戏计数
	PlayCnt *int32 `json:"playCnt,omitempty"`

	// ReadCnt UGC 阅读数量
	ReadCnt *int32 `json:"readCnt,omitempty"`

	// ReplyCnt UGC 评论数量
	ReplyCnt *int32 `json:"replyCnt,omitempty"`

	// ShareCnt UGC 分享数量
	ShareCnt *int32 `json:"shareCnt,omitempty"`

	// Status 状态
	Status *string `json:"status,omitempty"`

	// TagList 标签集合
	TagList *[]TagInfo `json:"tagList,omitempty"`

	// TagType 标签类型 ： RECOMMEND HOT NEW
	TagType *string `json:"tagType,omitempty"`

	// Team 组队信息
	Team *TeamInfo `json:"team,omitempty"`

	// Title 标题
	Title *string `json:"title,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UgcMediaList UGC media
	UgcMediaList *[]UgcMedia `json:"ugcMediaList,omitempty"`

	// UgcMeta UGC Version 实体
	UgcMeta *UgcVersion `json:"ugcMeta,omitempty"`

	// UgcType UGC 类型
	UgcType *int32 `json:"ugcType,omitempty"`

	// UpdatedDt 修改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`

	// User 作者信息
	User *UgcMember `json:"user,omitempty"`
}

// UgcResponseListResult defines model for UgcResponseListResult.
type UgcResponseListResult struct {
	Context *UgcResponseListResult1 `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcResponseListResult1 defines model for UgcResponseListResult1.
type UgcResponseListResult1 struct {
	List     *[]UgcResponse `json:"list,omitempty"`
	TotalCnt *int64         `json:"totalCnt,omitempty"`
}

// UgcSimilarModRequest ugc相关mod请求实体
type UgcSimilarModRequest struct {
	// GameId 游戏编号 gameId
	GameId *int `json:"gameId,omitempty"`

	// Offset 页码
	Offset *int32 `json:"offset,omitempty"`

	// SandboxMeta 游戏自定义参数
	SandboxMeta *[]MapResult `json:"sandboxMeta,omitempty"`

	// Size 每页条目数 （ 1-100 ）
	Size *int32 `json:"size,omitempty"`
}

// UgcStatistical defines model for UgcStatistical.
type UgcStatistical struct {
	// DesignCnt 设计图发布数量
	DesignCnt *int32 `json:"design_cnt,omitempty"`

	// ModCnt MOD 发布数量
	ModCnt          *int32  `json:"mod_cnt,omitempty"`
	TopSell         *TopUGC `json:"top_sell,omitempty"`
	TopUniquePlayer *TopUGC `json:"top_unique_player,omitempty"`
}

// UgcStatisticalResult defines model for UgcStatisticalResult.
type UgcStatisticalResult struct {
	Context *UgcStatistical `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcTagRequestBody ugc标签
type UgcTagRequestBody struct {
	// TagName 标签名
	TagName string `json:"tagName"`

	// TagType 标签类型
	TagType *[]string `json:"tagType,omitempty"`
}

// UgcVersion UGC Version 实体
type UgcVersion struct {
	// Packages UGC多文件版本信息
	Packages *Packages `json:"Packages,omitempty"`

	// ConflictConditions conflictConditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Copyrights copyrights
	Copyrights *[]string `json:"copyrights,omitempty"`

	// CreatedDt 创建时间
	CreatedDt *int64 `json:"createdDt,omitempty"`

	// Description UGC 描述
	Description *string `json:"description,omitempty"`

	// Genre UGC 分类 { CASUAL BATTLE FPS GUNFIGHT RUNNING}
	Genre *string `json:"genre,omitempty"`

	// GradeAvg 评分
	GradeAvg *float32 `json:"gradeAvg,omitempty"`

	// GradeCnt 评分人数
	GradeCnt *int32 `json:"gradeCnt,omitempty"`

	// GradeSum 评分总分
	GradeSum *int32 `json:"gradeSum,omitempty"`

	// Name UGC 名字
	Name *string `json:"name,omitempty"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageCreatedDt 文件上传时间
	PackageCreatedDt *PackageCreatedDt `json:"packageCreatedDt,omitempty"`

	// PackageFileName UGC 文件名
	PackageFileName *PackageFileName `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageUpdatedDt 文件替换时间
	PackageUpdatedDt *PackageUpdatedDt `json:"packageUpdatedDt,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// PatchNote 更新日志
	PatchNote *string `json:"patchNote,omitempty"`

	// Precautions precautions
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions preemptiveConditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price 价格
	Price *int32 `json:"price,omitempty"`

	// PriceType 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// PublishedDt 发布时间
	PublishedDt *int64 `json:"publishedDt,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// Status 状态
	Status *string `json:"status,omitempty"`

	// UgcBrand ugcBrand
	UgcBrand *int32 `json:"ugcBrand,omitempty"`

	// UgcId UGC ID
	UgcId *string `json:"ugcId,omitempty"`

	// UgcMediaList UGC media
	UgcMediaList *[]UgcMedia `json:"ugcMediaList,omitempty"`

	// UgcType UGC 类型
	UgcType *int32 `json:"ugcType,omitempty"`

	// UpdatedDt 修改时间
	UpdatedDt *int64 `json:"updatedDt,omitempty"`

	// Version UGC 当前版本 ID
	Version *float64 `json:"version,omitempty"`

	// VersionId UGC 版本 ID
	VersionId *int32 `json:"versionId,omitempty"`

	// VersionString 玩家自定义版本信息 / Players custom version information
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible *bool `json:"visible,omitempty"`
}

// UgcVersionListResult defines model for UgcVersionListResult.
type UgcVersionListResult struct {
	List     *[]UgcVersion `json:"list,omitempty"`
	TotalCnt *int64        `json:"totalCnt,omitempty"`
}

// UgcVersionListResults defines model for UgcVersionListResults.
type UgcVersionListResults struct {
	Context *UgcVersionListResult `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UgcVersionResult defines model for UgcVersionResult.
type UgcVersionResult struct {
	// Context UGC Version 实体
	Context *UgcVersion `json:"context,omitempty"`

	// ReturnCode return_code
	ReturnCode *string `json:"return_code,omitempty"`

	// ReturnMessage return_message
	ReturnMessage *string `json:"return_message,omitempty"`
}

// UploadFileResponse defines model for UploadFileResponse.
type UploadFileResponse struct {
	// Code code
	Code *int `json:"code,omitempty"`
	Data *struct {
		// CreatedDt 创建时间
		CreatedDt *int `json:"createdDt,omitempty"`

		// FileId 文件ID
		FileId *string `json:"fileId,omitempty"`

		// FileName 文件名称
		FileName *string `json:"fileName,omitempty"`

		// FilePath 文件路径
		FilePath *string `json:"filePath,omitempty"`

		// FileSize 文件大小
		FileSize *int `json:"fileSize,omitempty"`

		// FileType 文件类型
		FileType *string `json:"fileType,omitempty"`

		// GameId 所属游戏ID
		GameId *int `json:"gameId,omitempty"`

		// IsPrivate 文件是否私有
		IsPrivate *bool `json:"isPrivate,omitempty"`

		// Link 文件完整路径
		Link    *string `json:"link,omitempty"`
		LinkCdn *string `json:"linkCdn,omitempty"`

		// Md5 文件hash值
		Md5 *string `json:"md5,omitempty"`

		// MemberNo 所属用户
		MemberNo *int `json:"memberNo,omitempty"`

		// OriginalFileName 文件原始名称
		OriginalFileName *string `json:"originalFileName,omitempty"`

		// ServiceId 所属服务ID
		ServiceId *string `json:"serviceId,omitempty"`

		// ServiceType 所属服务类型 game/platform
		ServiceType *string `json:"serviceType,omitempty"`

		// Thumbnail 文件缩略图
		Thumbnail *string `json:"thumbnail,omitempty"`

		// UpdatedDt 最后修改时间
		UpdatedDt *int `json:"updatedDt,omitempty"`
	} `json:"data,omitempty"`

	// Message message
	Message *string `json:"message,omitempty"`
}

// DownloadUrl UGC文件下载地址，可直接访问该地址进行资源下载（下载地址存在有限期）
type DownloadUrl = string

// PackageArchitect 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
type PackageArchitect string

// PackageChecksum UGC文件MD5值
type PackageChecksum = string

// PackageCreatedDt 文件上传时间
type PackageCreatedDt = int

// PackageDefault 是否为默认下载文件，如果下载时不指定device,将下载默认文件
type PackageDefault = bool

// PackageFileName UGC 文件名
type PackageFileName = string

// PackageId UGC 文件 ID
type PackageId = string

// PackageInstallPath UGC文件MD5值
type PackageInstallPath = string

// PackageSize UGC文件大小
type PackageSize = int64

// PackageUpdatedDt 文件替换时间
type PackageUpdatedDt = int

// PackageValid UGC 文件自动检查结果
type PackageValid = bool

// Timestamp 当前时间戳（毫秒）
type Timestamp = int64

// UgcId UGC ID
type UgcId = string

// VersionId 版本ID
type VersionId = int

// GetBackpacksUsingGETParams defines parameters for GetBackpacksUsingGET.
type GetBackpacksUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// Genre UGC Asset 分类
	Genre *GetBackpacksUsingGETParamsGenre `form:"genre,omitempty" json:"genre,omitempty"`

	// Sorting 排序类型 1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7. play数量 8.热度值
	Sorting *GetBackpacksUsingGETParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetBackpacksUsingGETParamsGenre defines parameters for GetBackpacksUsingGET.
type GetBackpacksUsingGETParamsGenre string

// GetBackpacksUsingGETParamsSorting defines parameters for GetBackpacksUsingGET.
type GetBackpacksUsingGETParamsSorting int64

// AddBackpackAssetUsingPOSTParams defines parameters for AddBackpackAssetUsingPOST.
type AddBackpackAssetUsingPOSTParams struct {
	// UgcId UGC ID
	UgcId string `form:"ugcId" json:"ugcId"`
}

// SearchBackpackAssetUsingGETParams defines parameters for SearchBackpackAssetUsingGET.
type SearchBackpackAssetUsingGETParams struct {
	// Offset 页码
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Size 每页条目数 （ 1-100 ）
	Size *int64 `form:"size,omitempty" json:"size,omitempty"`

	// Genre UGC Asset 分类
	Genre *SearchBackpackAssetUsingGETParamsGenre `form:"genre,omitempty" json:"genre,omitempty"`

	// SearchValue 搜索的内容
	SearchValue string `form:"searchValue" json:"searchValue"`

	// Sorting 排序类型 1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7. play数量 8.热度值
	Sorting *SearchBackpackAssetUsingGETParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// SearchBackpackAssetUsingGETParamsGenre defines parameters for SearchBackpackAssetUsingGET.
type SearchBackpackAssetUsingGETParamsGenre string

// SearchBackpackAssetUsingGETParamsSorting defines parameters for SearchBackpackAssetUsingGET.
type SearchBackpackAssetUsingGETParamsSorting int64

// MyEvaluateUsingGETParams defines parameters for MyEvaluateUsingGET.
type MyEvaluateUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`
}

// EvaluateUsingPOSTParams defines parameters for EvaluateUsingPOST.
type EvaluateUsingPOSTParams struct {
	// UgcId UGC ID
	UgcId string `form:"ugcId" json:"ugcId"`

	// VersionId UGC 版本 ID
	VersionId int64 `form:"versionId" json:"versionId"`

	// Score 评分（ 1-5 ）
	Score int64 `form:"score" json:"score"`
}

// FavoriteListUsingGETParams defines parameters for FavoriteListUsingGET.
type FavoriteListUsingGETParams struct {
	// Type 类型 ：UGC_MOD(玩法地图) UGC_DESIGN (设计图)  ALL(设计图/玩法地图)
	Type *FavoriteListUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// Sorting 排序类型  1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7.play数量
	Sorting *FavoriteListUsingGETParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// FavoriteListUsingGETParamsType defines parameters for FavoriteListUsingGET.
type FavoriteListUsingGETParamsType string

// FavoriteListUsingGETParamsSorting defines parameters for FavoriteListUsingGET.
type FavoriteListUsingGETParamsSorting int64

// FavoriteUsingPOSTParams defines parameters for FavoriteUsingPOST.
type FavoriteUsingPOSTParams struct {
	// UgcId UGC ID
	UgcId string `form:"ugcId" json:"ugcId"`
}

// DelBatchFavoriteUsingDELETEParams defines parameters for DelBatchFavoriteUsingDELETE.
type DelBatchFavoriteUsingDELETEParams struct {
	// UgcIds UGC ID 列表
	UgcIds []string `form:"ugcIds" json:"ugcIds"`
}

// DelBatchFavoriteUsingPOSTParams defines parameters for DelBatchFavoriteUsingPOST.
type DelBatchFavoriteUsingPOSTParams struct {
	// UgcIds ugcIds
	UgcIds []string `form:"ugcIds" json:"ugcIds"`
}

// GetUgcV21FavoriteSearchParams defines parameters for GetUgcV21FavoriteSearch.
type GetUgcV21FavoriteSearchParams struct {
	// Keywords 搜索关键词
	Keywords string `form:"keywords" json:"keywords"`

	// Offset 页码 (1 开始)
	Offset int `form:"offset" json:"offset"`

	// Size 页大小
	Size int `form:"size" json:"size"`

	// MemberNo member no
	MemberNo *int64 `form:"memberNo,omitempty" json:"memberNo,omitempty"`

	// Type 类型 ： {UGC_MOD(玩法地图) / UGC_ASSET(资产) / UGC_MOUNT(坐骑)/  UGC_DESIGN (设计图) }
	Type *GetUgcV21FavoriteSearchParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Sorting 排序方式【倒序】（1：收藏时间）
	Sorting *int `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetUgcV21FavoriteSearchParamsType defines parameters for GetUgcV21FavoriteSearch.
type GetUgcV21FavoriteSearchParamsType string

// UgcGameResourcesDownloadUsingPOSTParams defines parameters for UgcGameResourcesDownloadUsingPOST.
type UgcGameResourcesDownloadUsingPOSTParams struct {
	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *UgcGameResourcesDownloadUsingPOSTParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// UgcGameResourcesDownloadUsingPOSTParamsDevice defines parameters for UgcGameResourcesDownloadUsingPOST.
type UgcGameResourcesDownloadUsingPOSTParamsDevice string

// FindMemberHomelandUsingGETParams defines parameters for FindMemberHomelandUsingGET.
type FindMemberHomelandUsingGETParams struct {
	// GameId gameId（SGXQ:224）
	GameId int32 `form:"gameId" json:"gameId"`
}

// InsertHomelandUsingPOSTMultipartBody defines parameters for InsertHomelandUsingPOST.
type InsertHomelandUsingPOSTMultipartBody struct {
	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`
}

// InsertHomelandUsingPOSTParams defines parameters for InsertHomelandUsingPOST.
type InsertHomelandUsingPOSTParams struct {
	// GameId 游戏编号(SGXQ:224)
	GameId int32 `form:"gameId" json:"gameId"`

	// Platform 用户登录平台 (QQ / WECHAT)
	Platform string `form:"platform" json:"platform"`

	// LikeValue 累计点赞数
	LikeValue int64 `form:"likeValue" json:"likeValue"`

	// DurTime 累计停留时间（秒）
	DurTime int64 `form:"durTime" json:"durTime"`

	// VisitValue 累计访客数
	VisitValue int64 `form:"visitValue" json:"visitValue"`

	// NicknameNo 角色编号
	NicknameNo int64 `form:"nicknameNo" json:"nicknameNo"`

	// Nickname 角色昵称
	Nickname string `form:"nickname" json:"nickname"`

	// ZoneId 家园星球领地ID
	ZoneId string `form:"zoneId" json:"zoneId"`

	// ZoneGuid 家园星球固有guid
	ZoneGuid string `form:"zoneGuid" json:"zoneGuid"`
}

// FindMemberApplyRecordUsingGETParams defines parameters for FindMemberApplyRecordUsingGET.
type FindMemberApplyRecordUsingGETParams struct {
	// UgcId UGC ID
	UgcId *string `form:"ugcId,omitempty" json:"ugcId,omitempty"`

	// GameId 游戏编号(SGXQ:224)
	GameId int `form:"gameId" json:"gameId"`

	// Offset 页码
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Size 页大小
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// FindHomelandsUsingGETParams defines parameters for FindHomelandsUsingGET.
type FindHomelandsUsingGETParams struct {
	// GameId 游戏编号(SGXQ:224)
	GameId int `form:"gameId" json:"gameId"`

	// Type 星球类型 0:玩家星球，1:活动运营星球;默认查询所有
	Type *int `form:"type,omitempty" json:"type,omitempty"`

	// Offset 页码
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Size 每页条目数 （ 1-100 ）
	Size *int64 `form:"size,omitempty" json:"size,omitempty"`

	// Sorting 排序类型 0. 默认排序(运营配置的 rank 值排序) 1. 申请推荐时间
	Sorting *int `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// UploadHomelandFileUsingPOSTMultipartBody defines parameters for UploadHomelandFileUsingPOST.
type UploadHomelandFileUsingPOSTMultipartBody struct {
	// HomelandFile 家园星球文件
	HomelandFile openapi_types.File `json:"homelandFile"`
}

// UploadHomelandFileUsingPOSTParams defines parameters for UploadHomelandFileUsingPOST.
type UploadHomelandFileUsingPOSTParams struct {
	// Type 文件类型: IMAGE(图片),VIDEO(视频),RESOURCE(资源),BANNER(banner);注：RESOURCE类型文件上传成功后将与homeland信息绑定，其他类型上传成功后将追加到media数组中
	Type string `form:"type" json:"type"`
}

// InsertHomelandUsingPOST1MultipartBody defines parameters for InsertHomelandUsingPOST1.
type InsertHomelandUsingPOST1MultipartBody struct {
	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`
}

// InsertHomelandUsingPOST1Params defines parameters for InsertHomelandUsingPOST1.
type InsertHomelandUsingPOST1Params struct {
	// GameId 游戏编号(SGXQ:224)
	GameId int32 `form:"gameId" json:"gameId"`

	// Platform 用户登录平台 (QQ/WECHAT)
	Platform InsertHomelandUsingPOST1ParamsPlatform `form:"platform" json:"platform"`

	// LikeValue 累计点赞数
	LikeValue int64 `form:"likeValue" json:"likeValue"`

	// DurTime 累计停留时间（秒）
	DurTime int64 `form:"durTime" json:"durTime"`

	// VisitValue 累计访客数
	VisitValue int64 `form:"visitValue" json:"visitValue"`

	// NicknameNo 角色编号
	NicknameNo int64 `form:"nicknameNo" json:"nicknameNo"`

	// Nickname 角色昵称
	Nickname string `form:"nickname" json:"nickname"`

	// ZoneId 家园星球领地ID
	ZoneId string `form:"zoneId" json:"zoneId"`

	// ZoneGuid 家园星球固有guid
	ZoneGuid string `form:"zoneGuid" json:"zoneGuid"`

	// MemberNo 用户编号
	MemberNo int64 `form:"memberNo" json:"memberNo"`
}

// InsertHomelandUsingPOST1ParamsPlatform defines parameters for InsertHomelandUsingPOST1.
type InsertHomelandUsingPOST1ParamsPlatform string

// GetUgcV21InternalHomelandApprovalListParams defines parameters for GetUgcV21InternalHomelandApprovalList.
type GetUgcV21InternalHomelandApprovalListParams struct {
	// GameId 游戏编号（ SGXQ : 224 ）
	GameId int `form:"gameId" json:"gameId"`

	// MemberNo 用户编号
	MemberNo *int64 `form:"memberNo,omitempty" json:"memberNo,omitempty"`

	// Type 星球类型：0.玩家星球，1.运营星球;默认查询所有
	Type *int64 `form:"type,omitempty" json:"type,omitempty"`

	// UgcId ugc id
	UgcId *string `form:"ugcId,omitempty" json:"ugcId,omitempty"`

	// Offset 页码
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Size 页大小
	Size *int64 `form:"size,omitempty" json:"size,omitempty"`
}

// FindMemberApplyRecordUsingGET1Params defines parameters for FindMemberApplyRecordUsingGET1.
type FindMemberApplyRecordUsingGET1Params struct {
	// UgcId UGC ID
	UgcId *string `form:"ugcId,omitempty" json:"ugcId,omitempty"`

	// GameId 游戏编号(SGXQ:224)
	GameId int `form:"gameId" json:"gameId"`

	// Offset 页码
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Size 页大小
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// FindMemberHomelandUsingGET1Params defines parameters for FindMemberHomelandUsingGET1.
type FindMemberHomelandUsingGET1Params struct {
	// GameId 游戏编号（ SGXQ : 224  ）
	GameId int `form:"gameId" json:"gameId"`
}

// UploadHomelandFileUsingPOST1MultipartBody defines parameters for UploadHomelandFileUsingPOST1.
type UploadHomelandFileUsingPOST1MultipartBody struct {
	// HomelandFile homelandFile
	HomelandFile openapi_types.File `json:"homelandFile"`
}

// UploadHomelandFileUsingPOST1Params defines parameters for UploadHomelandFileUsingPOST1.
type UploadHomelandFileUsingPOST1Params struct {
	// Type 文件类型: IMAGE(图片),VIDEO(视频),RESOURCE(资源),BANNER(banner);注：RESOURCE类型文件上传成功后将与homeland信息绑定，其他类型上传成功后将追加到media数组中
	Type string `form:"type" json:"type"`
}

// GetUgcInfoListUsingGETParams defines parameters for GetUgcInfoListUsingGET.
type GetUgcInfoListUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// GameId 游戏编号（ SGXQ : 224  ）
	GameId *int `form:"gameId,omitempty" json:"gameId,omitempty"`

	// Type Type ：{1. Asset  10. 玩法地图  11.官方玩法地图  12 IN APP MOD  13.系统玩法地图（System MOD） 20. 设计图  21. Quest   30. 坐骑 }
	Type *GetUgcInfoListUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Genre UGC 分类 / UGC MOD Category  { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre *GetUgcInfoListUsingGETParamsGenre `form:"genre,omitempty" json:"genre,omitempty"`

	// ModType MOD 类型 （ 0.个人战 1. 团队战 2. PARTY ）
	ModType *GetUgcInfoListUsingGETParamsModType `form:"modType,omitempty" json:"modType,omitempty"`

	// Sorting 排序类型  1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7.play数量 8.热度值
	Sorting *GetUgcInfoListUsingGETParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetUgcInfoListUsingGETParamsType defines parameters for GetUgcInfoListUsingGET.
type GetUgcInfoListUsingGETParamsType []int

// GetUgcInfoListUsingGETParamsGenre defines parameters for GetUgcInfoListUsingGET.
type GetUgcInfoListUsingGETParamsGenre string

// GetUgcInfoListUsingGETParamsModType defines parameters for GetUgcInfoListUsingGET.
type GetUgcInfoListUsingGETParamsModType int

// GetUgcInfoListUsingGETParamsSorting defines parameters for GetUgcInfoListUsingGET.
type GetUgcInfoListUsingGETParamsSorting int

// CreateUGCUsingPOSTMultipartBody defines parameters for CreateUGCUsingPOST.
type CreateUGCUsingPOSTMultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// GameId gameId (224:手工星球)
	GameId int32 `json:"gameId"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre CreateUGCUsingPOSTMultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType CreateUGCUsingPOSTMultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType CreateUGCUsingPOSTMultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// CreateUGCUsingPOSTParams defines parameters for CreateUGCUsingPOST.
type CreateUGCUsingPOSTParams struct {
	// MemberNo 用户编号
	MemberNo *int64 `form:"memberNo,omitempty" json:"memberNo,omitempty"`
}

// CreateUGCUsingPOSTMultipartBodyGenre defines parameters for CreateUGCUsingPOST.
type CreateUGCUsingPOSTMultipartBodyGenre string

// CreateUGCUsingPOSTMultipartBodyModType defines parameters for CreateUGCUsingPOST.
type CreateUGCUsingPOSTMultipartBodyModType int32

// CreateUGCUsingPOSTMultipartBodyUgcType defines parameters for CreateUGCUsingPOST.
type CreateUGCUsingPOSTMultipartBodyUgcType int32

// DownloadCountIncreaseUsingPOSTParams defines parameters for DownloadCountIncreaseUsingPOST.
type DownloadCountIncreaseUsingPOSTParams struct {
	// UgcId UGC ID
	UgcId string `form:"ugcId" json:"ugcId"`
}

// UploadFileUsingPOSTMultipartBody defines parameters for UploadFileUsingPOST.
type UploadFileUsingPOSTMultipartBody struct {
	// File 上传文件
	File openapi_types.File `json:"file"`
}

// UploadFileUsingPOSTParams defines parameters for UploadFileUsingPOST.
type UploadFileUsingPOSTParams struct {
	// IsPrivate 是否公开显示
	IsPrivate *bool `form:"isPrivate,omitempty" json:"isPrivate,omitempty"`

	// GameId gameId （手工星球:224）
	GameId int `form:"gameId" json:"gameId"`

	// FileType 文件类型 RESOURCE/IMAGE/VIDEO
	FileType UploadFileUsingPOSTParamsFileType `form:"fileType" json:"fileType"`

	// MemberNo memberNo
	MemberNo int64 `form:"memberNo" json:"memberNo"`

	// Module 所属模块（banner/arcade ...., 选填项）
	Module *string `form:"module,omitempty" json:"module,omitempty"`

	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *UploadFileUsingPOSTParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// UploadFileUsingPOSTParamsFileType defines parameters for UploadFileUsingPOST.
type UploadFileUsingPOSTParamsFileType string

// UploadFileUsingPOSTParamsDevice defines parameters for UploadFileUsingPOST.
type UploadFileUsingPOSTParamsDevice string

// GetUgcStatisticalUsingGETParams defines parameters for GetUgcStatisticalUsingGET.
type GetUgcStatisticalUsingGETParams struct {
	// MemberNo 用户编号
	MemberNo int64 `form:"memberNo" json:"memberNo"`
}

// GetUgcInfoUsingGETParams defines parameters for GetUgcInfoUsingGET.
type GetUgcInfoUsingGETParams struct {
	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *GetUgcInfoUsingGETParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// GetUgcInfoUsingGETParamsDevice defines parameters for GetUgcInfoUsingGET.
type GetUgcInfoUsingGETParamsDevice string

// InternalUgcUpdateUsingPOST1MultipartBody defines parameters for InternalUgcUpdateUsingPOST1.
type InternalUgcUpdateUsingPOST1MultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// GameId gameId (224:手工星球)
	GameId int32 `json:"gameId"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre InternalUgcUpdateUsingPOST1MultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType InternalUgcUpdateUsingPOST1MultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType InternalUgcUpdateUsingPOST1MultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// InternalUgcUpdateUsingPOST1Params defines parameters for InternalUgcUpdateUsingPOST1.
type InternalUgcUpdateUsingPOST1Params struct {
	// MemberNo memberNo
	MemberNo int64 `form:"memberNo" json:"memberNo"`
}

// InternalUgcUpdateUsingPOST1MultipartBodyGenre defines parameters for InternalUgcUpdateUsingPOST1.
type InternalUgcUpdateUsingPOST1MultipartBodyGenre string

// InternalUgcUpdateUsingPOST1MultipartBodyModType defines parameters for InternalUgcUpdateUsingPOST1.
type InternalUgcUpdateUsingPOST1MultipartBodyModType int32

// InternalUgcUpdateUsingPOST1MultipartBodyUgcType defines parameters for InternalUgcUpdateUsingPOST1.
type InternalUgcUpdateUsingPOST1MultipartBodyUgcType int32

// InternalUgcUpdateUsingPUTMultipartBody defines parameters for InternalUgcUpdateUsingPUT.
type InternalUgcUpdateUsingPUTMultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// GameId gameId (224:手工星球)
	GameId int32 `json:"gameId"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre InternalUgcUpdateUsingPUTMultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType InternalUgcUpdateUsingPUTMultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType InternalUgcUpdateUsingPUTMultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// InternalUgcUpdateUsingPUTParams defines parameters for InternalUgcUpdateUsingPUT.
type InternalUgcUpdateUsingPUTParams struct {
	// MemberNo memberNo
	MemberNo int64 `form:"memberNo" json:"memberNo"`
}

// InternalUgcUpdateUsingPUTMultipartBodyGenre defines parameters for InternalUgcUpdateUsingPUT.
type InternalUgcUpdateUsingPUTMultipartBodyGenre string

// InternalUgcUpdateUsingPUTMultipartBodyModType defines parameters for InternalUgcUpdateUsingPUT.
type InternalUgcUpdateUsingPUTMultipartBodyModType int32

// InternalUgcUpdateUsingPUTMultipartBodyUgcType defines parameters for InternalUgcUpdateUsingPUT.
type InternalUgcUpdateUsingPUTMultipartBodyUgcType int32

// UgcInternalResourceDownloadUsingPOSTParams defines parameters for UgcInternalResourceDownloadUsingPOST.
type UgcInternalResourceDownloadUsingPOSTParams struct {
	// MemberNo memberNo
	MemberNo int64 `form:"memberNo" json:"memberNo"`

	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *UgcInternalResourceDownloadUsingPOSTParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// UgcInternalResourceDownloadUsingPOSTParamsDevice defines parameters for UgcInternalResourceDownloadUsingPOST.
type UgcInternalResourceDownloadUsingPOSTParamsDevice string

// UgcInternalGetUsingPOSTFormdataBody defines parameters for UgcInternalGetUsingPOST.
type UgcInternalGetUsingPOSTFormdataBody struct {
	// MemberNo 用户编号 / Member No
	MemberNo int64 `form:"memberNo" json:"memberNo"`

	// Origin 来源 WEB/VULCANUS/SGXQ
	Origin *UgcInternalGetUsingPOSTFormdataBodyOrigin `form:"origin,omitempty" json:"origin,omitempty"`
}

// UgcInternalGetUsingPOSTParams defines parameters for UgcInternalGetUsingPOST.
type UgcInternalGetUsingPOSTParams struct {
	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *UgcInternalGetUsingPOSTParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// UgcInternalGetUsingPOSTParamsDevice defines parameters for UgcInternalGetUsingPOST.
type UgcInternalGetUsingPOSTParamsDevice string

// UgcInternalGetUsingPOSTFormdataBodyOrigin defines parameters for UgcInternalGetUsingPOST.
type UgcInternalGetUsingPOSTFormdataBodyOrigin string

// UgcInternalPlayUsingPOSTParams defines parameters for UgcInternalPlayUsingPOST.
type UgcInternalPlayUsingPOSTParams struct {
	// MemberNo memberNo
	MemberNo int64 `form:"memberNo" json:"memberNo"`
}

// UgcVersionCreateUsingPOSTMultipartBody defines parameters for UgcVersionCreateUsingPOST.
type UgcVersionCreateUsingPOSTMultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre UgcVersionCreateUsingPOSTMultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType UgcVersionCreateUsingPOSTMultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType UgcVersionCreateUsingPOSTMultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// UgcVersionCreateUsingPOSTParams defines parameters for UgcVersionCreateUsingPOST.
type UgcVersionCreateUsingPOSTParams struct {
	// MemberNo member NO
	MemberNo int64 `form:"memberNo" json:"memberNo"`
}

// UgcVersionCreateUsingPOSTMultipartBodyGenre defines parameters for UgcVersionCreateUsingPOST.
type UgcVersionCreateUsingPOSTMultipartBodyGenre string

// UgcVersionCreateUsingPOSTMultipartBodyModType defines parameters for UgcVersionCreateUsingPOST.
type UgcVersionCreateUsingPOSTMultipartBodyModType int32

// UgcVersionCreateUsingPOSTMultipartBodyUgcType defines parameters for UgcVersionCreateUsingPOST.
type UgcVersionCreateUsingPOSTMultipartBodyUgcType int32

// InternalUpdateVersionUsingPOSTMultipartBody defines parameters for InternalUpdateVersionUsingPOST.
type InternalUpdateVersionUsingPOSTMultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre InternalUpdateVersionUsingPOSTMultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType InternalUpdateVersionUsingPOSTMultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType InternalUpdateVersionUsingPOSTMultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// InternalUpdateVersionUsingPOSTMultipartBodyGenre defines parameters for InternalUpdateVersionUsingPOST.
type InternalUpdateVersionUsingPOSTMultipartBodyGenre string

// InternalUpdateVersionUsingPOSTMultipartBodyModType defines parameters for InternalUpdateVersionUsingPOST.
type InternalUpdateVersionUsingPOSTMultipartBodyModType int32

// InternalUpdateVersionUsingPOSTMultipartBodyUgcType defines parameters for InternalUpdateVersionUsingPOST.
type InternalUpdateVersionUsingPOSTMultipartBodyUgcType int32

// InternalUpdateVersionUsingPUTMultipartBody defines parameters for InternalUpdateVersionUsingPUT.
type InternalUpdateVersionUsingPUTMultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre InternalUpdateVersionUsingPUTMultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType InternalUpdateVersionUsingPUTMultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType InternalUpdateVersionUsingPUTMultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// InternalUpdateVersionUsingPUTMultipartBodyGenre defines parameters for InternalUpdateVersionUsingPUT.
type InternalUpdateVersionUsingPUTMultipartBodyGenre string

// InternalUpdateVersionUsingPUTMultipartBodyModType defines parameters for InternalUpdateVersionUsingPUT.
type InternalUpdateVersionUsingPUTMultipartBodyModType int32

// InternalUpdateVersionUsingPUTMultipartBodyUgcType defines parameters for InternalUpdateVersionUsingPUT.
type InternalUpdateVersionUsingPUTMultipartBodyUgcType int32

// UgcVersionReviewUsingPOSTParams defines parameters for UgcVersionReviewUsingPOST.
type UgcVersionReviewUsingPOSTParams struct {
	// Message 玩家审核说明
	Message *string `form:"message,omitempty" json:"message,omitempty"`

	// MemberNo memberNo
	MemberNo int64 `json:"memberNo"`
}

// GetUGCListUsingGETParams defines parameters for GetUGCListUsingGET.
type GetUGCListUsingGETParams struct {
	// UgcIds UGC ID List
	UgcIds []string `form:"ugcIds" json:"ugcIds"`
}

// MyTagUsingGETParams defines parameters for MyTagUsingGET.
type MyTagUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-30 ）
	Size int64 `form:"size" json:"size"`
}

// TagListUsingGET1Params defines parameters for TagListUsingGET1.
type TagListUsingGET1Params struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// TagType 标签类型
	TagType *string `form:"tagType,omitempty" json:"tagType,omitempty"`

	// Brand 2 .官方  1. 玩家
	Brand *TagListUsingGET1ParamsBrand `form:"brand,omitempty" json:"brand,omitempty"`
}

// TagListUsingGET1ParamsBrand defines parameters for TagListUsingGET1.
type TagListUsingGET1ParamsBrand int

// CreateUsingPOST1Params defines parameters for CreateUsingPOST1.
type CreateUsingPOST1Params struct {
	// TagName 标签名称
	TagName string `form:"tagName" json:"tagName"`

	// TagType 标签类型
	TagType []string `form:"tagType" json:"tagType"`
}

// TagOperatingUsingGETParams defines parameters for TagOperatingUsingGET.
type TagOperatingUsingGETParams struct {
	// Offset 页码
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Size 每页条目数 （ 1-100 ）
	Size *int64 `form:"size,omitempty" json:"size,omitempty"`

	// Visible 是否显示
	Visible *bool `form:"visible,omitempty" json:"visible,omitempty"`

	// Brand 1.玩家创建  2. 官方创建
	Brand *TagOperatingUsingGETParamsBrand `form:"brand,omitempty" json:"brand,omitempty"`
}

// TagOperatingUsingGETParamsBrand defines parameters for TagOperatingUsingGET.
type TagOperatingUsingGETParamsBrand int

// TagSearchUsingGETParams defines parameters for TagSearchUsingGET.
type TagSearchUsingGETParams struct {
	// Brand 1.玩家创建  2. 官方创建
	Brand *TagSearchUsingGETParamsBrand `form:"brand,omitempty" json:"brand,omitempty"`

	// TagType 标签类型
	TagType *string `form:"tagType,omitempty" json:"tagType,omitempty"`

	// SearchName 搜索的内容
	SearchName string `form:"searchName" json:"searchName"`

	// Offset 页码
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Size 每页条目数 （ 1-30 ）
	Size *int64 `form:"size,omitempty" json:"size,omitempty"`
}

// TagSearchUsingGETParamsBrand defines parameters for TagSearchUsingGET.
type TagSearchUsingGETParamsBrand int

// GetNewUgcListUsingGETParams defines parameters for GetNewUgcListUsingGET.
type GetNewUgcListUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// GameId 游戏编号（ SGXQ : 224 ）
	GameId int `form:"gameId" json:"gameId"`

	// Type UGC 类型  ：{1. Asset 10. 玩法地图  11.官方玩法地图  12.官方玩法地图 13.系统玩法地图 20. 设计图 21.官方设计图  22. Quest  30.坐骑 }
	Type *GetNewUgcListUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Genre UGC 分类 / UGC MOD Category  { CASUAL BATTLE FPS GUNFIGHT RUNNING} UGC DESIGN Category { DECORATION LANDMARK BUILDING PIXEL CIRCUIT RESOURCE}
	Genre *GetNewUgcListUsingGETParamsGenre `form:"genre,omitempty" json:"genre,omitempty"`

	// ModType MOD 类型 0.个人战 1. 团队战 2. PARTY
	ModType *GetNewUgcListUsingGETParamsModType `form:"modType,omitempty" json:"modType,omitempty"`

	// Sorting 排序类型  1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7.play数量 8.热度值
	Sorting *GetNewUgcListUsingGETParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetNewUgcListUsingGETParamsType defines parameters for GetNewUgcListUsingGET.
type GetNewUgcListUsingGETParamsType []int

// GetNewUgcListUsingGETParamsGenre defines parameters for GetNewUgcListUsingGET.
type GetNewUgcListUsingGETParamsGenre string

// GetNewUgcListUsingGETParamsModType defines parameters for GetNewUgcListUsingGET.
type GetNewUgcListUsingGETParamsModType int

// GetNewUgcListUsingGETParamsSorting defines parameters for GetNewUgcListUsingGET.
type GetNewUgcListUsingGETParamsSorting int

// CreateUsingPOST2MultipartBody defines parameters for CreateUsingPOST2.
type CreateUsingPOST2MultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// GameId gameId (224:手工星球)
	GameId int32 `json:"gameId"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre CreateUsingPOST2MultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType CreateUsingPOST2MultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType CreateUsingPOST2MultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// CreateUsingPOST2MultipartBodyGenre defines parameters for CreateUsingPOST2.
type CreateUsingPOST2MultipartBodyGenre string

// CreateUsingPOST2MultipartBodyModType defines parameters for CreateUsingPOST2.
type CreateUsingPOST2MultipartBodyModType int32

// CreateUsingPOST2MultipartBodyUgcType defines parameters for CreateUsingPOST2.
type CreateUsingPOST2MultipartBodyUgcType int32

// GetMemberUGCPublishedDynamicUsingGETParams defines parameters for GetMemberUGCPublishedDynamicUsingGET.
type GetMemberUGCPublishedDynamicUsingGETParams struct {
	// MemberNo 用户编号
	MemberNo []int64 `form:"memberNo" json:"memberNo"`

	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// Type 类型 ：{ UGC_MOD(玩法地图) / UGC_DESIGN(设计图) / ALL(全部) }
	Type *GetMemberUGCPublishedDynamicUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetMemberUGCPublishedDynamicUsingGETParamsType defines parameters for GetMemberUGCPublishedDynamicUsingGET.
type GetMemberUGCPublishedDynamicUsingGETParamsType string

// GenreListUsingGET1Params defines parameters for GenreListUsingGET1.
type GenreListUsingGET1Params struct {
	// Type UGC_MOD(玩法地图) / UGC_DESIGN(设计图) / UGC_ASSET (ORE) / UGC_MOUNT(坐骑)/ALL
	Type *GenreListUsingGET1ParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GenreListUsingGET1ParamsType defines parameters for GenreListUsingGET1.
type GenreListUsingGET1ParamsType string

// UgcGetRecordsListUsingGETParams defines parameters for UgcGetRecordsListUsingGET.
type UgcGetRecordsListUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// Genre UGC 分类
	Genre *UgcGetRecordsListUsingGETParamsGenre `form:"genre,omitempty" json:"genre,omitempty"`

	// Origin 来源 WEB/VULCANUS/SGXQ
	Origin *UgcGetRecordsListUsingGETParamsOrigin `form:"origin,omitempty" json:"origin,omitempty"`
}

// UgcGetRecordsListUsingGETParamsGenre defines parameters for UgcGetRecordsListUsingGET.
type UgcGetRecordsListUsingGETParamsGenre string

// UgcGetRecordsListUsingGETParamsOrigin defines parameters for UgcGetRecordsListUsingGET.
type UgcGetRecordsListUsingGETParamsOrigin string

// GetUGCDynamicUsingGETParams defines parameters for GetUGCDynamicUsingGET.
type GetUGCDynamicUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// Type 类型 ：{ UGC_MOD(玩法地图) / UGC_DESIGN(设计图) / ALL(全部) }
	Type *GetUGCDynamicUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetUGCDynamicUsingGETParamsType defines parameters for GetUGCDynamicUsingGET.
type GetUGCDynamicUsingGETParamsType string

// DeleteMyUGCDynamicUsingDELETEParams defines parameters for DeleteMyUGCDynamicUsingDELETE.
type DeleteMyUGCDynamicUsingDELETEParams struct {
	// LogId 日志ID
	LogId string `form:"logId" json:"logId"`
}

// DeleteMyUGCDynamicUsingPOSTParams defines parameters for DeleteMyUGCDynamicUsingPOST.
type DeleteMyUGCDynamicUsingPOSTParams struct {
	// LogId 日志ID
	LogId string `form:"logId" json:"logId"`
}

// GetMyUgcListUsingGETParams defines parameters for GetMyUgcListUsingGET.
type GetMyUgcListUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// GameId 游戏编号（ SGXQ : 224 ）
	GameId *int `form:"gameId,omitempty" json:"gameId,omitempty"`

	// Type UGC 类型  ：{1. Asset  10. 玩法地图 / MOD  11.官方玩法地图 12.官方玩法地图 / InAPP MOD 13.系统玩法地图 / System MOD 20. 设计图  21.官方设计图  22. Quest   30.坐骑}
	Type *GetMyUgcListUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Status 状态 ： { published （发布） review（待审核） reviewing （审核中） failed （审核不通过） rejected（拒绝） }
	Status *GetMyUgcListUsingGETParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Sorting 排序类型  1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7.play数量 8.热度值
	Sorting *GetMyUgcListUsingGETParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetMyUgcListUsingGETParamsType defines parameters for GetMyUgcListUsingGET.
type GetMyUgcListUsingGETParamsType []int

// GetMyUgcListUsingGETParamsStatus defines parameters for GetMyUgcListUsingGET.
type GetMyUgcListUsingGETParamsStatus string

// GetMyUgcListUsingGETParamsSorting defines parameters for GetMyUgcListUsingGET.
type GetMyUgcListUsingGETParamsSorting int

// GetUgcV21UgcMyugcSearchParams defines parameters for GetUgcV21UgcMyugcSearch.
type GetUgcV21UgcMyugcSearchParams struct {
	// Keywords 搜索关键词
	Keywords string `form:"keywords" json:"keywords"`

	// Offset 页码 (1 开始)
	Offset int `form:"offset" json:"offset"`

	// Size 页大小
	Size int `form:"size" json:"size"`

	// UgcType UGC 类型  ：{1. Asset  10. 玩法地图 / MOD  11.官方玩法地图  12.官方玩法地图 / InAPP MOD 13.系统玩法地图 / System MOD 20. 设计图 21.官方设计图  22. Quest  30.坐骑}
	UgcType *GetUgcV21UgcMyugcSearchParamsUgcType `form:"ugcType,omitempty" json:"ugcType,omitempty"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre *GetUgcV21UgcMyugcSearchParamsGenre `form:"genre,omitempty" json:"genre,omitempty"`

	// Sorting 排序方式【倒序】（1：收藏时间）
	Sorting *int `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetUgcV21UgcMyugcSearchParamsUgcType defines parameters for GetUgcV21UgcMyugcSearch.
type GetUgcV21UgcMyugcSearchParamsUgcType int

// GetUgcV21UgcMyugcSearchParamsGenre defines parameters for GetUgcV21UgcMyugcSearch.
type GetUgcV21UgcMyugcSearchParamsGenre string

// RecentPlayListUsingGETParams defines parameters for RecentPlayListUsingGET.
type RecentPlayListUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// Sorting 排序类型  1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7.play数量 8.热度值
	Sorting *RecentPlayListUsingGETParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// RecentPlayListUsingGETParamsSorting defines parameters for RecentPlayListUsingGET.
type RecentPlayListUsingGETParamsSorting int

// GetRecordsListUsingGETParams defines parameters for GetRecordsListUsingGET.
type GetRecordsListUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// Type 类型 ：{ UGC_MOD(玩法地图) / UGC_DESIGN(设计图) / ALL(全部) }
	Type *GetRecordsListUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetRecordsListUsingGETParamsType defines parameters for GetRecordsListUsingGET.
type GetRecordsListUsingGETParamsType string

// MyRecordsEmptyUsingDELETEParams defines parameters for MyRecordsEmptyUsingDELETE.
type MyRecordsEmptyUsingDELETEParams struct {
	// Type 类型 ：{ UGC_MOD(玩法地图) / UGC_DESIGN(设计图) / ALL(全部) }
	Type *MyRecordsEmptyUsingDELETEParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// MyRecordsEmptyUsingDELETEParamsType defines parameters for MyRecordsEmptyUsingDELETE.
type MyRecordsEmptyUsingDELETEParamsType string

// MyRecordsEmptyUsingPOSTParams defines parameters for MyRecordsEmptyUsingPOST.
type MyRecordsEmptyUsingPOSTParams struct {
	// Type 类型 ：{ UGC_MOD(玩法地图) / UGC_DESIGN(设计图) / ALL(全部) }
	Type *MyRecordsEmptyUsingPOSTParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// MyRecordsEmptyUsingPOSTParamsType defines parameters for MyRecordsEmptyUsingPOST.
type MyRecordsEmptyUsingPOSTParamsType string

// SearchUsingGET1Params defines parameters for SearchUsingGET1.
type SearchUsingGET1Params struct {
	// GameId 游戏编号（ SGXQ : 224 ）
	GameId *int `form:"gameId,omitempty" json:"gameId,omitempty"`

	// UgcType UGC 类型 ：{1. Asset  10. 玩法地图 / MOD  11.官方玩法地图  12.官方玩法地图 / InAPP MOD 13.系统玩法地图 / System MOD 20. 设计图  21.官方设计图 22. Quest 30. 坐骑 }
	UgcType *SearchUsingGET1ParamsUgcType `form:"ugcType,omitempty" json:"ugcType,omitempty"`

	// Genre UGC 分类 / UGC MOD Category  { CASUAL BATTLE FPS GUNFIGHT RUNNING} UGC DESIGN Category { DECORATION LANDMARK BUILDING PIXEL CIRCUIT RESOURCE}
	Genre *SearchUsingGET1ParamsGenre `form:"genre,omitempty" json:"genre,omitempty"`

	// SearchTarget 搜索对象 ： 标题(title) or 内容(content) or 标签(tag) or 作者名（nickname）
	SearchTarget *SearchUsingGET1ParamsSearchTarget `form:"searchTarget,omitempty" json:"searchTarget,omitempty"`

	// SearchName 搜索的内容
	SearchName string `form:"searchName" json:"searchName"`

	// Sorting 排序类型  1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7.play数量 8.热度值
	Sorting *SearchUsingGET1ParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`

	// Offset 页码
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`

	// Size 每页条目数 （ 1-30 ）
	Size *int64 `form:"size,omitempty" json:"size,omitempty"`
}

// SearchUsingGET1ParamsUgcType defines parameters for SearchUsingGET1.
type SearchUsingGET1ParamsUgcType []int

// SearchUsingGET1ParamsGenre defines parameters for SearchUsingGET1.
type SearchUsingGET1ParamsGenre string

// SearchUsingGET1ParamsSearchTarget defines parameters for SearchUsingGET1.
type SearchUsingGET1ParamsSearchTarget string

// SearchUsingGET1ParamsSorting defines parameters for SearchUsingGET1.
type SearchUsingGET1ParamsSorting int

// UploadUsingPOSTMultipartBody defines parameters for UploadUsingPOST.
type UploadUsingPOSTMultipartBody struct {
	// File 上传文件(ugc file or image)
	File openapi_types.File `json:"file"`
}

// UploadUsingPOSTParams defines parameters for UploadUsingPOST.
type UploadUsingPOSTParams struct {
	// FileType 文件类型RESOURCE/IMAGE/VIDEO
	FileType UploadUsingPOSTParamsFileType `form:"fileType" json:"fileType"`

	// GameId gameId (SGXQ：224)
	GameId *int `form:"gameId,omitempty" json:"gameId,omitempty"`

	// IsPrivate 文件是否私有；true（私有）/ false（公开）
	IsPrivate *bool `form:"isPrivate,omitempty" json:"isPrivate,omitempty"`

	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *UploadUsingPOSTParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// UploadUsingPOSTParamsFileType defines parameters for UploadUsingPOST.
type UploadUsingPOSTParamsFileType string

// UploadUsingPOSTParamsDevice defines parameters for UploadUsingPOST.
type UploadUsingPOSTParamsDevice string

// GetUgcStatisticalUsingGET1Params defines parameters for GetUgcStatisticalUsingGET1.
type GetUgcStatisticalUsingGET1Params struct {
	// MemberNo 用户编号 / memberNo
	MemberNo int64 `form:"memberNo" json:"memberNo"`
}

// GetMemberFavoriteListUsingGETParams defines parameters for GetMemberFavoriteListUsingGET.
type GetMemberFavoriteListUsingGETParams struct {
	// Type 类型 ： {UGC_MOD(玩法地图)  UGC_DESIGN (设计图) / ALL(设计图/玩法地图) }
	Type *GetMemberFavoriteListUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// Sorting 排序类型  1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7.play数量 8.热度值
	Sorting *int `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetMemberFavoriteListUsingGETParamsType defines parameters for GetMemberFavoriteListUsingGET.
type GetMemberFavoriteListUsingGETParamsType string

// GetMemberUGCListUsingGETParams defines parameters for GetMemberUGCListUsingGET.
type GetMemberUGCListUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`

	// GameId 游戏编号（ SGXQ : 224 ）
	GameId *int `form:"gameId,omitempty" json:"gameId,omitempty"`

	// Type UGC 类型  ：{1. Asset  10. 玩法地图 / MOD  11.官方玩法地图  12.官方玩法地图 / InAPP MOD 13.系统玩法地图 / System MOD 20. 设计图 21.官方设计图  22. Quest  30.坐骑}
	Type *GetMemberUGCListUsingGETParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Sorting 排序类型  1. 时间(发布时间) 2. 评分  3.下载数 4.阅读数 5.分享数 6. 评论数量 7.play数量 8.热度值
	Sorting *GetMemberUGCListUsingGETParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetMemberUGCListUsingGETParamsType defines parameters for GetMemberUGCListUsingGET.
type GetMemberUGCListUsingGETParamsType []int

// GetMemberUGCListUsingGETParamsSorting defines parameters for GetMemberUGCListUsingGET.
type GetMemberUGCListUsingGETParamsSorting int

// UgcInfoUsingGET1Params defines parameters for UgcInfoUsingGET1.
type UgcInfoUsingGET1Params struct {
	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *UgcInfoUsingGET1ParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// UgcInfoUsingGET1ParamsDevice defines parameters for UgcInfoUsingGET1.
type UgcInfoUsingGET1ParamsDevice string

// UgcUpdateUsingPOST1MultipartBody defines parameters for UgcUpdateUsingPOST1.
type UgcUpdateUsingPOST1MultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// GameId gameId (224:手工星球)
	GameId int32 `json:"gameId"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre UgcUpdateUsingPOST1MultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType UgcUpdateUsingPOST1MultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType UgcUpdateUsingPOST1MultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// UgcUpdateUsingPOST1MultipartBodyGenre defines parameters for UgcUpdateUsingPOST1.
type UgcUpdateUsingPOST1MultipartBodyGenre string

// UgcUpdateUsingPOST1MultipartBodyModType defines parameters for UgcUpdateUsingPOST1.
type UgcUpdateUsingPOST1MultipartBodyModType int32

// UgcUpdateUsingPOST1MultipartBodyUgcType defines parameters for UgcUpdateUsingPOST1.
type UgcUpdateUsingPOST1MultipartBodyUgcType int32

// UgcUpdateUsingPUT1MultipartBody defines parameters for UgcUpdateUsingPUT1.
type UgcUpdateUsingPUT1MultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// GameId gameId (224:手工星球)
	GameId int32 `json:"gameId"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre UgcUpdateUsingPUT1MultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType UgcUpdateUsingPUT1MultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType UgcUpdateUsingPUT1MultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// UgcUpdateUsingPUT1MultipartBodyGenre defines parameters for UgcUpdateUsingPUT1.
type UgcUpdateUsingPUT1MultipartBodyGenre string

// UgcUpdateUsingPUT1MultipartBodyModType defines parameters for UgcUpdateUsingPUT1.
type UgcUpdateUsingPUT1MultipartBodyModType int32

// UgcUpdateUsingPUT1MultipartBodyUgcType defines parameters for UgcUpdateUsingPUT1.
type UgcUpdateUsingPUT1MultipartBodyUgcType int32

// GetUgcV21UgcUgcIdDownloadParams defines parameters for GetUgcV21UgcUgcIdDownload.
type GetUgcV21UgcUgcIdDownloadParams struct {
	VersionId *VersionId `form:"versionId,omitempty" json:"versionId,omitempty"`

	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device    *GetUgcV21UgcUgcIdDownloadParamsDevice `form:"device,omitempty" json:"device,omitempty"`
	Timestamp *Timestamp                             `form:"timestamp,omitempty" json:"timestamp,omitempty"`
}

// GetUgcV21UgcUgcIdDownloadParamsDevice defines parameters for GetUgcV21UgcUgcIdDownload.
type GetUgcV21UgcUgcIdDownloadParamsDevice string

// UgcResourceDownloadUsingPOSTParams defines parameters for UgcResourceDownloadUsingPOST.
type UgcResourceDownloadUsingPOSTParams struct {
	VersionId *VersionId `form:"versionId,omitempty" json:"versionId,omitempty"`

	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *UgcResourceDownloadUsingPOSTParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// UgcResourceDownloadUsingPOSTParamsDevice defines parameters for UgcResourceDownloadUsingPOST.
type UgcResourceDownloadUsingPOSTParamsDevice string

// GetUgcEvaluateUsingGETParams defines parameters for GetUgcEvaluateUsingGET.
type GetUgcEvaluateUsingGETParams struct {
	// Offset 页码
	Offset int64 `form:"offset" json:"offset"`

	// Size 每页条目数 （ 1-100 ）
	Size int64 `form:"size" json:"size"`
}

// UpdateEvaluateUsingPOSTParams defines parameters for UpdateEvaluateUsingPOST.
type UpdateEvaluateUsingPOSTParams struct {
	// Score 评分（ 1-5 ）
	Score int `form:"score" json:"score"`
}

// UpdateEvaluateUsingPUTParams defines parameters for UpdateEvaluateUsingPUT.
type UpdateEvaluateUsingPUTParams struct {
	// Score 评分（ 1-5 ）
	Score int `form:"score" json:"score"`
}

// UgcGetUsingPOSTParams defines parameters for UgcGetUsingPOST.
type UgcGetUsingPOSTParams struct {
	// Origin 来源 WEB/VULCANUS/SGXQ
	Origin *UgcGetUsingPOSTParamsOrigin `form:"origin,omitempty" json:"origin,omitempty"`

	// Device 文件所属设备： </br> Project为Assets压缩形式，可用于将 来的验收和版本控制 </br>玩法地图可选文件类型Android/IOS/Server/Project/Package 非玩法地图：Asset,设计图，坐骑等其他文件选择Package
	Device *UgcGetUsingPOSTParamsDevice `form:"device,omitempty" json:"device,omitempty"`
}

// UgcGetUsingPOSTParamsOrigin defines parameters for UgcGetUsingPOST.
type UgcGetUsingPOSTParamsOrigin string

// UgcGetUsingPOSTParamsDevice defines parameters for UgcGetUsingPOST.
type UgcGetUsingPOSTParamsDevice string

// UgcVersionCreateUsingPOST1MultipartBody defines parameters for UgcVersionCreateUsingPOST1.
type UgcVersionCreateUsingPOST1MultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre UgcVersionCreateUsingPOST1MultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType UgcVersionCreateUsingPOST1MultipartBodyModType `json:"modType"`

	// PackageChecksum UGC文件MD5值
	PackageChecksum *PackageChecksum `json:"packageChecksum,omitempty"`

	// PackageFileName UGC文件MD5值
	PackageFileName *PackageChecksum `json:"packageFileName,omitempty"`

	// PackageId UGC 文件 ID
	PackageId *PackageId `json:"packageId,omitempty"`

	// PackageInstallPath UGC文件MD5值
	PackageInstallPath *PackageInstallPath `json:"packageInstallPath,omitempty"`

	// PackageSize UGC文件大小
	PackageSize *PackageSize `json:"packageSize,omitempty"`

	// PackageValid UGC 文件自动检查结果
	PackageValid *PackageValid `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType UgcVersionCreateUsingPOST1MultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// UgcVersionCreateUsingPOST1MultipartBodyGenre defines parameters for UgcVersionCreateUsingPOST1.
type UgcVersionCreateUsingPOST1MultipartBodyGenre string

// UgcVersionCreateUsingPOST1MultipartBodyModType defines parameters for UgcVersionCreateUsingPOST1.
type UgcVersionCreateUsingPOST1MultipartBodyModType int32

// UgcVersionCreateUsingPOST1MultipartBodyUgcType defines parameters for UgcVersionCreateUsingPOST1.
type UgcVersionCreateUsingPOST1MultipartBodyUgcType int32

// UpdateVersionUsingPOST1MultipartBody defines parameters for UpdateVersionUsingPOST1.
type UpdateVersionUsingPOST1MultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre UpdateVersionUsingPOST1MultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType UpdateVersionUsingPOST1MultipartBodyModType `json:"modType"`

	// PackageChecksum UGC 文件 MD5 值
	PackageChecksum *string `json:"packageChecksum,omitempty"`

	// PackageFileName ugc 文件名
	PackageFileName *string `json:"packageFileName,omitempty"`

	// PackageId ugc 文件名 ID
	PackageId *string `json:"packageId,omitempty"`

	// PackageInstallPath ugc 文件安装路径
	PackageInstallPath *string `json:"packageInstallPath,omitempty"`

	// PackageSize ugc 文件大小 (byte)
	PackageSize *int `json:"packageSize,omitempty"`

	// PackageValid ugc 自动检测结果
	PackageValid *bool `json:"packageValid,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType UpdateVersionUsingPOST1MultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// UpdateVersionUsingPOST1MultipartBodyGenre defines parameters for UpdateVersionUsingPOST1.
type UpdateVersionUsingPOST1MultipartBodyGenre string

// UpdateVersionUsingPOST1MultipartBodyModType defines parameters for UpdateVersionUsingPOST1.
type UpdateVersionUsingPOST1MultipartBodyModType int32

// UpdateVersionUsingPOST1MultipartBodyUgcType defines parameters for UpdateVersionUsingPOST1.
type UpdateVersionUsingPOST1MultipartBodyUgcType int32

// UpdateVersionUsingPUT1MultipartBody defines parameters for UpdateVersionUsingPUT1.
type UpdateVersionUsingPUT1MultipartBody struct {
	// ConflictConditions Conflict Conditions
	ConflictConditions *[]string `json:"conflictConditions,omitempty"`

	// Content 内容 / Content
	Content string `json:"content"`

	// Copyrights 版权信息
	Copyrights *[]string `json:"copyrights,omitempty"`

	// Genre UGC 分类 / UGC MOD Category { CASUAL、BATTLE、FPS、GUNFIGHT、RUNNING} UGC DESIGN Category { DECORATION、LANDMARK、BUILDING、PIXEL、CIRCUIT、RESOURCE}
	Genre UpdateVersionUsingPUT1MultipartBodyGenre `json:"genre"`

	// Medias medias
	Medias *[]openapi_types.File `json:"medias,omitempty"`

	// ModType MOD 类型 { 0. 个人 1.团队 2.PARTY}
	ModType UpdateVersionUsingPUT1MultipartBodyModType `json:"modType"`

	// PackageChecksum UGC 文件 MD5 值
	PackageChecksum *string `json:"packageChecksum,omitempty"`

	// PackageFileName ugc 文件名
	PackageFileName *string `json:"packageFileName,omitempty"`

	// PackageId ugc 文件名 ID
	PackageId *string `json:"packageId,omitempty"`

	// PackageInstallPath ugc 文件安装路径
	PackageInstallPath *string `json:"packageInstallPath,omitempty"`

	// PackageSize ugc 文件大小 (byte)
	PackageSize *int `json:"packageSize,omitempty"`

	// PackageValid ugc 自动检测结果
	PackageValid *bool `json:"packageValid,omitempty"`

	// Packages UGC多文件版本信息
	Packages *Packages `json:"packages,omitempty"`

	// PatchNote 更新日志
	PatchNote   *string   `json:"patchNote,omitempty"`
	Precautions *[]string `json:"precautions,omitempty"`

	// PreemptiveConditions Preemptive Conditions
	PreemptiveConditions *[]string `json:"preemptiveConditions,omitempty"`

	// Price ugc 价格
	Price *int `json:"price,omitempty"`

	// PriceType ugc 价格类型
	PriceType *int32 `json:"priceType,omitempty"`

	// SandboxMeta 游戏自定义参数 / sandbox meta
	SandboxMeta *SandboxMeta `json:"sandboxMeta,omitempty"`

	// TagList 标签ID
	TagList *[]string `json:"tagList,omitempty"`

	// Title 标题 / Title
	Title string `json:"title"`

	// UgcType UGC 类型 { 1. Asset  10. 玩法地图  11.官方玩法地图 12.官方玩法地图（InApp MOD）13.系统玩法地图（System MOD）  20.设计图 21.官方设计图 22.Quest 设计图  30.坐骑  }
	UgcType UpdateVersionUsingPUT1MultipartBodyUgcType `json:"ugcType"`

	// VersionString 玩家自定义版本
	VersionString *string `json:"versionString,omitempty"`

	// Visible 是否展示
	Visible bool `json:"visible"`
}

// UpdateVersionUsingPUT1MultipartBodyGenre defines parameters for UpdateVersionUsingPUT1.
type UpdateVersionUsingPUT1MultipartBodyGenre string

// UpdateVersionUsingPUT1MultipartBodyModType defines parameters for UpdateVersionUsingPUT1.
type UpdateVersionUsingPUT1MultipartBodyModType int32

// UpdateVersionUsingPUT1MultipartBodyUgcType defines parameters for UpdateVersionUsingPUT1.
type UpdateVersionUsingPUT1MultipartBodyUgcType int32

// UgcVersionReviewUsingPOST1Params defines parameters for UgcVersionReviewUsingPOST1.
type UgcVersionReviewUsingPOST1Params struct {
	// Message 玩家审核说明
	Message *string `form:"message,omitempty" json:"message,omitempty"`
}

// UgcVersionReviewCancelUsingPOSTParams defines parameters for UgcVersionReviewCancelUsingPOST.
type UgcVersionReviewCancelUsingPOSTParams struct {
	// Message 取消审核原因
	Message *string `form:"message,omitempty" json:"message,omitempty"`
}

// InsertHomelandUsingPOSTMultipartRequestBody defines body for InsertHomelandUsingPOST for multipart/form-data ContentType.
type InsertHomelandUsingPOSTMultipartRequestBody InsertHomelandUsingPOSTMultipartBody

// UploadHomelandFileUsingPOSTMultipartRequestBody defines body for UploadHomelandFileUsingPOST for multipart/form-data ContentType.
type UploadHomelandFileUsingPOSTMultipartRequestBody UploadHomelandFileUsingPOSTMultipartBody

// InsertHomelandUsingPOST1MultipartRequestBody defines body for InsertHomelandUsingPOST1 for multipart/form-data ContentType.
type InsertHomelandUsingPOST1MultipartRequestBody InsertHomelandUsingPOST1MultipartBody

// UploadHomelandFileUsingPOST1MultipartRequestBody defines body for UploadHomelandFileUsingPOST1 for multipart/form-data ContentType.
type UploadHomelandFileUsingPOST1MultipartRequestBody UploadHomelandFileUsingPOST1MultipartBody

// CreateUGCUsingPOSTMultipartRequestBody defines body for CreateUGCUsingPOST for multipart/form-data ContentType.
type CreateUGCUsingPOSTMultipartRequestBody CreateUGCUsingPOSTMultipartBody

// GetSimilarModUsingPOSTJSONRequestBody defines body for GetSimilarModUsingPOST for application/json ContentType.
type GetSimilarModUsingPOSTJSONRequestBody = UgcSimilarModRequest

// UploadFileUsingPOSTMultipartRequestBody defines body for UploadFileUsingPOST for multipart/form-data ContentType.
type UploadFileUsingPOSTMultipartRequestBody UploadFileUsingPOSTMultipartBody

// InternalUgcUpdateUsingPOST1MultipartRequestBody defines body for InternalUgcUpdateUsingPOST1 for multipart/form-data ContentType.
type InternalUgcUpdateUsingPOST1MultipartRequestBody InternalUgcUpdateUsingPOST1MultipartBody

// InternalUgcUpdateUsingPUTMultipartRequestBody defines body for InternalUgcUpdateUsingPUT for multipart/form-data ContentType.
type InternalUgcUpdateUsingPUTMultipartRequestBody InternalUgcUpdateUsingPUTMultipartBody

// UgcInternalGetUsingPOSTFormdataRequestBody defines body for UgcInternalGetUsingPOST for application/x-www-form-urlencoded ContentType.
type UgcInternalGetUsingPOSTFormdataRequestBody UgcInternalGetUsingPOSTFormdataBody

// UgcVersionCreateUsingPOSTMultipartRequestBody defines body for UgcVersionCreateUsingPOST for multipart/form-data ContentType.
type UgcVersionCreateUsingPOSTMultipartRequestBody UgcVersionCreateUsingPOSTMultipartBody

// InternalUpdateVersionUsingPOSTMultipartRequestBody defines body for InternalUpdateVersionUsingPOST for multipart/form-data ContentType.
type InternalUpdateVersionUsingPOSTMultipartRequestBody InternalUpdateVersionUsingPOSTMultipartBody

// InternalUpdateVersionUsingPUTMultipartRequestBody defines body for InternalUpdateVersionUsingPUT for multipart/form-data ContentType.
type InternalUpdateVersionUsingPUTMultipartRequestBody InternalUpdateVersionUsingPUTMultipartBody

// UpdateUsingPOSTJSONRequestBody defines body for UpdateUsingPOST for application/json ContentType.
type UpdateUsingPOSTJSONRequestBody = UgcTagRequestBody

// UpdateUsingPUTJSONRequestBody defines body for UpdateUsingPUT for application/json ContentType.
type UpdateUsingPUTJSONRequestBody = UgcTagRequestBody

// CreateUsingPOST2MultipartRequestBody defines body for CreateUsingPOST2 for multipart/form-data ContentType.
type CreateUsingPOST2MultipartRequestBody CreateUsingPOST2MultipartBody

// InsertUGCReportUsingPOSTJSONRequestBody defines body for InsertUGCReportUsingPOST for application/json ContentType.
type InsertUGCReportUsingPOSTJSONRequestBody = UgcReportRequest

// GetSimilarModUsingPOST1JSONRequestBody defines body for GetSimilarModUsingPOST1 for application/json ContentType.
type GetSimilarModUsingPOST1JSONRequestBody = UgcSimilarModRequest

// UploadUsingPOSTMultipartRequestBody defines body for UploadUsingPOST for multipart/form-data ContentType.
type UploadUsingPOSTMultipartRequestBody UploadUsingPOSTMultipartBody

// UgcUpdateUsingPOST1MultipartRequestBody defines body for UgcUpdateUsingPOST1 for multipart/form-data ContentType.
type UgcUpdateUsingPOST1MultipartRequestBody UgcUpdateUsingPOST1MultipartBody

// UgcUpdateUsingPUT1MultipartRequestBody defines body for UgcUpdateUsingPUT1 for multipart/form-data ContentType.
type UgcUpdateUsingPUT1MultipartRequestBody UgcUpdateUsingPUT1MultipartBody

// UgcVersionCreateUsingPOST1MultipartRequestBody defines body for UgcVersionCreateUsingPOST1 for multipart/form-data ContentType.
type UgcVersionCreateUsingPOST1MultipartRequestBody UgcVersionCreateUsingPOST1MultipartBody

// UpdateVersionUsingPOST1MultipartRequestBody defines body for UpdateVersionUsingPOST1 for multipart/form-data ContentType.
type UpdateVersionUsingPOST1MultipartRequestBody UpdateVersionUsingPOST1MultipartBody

// UpdateVersionUsingPUT1MultipartRequestBody defines body for UpdateVersionUsingPUT1 for multipart/form-data ContentType.
type UpdateVersionUsingPUT1MultipartRequestBody UpdateVersionUsingPUT1MultipartBody

// ClearMODRatingUsingPOSTJSONRequestBody defines body for ClearMODRatingUsingPOST for application/json ContentType.
type ClearMODRatingUsingPOSTJSONRequestBody = GdisClearModRatingReq

// SoldOutMODAllUsingPOSTJSONRequestBody defines body for SoldOutMODAllUsingPOST for application/json ContentType.
type SoldOutMODAllUsingPOSTJSONRequestBody = GdisOutAllModReq

// SoldOutMODUsingPOSTJSONRequestBody defines body for SoldOutMODUsingPOST for application/json ContentType.
type SoldOutMODUsingPOSTJSONRequestBody = GdisSoldOutModReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBackpacksUsingGET request
	GetBackpacksUsingGET(ctx context.Context, params *GetBackpacksUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddBackpackAssetUsingPOST request
	AddBackpackAssetUsingPOST(ctx context.Context, params *AddBackpackAssetUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchBackpackAssetUsingGET request
	SearchBackpackAssetUsingGET(ctx context.Context, params *SearchBackpackAssetUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveBackpackAssetUsingDELETE request
	RemoveBackpackAssetUsingDELETE(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveBackpackAssetUsingPOST request
	RemoveBackpackAssetUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackpackAssetDownloadUsingPOST request
	BackpackAssetDownloadUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MyEvaluateUsingGET request
	MyEvaluateUsingGET(ctx context.Context, params *MyEvaluateUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateUsingPOST request
	EvaluateUsingPOST(ctx context.Context, params *EvaluateUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FavoriteListUsingGET request
	FavoriteListUsingGET(ctx context.Context, params *FavoriteListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FavoriteUsingPOST request
	FavoriteUsingPOST(ctx context.Context, params *FavoriteUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelBatchFavoriteUsingDELETE request
	DelBatchFavoriteUsingDELETE(ctx context.Context, params *DelBatchFavoriteUsingDELETEParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelBatchFavoriteUsingPOST request
	DelBatchFavoriteUsingPOST(ctx context.Context, params *DelBatchFavoriteUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcV21FavoriteSearch request
	GetUgcV21FavoriteSearch(ctx context.Context, params *GetUgcV21FavoriteSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcGameResourcesDownloadUsingPOST request
	UgcGameResourcesDownloadUsingPOST(ctx context.Context, ugcId string, params *UgcGameResourcesDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindMemberHomelandUsingGET request
	FindMemberHomelandUsingGET(ctx context.Context, params *FindMemberHomelandUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertHomelandUsingPOSTWithBody request with any body
	InsertHomelandUsingPOSTWithBody(ctx context.Context, params *InsertHomelandUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindMemberApplyRecordUsingGET request
	FindMemberApplyRecordUsingGET(ctx context.Context, params *FindMemberApplyRecordUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindHomelandsUsingGET request
	FindHomelandsUsingGET(ctx context.Context, params *FindHomelandsUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindHomelandByUgcIdUsingGET request
	FindHomelandByUgcIdUsingGET(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadHomelandFileUsingPOST request
	DownloadHomelandFileUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadHomelandFileUsingPOSTWithBody request with any body
	UploadHomelandFileUsingPOSTWithBody(ctx context.Context, ugcId string, params *UploadHomelandFileUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertHomelandUsingPOST1WithBody request with any body
	InsertHomelandUsingPOST1WithBody(ctx context.Context, params *InsertHomelandUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcV21InternalHomelandApprovalList request
	GetUgcV21InternalHomelandApprovalList(ctx context.Context, params *GetUgcV21InternalHomelandApprovalListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindMemberApplyRecordUsingGET1 request
	FindMemberApplyRecordUsingGET1(ctx context.Context, memberNo int64, params *FindMemberApplyRecordUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindMemberHomelandUsingGET1 request
	FindMemberHomelandUsingGET1(ctx context.Context, ugcId string, params *FindMemberHomelandUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadHomelandFileUsingPOST1 request
	DownloadHomelandFileUsingPOST1(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadHomelandFileUsingPOST1WithBody request with any body
	UploadHomelandFileUsingPOST1WithBody(ctx context.Context, ugcId string, params *UploadHomelandFileUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcInfoListUsingGET request
	GetUgcInfoListUsingGET(ctx context.Context, params *GetUgcInfoListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUGCUsingPOSTWithBody request with any body
	CreateUGCUsingPOSTWithBody(ctx context.Context, params *CreateUGCUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadCountIncreaseUsingPOST request
	DownloadCountIncreaseUsingPOST(ctx context.Context, params *DownloadCountIncreaseUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSimilarModUsingPOSTWithBody request with any body
	GetSimilarModUsingPOSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSimilarModUsingPOST(ctx context.Context, body GetSimilarModUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadFileUsingPOSTWithBody request with any body
	UploadFileUsingPOSTWithBody(ctx context.Context, params *UploadFileUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcStatisticalUsingGET request
	GetUgcStatisticalUsingGET(ctx context.Context, params *GetUgcStatisticalUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcInfoUsingGET request
	GetUgcInfoUsingGET(ctx context.Context, ugcId string, params *GetUgcInfoUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalUgcUpdateUsingPOST1WithBody request with any body
	InternalUgcUpdateUsingPOST1WithBody(ctx context.Context, ugcId string, params *InternalUgcUpdateUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalUgcUpdateUsingPUTWithBody request with any body
	InternalUgcUpdateUsingPUTWithBody(ctx context.Context, ugcId string, params *InternalUgcUpdateUsingPUTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalUgcUpdateUsingDELETE request
	InternalUgcUpdateUsingDELETE(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalUgcUpdateUsingPOST request
	InternalUgcUpdateUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcInternalResourceDownloadUsingPOST request
	UgcInternalResourceDownloadUsingPOST(ctx context.Context, ugcId string, params *UgcInternalResourceDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcInternalGetUsingPOSTWithBody request with any body
	UgcInternalGetUsingPOSTWithBody(ctx context.Context, ugcId string, params *UgcInternalGetUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UgcInternalGetUsingPOSTWithFormdataBody(ctx context.Context, ugcId string, params *UgcInternalGetUsingPOSTParams, body UgcInternalGetUsingPOSTFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcInternalPlayUsingPOST request
	UgcInternalPlayUsingPOST(ctx context.Context, ugcId string, params *UgcInternalPlayUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalVersionListUsingGET request
	InternalVersionListUsingGET(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcVersionCreateUsingPOSTWithBody request with any body
	UgcVersionCreateUsingPOSTWithBody(ctx context.Context, ugcId string, params *UgcVersionCreateUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalDeleteVersionUsingDELETE request
	InternalDeleteVersionUsingDELETE(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalUpdateVersionUsingPOSTWithBody request with any body
	InternalUpdateVersionUsingPOSTWithBody(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalUpdateVersionUsingPUTWithBody request with any body
	InternalUpdateVersionUsingPUTWithBody(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalDeleteVersion2UsingPOST request
	InternalDeleteVersion2UsingPOST(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcVersionReviewUsingPOST request
	UgcVersionReviewUsingPOST(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUGCListUsingGET request
	GetUGCListUsingGET(ctx context.Context, params *GetUGCListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MyTagUsingGET request
	MyTagUsingGET(ctx context.Context, params *MyTagUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcV21Tab request
	GetUgcV21Tab(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagListUsingGET1 request
	TagListUsingGET1(ctx context.Context, params *TagListUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUsingPOST1 request
	CreateUsingPOST1(ctx context.Context, params *CreateUsingPOST1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagOperatingUsingGET request
	TagOperatingUsingGET(ctx context.Context, params *TagOperatingUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagSearchUsingGET request
	TagSearchUsingGET(ctx context.Context, params *TagSearchUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUsingPOSTWithBody request with any body
	UpdateUsingPOSTWithBody(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUsingPOST(ctx context.Context, tagId string, body UpdateUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUsingPUTWithBody request with any body
	UpdateUsingPUTWithBody(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUsingPUT(ctx context.Context, tagId string, body UpdateUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewUgcListUsingGET request
	GetNewUgcListUsingGET(ctx context.Context, params *GetNewUgcListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUsingPOST2WithBody request with any body
	CreateUsingPOST2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberUGCPublishedDynamicUsingGET request
	GetMemberUGCPublishedDynamicUsingGET(ctx context.Context, params *GetMemberUGCPublishedDynamicUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenreListUsingGET1 request
	GenreListUsingGET1(ctx context.Context, params *GenreListUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcGetRecordsListUsingGET request
	UgcGetRecordsListUsingGET(ctx context.Context, params *UgcGetRecordsListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUGCDynamicUsingGET request
	GetUGCDynamicUsingGET(ctx context.Context, params *GetUGCDynamicUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMyUGCDynamicUsingDELETE request
	DeleteMyUGCDynamicUsingDELETE(ctx context.Context, params *DeleteMyUGCDynamicUsingDELETEParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMyUGCDynamicUsingPOST request
	DeleteMyUGCDynamicUsingPOST(ctx context.Context, params *DeleteMyUGCDynamicUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyUgcListUsingGET request
	GetMyUgcListUsingGET(ctx context.Context, params *GetMyUgcListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcV21UgcMyugcSearch request
	GetUgcV21UgcMyugcSearch(ctx context.Context, params *GetUgcV21UgcMyugcSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecentPlayListUsingGET request
	RecentPlayListUsingGET(ctx context.Context, params *RecentPlayListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecordsListUsingGET request
	GetRecordsListUsingGET(ctx context.Context, params *GetRecordsListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MyRecordsEmptyUsingDELETE request
	MyRecordsEmptyUsingDELETE(ctx context.Context, params *MyRecordsEmptyUsingDELETEParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MyRecordsEmptyUsingPOST request
	MyRecordsEmptyUsingPOST(ctx context.Context, params *MyRecordsEmptyUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertUGCReportUsingPOSTWithBody request with any body
	InsertUGCReportUsingPOSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertUGCReportUsingPOST(ctx context.Context, body InsertUGCReportUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchUsingGET1 request
	SearchUsingGET1(ctx context.Context, params *SearchUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSimilarModUsingPOST1WithBody request with any body
	GetSimilarModUsingPOST1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSimilarModUsingPOST1(ctx context.Context, body GetSimilarModUsingPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PretreatmentUGCSortingUsingPOST request
	PretreatmentUGCSortingUsingPOST(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadUsingPOSTWithBody request with any body
	UploadUsingPOSTWithBody(ctx context.Context, params *UploadUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcStatisticalUsingGET1 request
	GetUgcStatisticalUsingGET1(ctx context.Context, params *GetUgcStatisticalUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberFavoriteListUsingGET request
	GetMemberFavoriteListUsingGET(ctx context.Context, memberNo int64, params *GetMemberFavoriteListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberUGCListUsingGET request
	GetMemberUGCListUsingGET(ctx context.Context, memberNo int64, params *GetMemberUGCListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FileIdIsUseUsingGET request
	FileIdIsUseUsingGET(ctx context.Context, packageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelUgcUsingDELETE request
	DelUgcUsingDELETE(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcInfoUsingGET1 request
	UgcInfoUsingGET1(ctx context.Context, ugcId string, params *UgcInfoUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcUpdateUsingPOST1WithBody request with any body
	UgcUpdateUsingPOST1WithBody(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcUpdateUsingPUT1WithBody request with any body
	UgcUpdateUsingPUT1WithBody(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelUgc2UsingPOST request
	DelUgc2UsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcV21UgcUgcIdDownload request
	GetUgcV21UgcUgcIdDownload(ctx context.Context, ugcId UgcId, params *GetUgcV21UgcUgcIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcResourceDownloadUsingPOST request
	UgcResourceDownloadUsingPOST(ctx context.Context, ugcId UgcId, params *UgcResourceDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUgcEvaluateUsingGET request
	GetUgcEvaluateUsingGET(ctx context.Context, ugcId string, params *GetUgcEvaluateUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEvaluateUsingPOST request
	UpdateEvaluateUsingPOST(ctx context.Context, ugcId string, params *UpdateEvaluateUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEvaluateUsingPUT request
	UpdateEvaluateUsingPUT(ctx context.Context, ugcId string, params *UpdateEvaluateUsingPUTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateDelUsingPOST request
	EvaluateDelUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FavoriteAddUsingPOST request
	FavoriteAddUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelFavoriteUsingDELETE request
	DelFavoriteUsingDELETE(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelFavoriteUsingPOST request
	DelFavoriteUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcGetUsingPOST request
	UgcGetUsingPOST(ctx context.Context, ugcId string, params *UgcGetUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcHideUsingPOST request
	UgcHideUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcPlayUsingPOST request
	UgcPlayUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateRatingUsingGET request
	EvaluateRatingUsingGET(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcShareUsingPOST request
	UgcShareUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcShowUsingPOST request
	UgcShowUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VersionListUsingGET request
	VersionListUsingGET(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcVersionCreateUsingPOST1WithBody request with any body
	UgcVersionCreateUsingPOST1WithBody(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVersionUsingDELETE request
	DeleteVersionUsingDELETE(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVersionUsingPOST1WithBody request with any body
	UpdateVersionUsingPOST1WithBody(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVersionUsingPUT1WithBody request with any body
	UpdateVersionUsingPUT1WithBody(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVersion2UsingPOST request
	DeleteVersion2UsingPOST(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcVersionPublishUsingPOST request
	UgcVersionPublishUsingPOST(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcVersionReviewUsingPOST1 request
	UgcVersionReviewUsingPOST1(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewUsingPOST1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcVersionReviewCancelUsingPOST request
	UgcVersionReviewCancelUsingPOST(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewCancelUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClearMODRatingUsingPOSTWithBody request with any body
	ClearMODRatingUsingPOSTWithBody(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClearMODRatingUsingPOST(ctx context.Context, platformServiceType string, platformServiceId string, body ClearMODRatingUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SoldOutMODAllUsingPOSTWithBody request with any body
	SoldOutMODAllUsingPOSTWithBody(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SoldOutMODAllUsingPOST(ctx context.Context, platformServiceType string, platformServiceId string, body SoldOutMODAllUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SoldOutMODUsingPOSTWithBody request with any body
	SoldOutMODUsingPOSTWithBody(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SoldOutMODUsingPOST(ctx context.Context, platformServiceType string, platformServiceId string, body SoldOutMODUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagDelUsingDELETE request
	TagDelUsingDELETE(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UgcChooseVersionUsingPOST request
	UgcChooseVersionUsingPOST(ctx context.Context, ugcId string, versionId int32, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBackpacksUsingGET(ctx context.Context, params *GetBackpacksUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackpacksUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddBackpackAssetUsingPOST(ctx context.Context, params *AddBackpackAssetUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddBackpackAssetUsingPOSTRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchBackpackAssetUsingGET(ctx context.Context, params *SearchBackpackAssetUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchBackpackAssetUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveBackpackAssetUsingDELETE(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveBackpackAssetUsingDELETERequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveBackpackAssetUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveBackpackAssetUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackpackAssetDownloadUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackpackAssetDownloadUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MyEvaluateUsingGET(ctx context.Context, params *MyEvaluateUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMyEvaluateUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateUsingPOST(ctx context.Context, params *EvaluateUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateUsingPOSTRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FavoriteListUsingGET(ctx context.Context, params *FavoriteListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFavoriteListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FavoriteUsingPOST(ctx context.Context, params *FavoriteUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFavoriteUsingPOSTRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelBatchFavoriteUsingDELETE(ctx context.Context, params *DelBatchFavoriteUsingDELETEParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelBatchFavoriteUsingDELETERequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelBatchFavoriteUsingPOST(ctx context.Context, params *DelBatchFavoriteUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelBatchFavoriteUsingPOSTRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcV21FavoriteSearch(ctx context.Context, params *GetUgcV21FavoriteSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcV21FavoriteSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcGameResourcesDownloadUsingPOST(ctx context.Context, ugcId string, params *UgcGameResourcesDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcGameResourcesDownloadUsingPOSTRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindMemberHomelandUsingGET(ctx context.Context, params *FindMemberHomelandUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindMemberHomelandUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertHomelandUsingPOSTWithBody(ctx context.Context, params *InsertHomelandUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertHomelandUsingPOSTRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindMemberApplyRecordUsingGET(ctx context.Context, params *FindMemberApplyRecordUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindMemberApplyRecordUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindHomelandsUsingGET(ctx context.Context, params *FindHomelandsUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindHomelandsUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindHomelandByUgcIdUsingGET(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindHomelandByUgcIdUsingGETRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadHomelandFileUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadHomelandFileUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadHomelandFileUsingPOSTWithBody(ctx context.Context, ugcId string, params *UploadHomelandFileUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadHomelandFileUsingPOSTRequestWithBody(c.Server, ugcId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertHomelandUsingPOST1WithBody(ctx context.Context, params *InsertHomelandUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertHomelandUsingPOST1RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcV21InternalHomelandApprovalList(ctx context.Context, params *GetUgcV21InternalHomelandApprovalListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcV21InternalHomelandApprovalListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindMemberApplyRecordUsingGET1(ctx context.Context, memberNo int64, params *FindMemberApplyRecordUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindMemberApplyRecordUsingGET1Request(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindMemberHomelandUsingGET1(ctx context.Context, ugcId string, params *FindMemberHomelandUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindMemberHomelandUsingGET1Request(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadHomelandFileUsingPOST1(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadHomelandFileUsingPOST1Request(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadHomelandFileUsingPOST1WithBody(ctx context.Context, ugcId string, params *UploadHomelandFileUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadHomelandFileUsingPOST1RequestWithBody(c.Server, ugcId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcInfoListUsingGET(ctx context.Context, params *GetUgcInfoListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcInfoListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUGCUsingPOSTWithBody(ctx context.Context, params *CreateUGCUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUGCUsingPOSTRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadCountIncreaseUsingPOST(ctx context.Context, params *DownloadCountIncreaseUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadCountIncreaseUsingPOSTRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimilarModUsingPOSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSimilarModUsingPOSTRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimilarModUsingPOST(ctx context.Context, body GetSimilarModUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSimilarModUsingPOSTRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadFileUsingPOSTWithBody(ctx context.Context, params *UploadFileUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadFileUsingPOSTRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcStatisticalUsingGET(ctx context.Context, params *GetUgcStatisticalUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcStatisticalUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcInfoUsingGET(ctx context.Context, ugcId string, params *GetUgcInfoUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcInfoUsingGETRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUgcUpdateUsingPOST1WithBody(ctx context.Context, ugcId string, params *InternalUgcUpdateUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUgcUpdateUsingPOST1RequestWithBody(c.Server, ugcId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUgcUpdateUsingPUTWithBody(ctx context.Context, ugcId string, params *InternalUgcUpdateUsingPUTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUgcUpdateUsingPUTRequestWithBody(c.Server, ugcId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUgcUpdateUsingDELETE(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUgcUpdateUsingDELETERequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUgcUpdateUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUgcUpdateUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcInternalResourceDownloadUsingPOST(ctx context.Context, ugcId string, params *UgcInternalResourceDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcInternalResourceDownloadUsingPOSTRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcInternalGetUsingPOSTWithBody(ctx context.Context, ugcId string, params *UgcInternalGetUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcInternalGetUsingPOSTRequestWithBody(c.Server, ugcId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcInternalGetUsingPOSTWithFormdataBody(ctx context.Context, ugcId string, params *UgcInternalGetUsingPOSTParams, body UgcInternalGetUsingPOSTFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcInternalGetUsingPOSTRequestWithFormdataBody(c.Server, ugcId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcInternalPlayUsingPOST(ctx context.Context, ugcId string, params *UgcInternalPlayUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcInternalPlayUsingPOSTRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalVersionListUsingGET(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalVersionListUsingGETRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcVersionCreateUsingPOSTWithBody(ctx context.Context, ugcId string, params *UgcVersionCreateUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcVersionCreateUsingPOSTRequestWithBody(c.Server, ugcId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalDeleteVersionUsingDELETE(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalDeleteVersionUsingDELETERequest(c.Server, ugcId, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUpdateVersionUsingPOSTWithBody(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUpdateVersionUsingPOSTRequestWithBody(c.Server, ugcId, versionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUpdateVersionUsingPUTWithBody(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUpdateVersionUsingPUTRequestWithBody(c.Server, ugcId, versionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalDeleteVersion2UsingPOST(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalDeleteVersion2UsingPOSTRequest(c.Server, ugcId, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcVersionReviewUsingPOST(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcVersionReviewUsingPOSTRequest(c.Server, ugcId, versionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUGCListUsingGET(ctx context.Context, params *GetUGCListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUGCListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MyTagUsingGET(ctx context.Context, params *MyTagUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMyTagUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcV21Tab(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcV21TabRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagListUsingGET1(ctx context.Context, params *TagListUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagListUsingGET1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsingPOST1(ctx context.Context, params *CreateUsingPOST1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsingPOST1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagOperatingUsingGET(ctx context.Context, params *TagOperatingUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagOperatingUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagSearchUsingGET(ctx context.Context, params *TagSearchUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagSearchUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPOSTWithBody(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPOSTRequestWithBody(c.Server, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPOST(ctx context.Context, tagId string, body UpdateUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPOSTRequest(c.Server, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPUTWithBody(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPUTRequestWithBody(c.Server, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPUT(ctx context.Context, tagId string, body UpdateUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPUTRequest(c.Server, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewUgcListUsingGET(ctx context.Context, params *GetNewUgcListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewUgcListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsingPOST2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsingPOST2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberUGCPublishedDynamicUsingGET(ctx context.Context, params *GetMemberUGCPublishedDynamicUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberUGCPublishedDynamicUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenreListUsingGET1(ctx context.Context, params *GenreListUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenreListUsingGET1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcGetRecordsListUsingGET(ctx context.Context, params *UgcGetRecordsListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcGetRecordsListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUGCDynamicUsingGET(ctx context.Context, params *GetUGCDynamicUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUGCDynamicUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMyUGCDynamicUsingDELETE(ctx context.Context, params *DeleteMyUGCDynamicUsingDELETEParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMyUGCDynamicUsingDELETERequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMyUGCDynamicUsingPOST(ctx context.Context, params *DeleteMyUGCDynamicUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMyUGCDynamicUsingPOSTRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyUgcListUsingGET(ctx context.Context, params *GetMyUgcListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyUgcListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcV21UgcMyugcSearch(ctx context.Context, params *GetUgcV21UgcMyugcSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcV21UgcMyugcSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecentPlayListUsingGET(ctx context.Context, params *RecentPlayListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecentPlayListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecordsListUsingGET(ctx context.Context, params *GetRecordsListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecordsListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MyRecordsEmptyUsingDELETE(ctx context.Context, params *MyRecordsEmptyUsingDELETEParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMyRecordsEmptyUsingDELETERequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MyRecordsEmptyUsingPOST(ctx context.Context, params *MyRecordsEmptyUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMyRecordsEmptyUsingPOSTRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertUGCReportUsingPOSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertUGCReportUsingPOSTRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertUGCReportUsingPOST(ctx context.Context, body InsertUGCReportUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertUGCReportUsingPOSTRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchUsingGET1(ctx context.Context, params *SearchUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchUsingGET1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimilarModUsingPOST1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSimilarModUsingPOST1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimilarModUsingPOST1(ctx context.Context, body GetSimilarModUsingPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSimilarModUsingPOST1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PretreatmentUGCSortingUsingPOST(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPretreatmentUGCSortingUsingPOSTRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadUsingPOSTWithBody(ctx context.Context, params *UploadUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadUsingPOSTRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcStatisticalUsingGET1(ctx context.Context, params *GetUgcStatisticalUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcStatisticalUsingGET1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberFavoriteListUsingGET(ctx context.Context, memberNo int64, params *GetMemberFavoriteListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberFavoriteListUsingGETRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberUGCListUsingGET(ctx context.Context, memberNo int64, params *GetMemberUGCListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberUGCListUsingGETRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FileIdIsUseUsingGET(ctx context.Context, packageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFileIdIsUseUsingGETRequest(c.Server, packageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelUgcUsingDELETE(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelUgcUsingDELETERequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcInfoUsingGET1(ctx context.Context, ugcId string, params *UgcInfoUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcInfoUsingGET1Request(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcUpdateUsingPOST1WithBody(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcUpdateUsingPOST1RequestWithBody(c.Server, ugcId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcUpdateUsingPUT1WithBody(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcUpdateUsingPUT1RequestWithBody(c.Server, ugcId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelUgc2UsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelUgc2UsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcV21UgcUgcIdDownload(ctx context.Context, ugcId UgcId, params *GetUgcV21UgcUgcIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcV21UgcUgcIdDownloadRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcResourceDownloadUsingPOST(ctx context.Context, ugcId UgcId, params *UgcResourceDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcResourceDownloadUsingPOSTRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUgcEvaluateUsingGET(ctx context.Context, ugcId string, params *GetUgcEvaluateUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUgcEvaluateUsingGETRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEvaluateUsingPOST(ctx context.Context, ugcId string, params *UpdateEvaluateUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEvaluateUsingPOSTRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEvaluateUsingPUT(ctx context.Context, ugcId string, params *UpdateEvaluateUsingPUTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEvaluateUsingPUTRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateDelUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateDelUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FavoriteAddUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFavoriteAddUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelFavoriteUsingDELETE(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelFavoriteUsingDELETERequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelFavoriteUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelFavoriteUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcGetUsingPOST(ctx context.Context, ugcId string, params *UgcGetUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcGetUsingPOSTRequest(c.Server, ugcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcHideUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcHideUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcPlayUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcPlayUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateRatingUsingGET(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateRatingUsingGETRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcShareUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcShareUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcShowUsingPOST(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcShowUsingPOSTRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VersionListUsingGET(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersionListUsingGETRequest(c.Server, ugcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcVersionCreateUsingPOST1WithBody(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcVersionCreateUsingPOST1RequestWithBody(c.Server, ugcId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVersionUsingDELETE(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVersionUsingDELETERequest(c.Server, ugcId, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVersionUsingPOST1WithBody(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVersionUsingPOST1RequestWithBody(c.Server, ugcId, versionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVersionUsingPUT1WithBody(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVersionUsingPUT1RequestWithBody(c.Server, ugcId, versionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVersion2UsingPOST(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVersion2UsingPOSTRequest(c.Server, ugcId, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcVersionPublishUsingPOST(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcVersionPublishUsingPOSTRequest(c.Server, ugcId, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcVersionReviewUsingPOST1(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewUsingPOST1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcVersionReviewUsingPOST1Request(c.Server, ugcId, versionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcVersionReviewCancelUsingPOST(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewCancelUsingPOSTParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcVersionReviewCancelUsingPOSTRequest(c.Server, ugcId, versionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClearMODRatingUsingPOSTWithBody(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClearMODRatingUsingPOSTRequestWithBody(c.Server, platformServiceType, platformServiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClearMODRatingUsingPOST(ctx context.Context, platformServiceType string, platformServiceId string, body ClearMODRatingUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClearMODRatingUsingPOSTRequest(c.Server, platformServiceType, platformServiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SoldOutMODAllUsingPOSTWithBody(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSoldOutMODAllUsingPOSTRequestWithBody(c.Server, platformServiceType, platformServiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SoldOutMODAllUsingPOST(ctx context.Context, platformServiceType string, platformServiceId string, body SoldOutMODAllUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSoldOutMODAllUsingPOSTRequest(c.Server, platformServiceType, platformServiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SoldOutMODUsingPOSTWithBody(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSoldOutMODUsingPOSTRequestWithBody(c.Server, platformServiceType, platformServiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SoldOutMODUsingPOST(ctx context.Context, platformServiceType string, platformServiceId string, body SoldOutMODUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSoldOutMODUsingPOSTRequest(c.Server, platformServiceType, platformServiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagDelUsingDELETE(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagDelUsingDELETERequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UgcChooseVersionUsingPOST(ctx context.Context, ugcId string, versionId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUgcChooseVersionUsingPOSTRequest(c.Server, ugcId, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBackpacksUsingGETRequest generates requests for GetBackpacksUsingGET
func NewGetBackpacksUsingGETRequest(server string, params *GetBackpacksUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/backpack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddBackpackAssetUsingPOSTRequest generates requests for AddBackpackAssetUsingPOST
func NewAddBackpackAssetUsingPOSTRequest(server string, params *AddBackpackAssetUsingPOSTParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/backpack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcId", runtime.ParamLocationQuery, params.UgcId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchBackpackAssetUsingGETRequest generates requests for SearchBackpackAssetUsingGET
func NewSearchBackpackAssetUsingGETRequest(server string, params *SearchBackpackAssetUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/backpack/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchValue", runtime.ParamLocationQuery, params.SearchValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveBackpackAssetUsingDELETERequest generates requests for RemoveBackpackAssetUsingDELETE
func NewRemoveBackpackAssetUsingDELETERequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/backpack/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveBackpackAssetUsingPOSTRequest generates requests for RemoveBackpackAssetUsingPOST
func NewRemoveBackpackAssetUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/backpack/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackpackAssetDownloadUsingPOSTRequest generates requests for BackpackAssetDownloadUsingPOST
func NewBackpackAssetDownloadUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/backpack/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMyEvaluateUsingGETRequest generates requests for MyEvaluateUsingGET
func NewMyEvaluateUsingGETRequest(server string, params *MyEvaluateUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/evaluate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluateUsingPOSTRequest generates requests for EvaluateUsingPOST
func NewEvaluateUsingPOSTRequest(server string, params *EvaluateUsingPOSTParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/evaluate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcId", runtime.ParamLocationQuery, params.UgcId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "versionId", runtime.ParamLocationQuery, params.VersionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score", runtime.ParamLocationQuery, params.Score); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFavoriteListUsingGETRequest generates requests for FavoriteListUsingGET
func NewFavoriteListUsingGETRequest(server string, params *FavoriteListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/favorite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFavoriteUsingPOSTRequest generates requests for FavoriteUsingPOST
func NewFavoriteUsingPOSTRequest(server string, params *FavoriteUsingPOSTParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/favorite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcId", runtime.ParamLocationQuery, params.UgcId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelBatchFavoriteUsingDELETERequest generates requests for DelBatchFavoriteUsingDELETE
func NewDelBatchFavoriteUsingDELETERequest(server string, params *DelBatchFavoriteUsingDELETEParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/favorite/del/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcIds", runtime.ParamLocationQuery, params.UgcIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelBatchFavoriteUsingPOSTRequest generates requests for DelBatchFavoriteUsingPOST
func NewDelBatchFavoriteUsingPOSTRequest(server string, params *DelBatchFavoriteUsingPOSTParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/favorite/del/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcIds", runtime.ParamLocationQuery, params.UgcIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUgcV21FavoriteSearchRequest generates requests for GetUgcV21FavoriteSearch
func NewGetUgcV21FavoriteSearchRequest(server string, params *GetUgcV21FavoriteSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/favorite/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, params.Keywords); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MemberNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, *params.MemberNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcGameResourcesDownloadUsingPOSTRequest generates requests for UgcGameResourcesDownloadUsingPOST
func NewUgcGameResourcesDownloadUsingPOSTRequest(server string, ugcId string, params *UgcGameResourcesDownloadUsingPOSTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/game/ugc/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindMemberHomelandUsingGETRequest generates requests for FindMemberHomelandUsingGET
func NewFindMemberHomelandUsingGETRequest(server string, params *FindMemberHomelandUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/homeland")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsertHomelandUsingPOSTRequestWithBody generates requests for InsertHomelandUsingPOST with any type of body
func NewInsertHomelandUsingPOSTRequestWithBody(server string, params *InsertHomelandUsingPOSTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/homeland")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "likeValue", runtime.ParamLocationQuery, params.LikeValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "durTime", runtime.ParamLocationQuery, params.DurTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visitValue", runtime.ParamLocationQuery, params.VisitValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nicknameNo", runtime.ParamLocationQuery, params.NicknameNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nickname", runtime.ParamLocationQuery, params.Nickname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zoneId", runtime.ParamLocationQuery, params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zoneGuid", runtime.ParamLocationQuery, params.ZoneGuid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindMemberApplyRecordUsingGETRequest generates requests for FindMemberApplyRecordUsingGET
func NewFindMemberApplyRecordUsingGETRequest(server string, params *FindMemberApplyRecordUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/homeland/apply/record")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UgcId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcId", runtime.ParamLocationQuery, *params.UgcId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindHomelandsUsingGETRequest generates requests for FindHomelandsUsingGET
func NewFindHomelandsUsingGETRequest(server string, params *FindHomelandsUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/homeland/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindHomelandByUgcIdUsingGETRequest generates requests for FindHomelandByUgcIdUsingGET
func NewFindHomelandByUgcIdUsingGETRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/homeland/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadHomelandFileUsingPOSTRequest generates requests for DownloadHomelandFileUsingPOST
func NewDownloadHomelandFileUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/homeland/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadHomelandFileUsingPOSTRequestWithBody generates requests for UploadHomelandFileUsingPOST with any type of body
func NewUploadHomelandFileUsingPOSTRequestWithBody(server string, ugcId string, params *UploadHomelandFileUsingPOSTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/homeland/%s/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsertHomelandUsingPOST1RequestWithBody generates requests for InsertHomelandUsingPOST1 with any type of body
func NewInsertHomelandUsingPOST1RequestWithBody(server string, params *InsertHomelandUsingPOST1Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/homeland")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "likeValue", runtime.ParamLocationQuery, params.LikeValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "durTime", runtime.ParamLocationQuery, params.DurTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visitValue", runtime.ParamLocationQuery, params.VisitValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nicknameNo", runtime.ParamLocationQuery, params.NicknameNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nickname", runtime.ParamLocationQuery, params.Nickname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zoneId", runtime.ParamLocationQuery, params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zoneGuid", runtime.ParamLocationQuery, params.ZoneGuid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUgcV21InternalHomelandApprovalListRequest generates requests for GetUgcV21InternalHomelandApprovalList
func NewGetUgcV21InternalHomelandApprovalListRequest(server string, params *GetUgcV21InternalHomelandApprovalListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/homeland/approval/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MemberNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, *params.MemberNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UgcId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcId", runtime.ParamLocationQuery, *params.UgcId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindMemberApplyRecordUsingGET1Request generates requests for FindMemberApplyRecordUsingGET1
func NewFindMemberApplyRecordUsingGET1Request(server string, memberNo int64, params *FindMemberApplyRecordUsingGET1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/homeland/%s/apply/record", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UgcId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcId", runtime.ParamLocationQuery, *params.UgcId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindMemberHomelandUsingGET1Request generates requests for FindMemberHomelandUsingGET1
func NewFindMemberHomelandUsingGET1Request(server string, ugcId string, params *FindMemberHomelandUsingGET1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/homeland/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadHomelandFileUsingPOST1Request generates requests for DownloadHomelandFileUsingPOST1
func NewDownloadHomelandFileUsingPOST1Request(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/homeland/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadHomelandFileUsingPOST1RequestWithBody generates requests for UploadHomelandFileUsingPOST1 with any type of body
func NewUploadHomelandFileUsingPOST1RequestWithBody(server string, ugcId string, params *UploadHomelandFileUsingPOST1Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/homeland/%s/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUgcInfoListUsingGETRequest generates requests for GetUgcInfoListUsingGET
func NewGetUgcInfoListUsingGETRequest(server string, params *GetUgcInfoListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.GameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, *params.GameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modType", runtime.ParamLocationQuery, *params.ModType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUGCUsingPOSTRequestWithBody generates requests for CreateUGCUsingPOST with any type of body
func NewCreateUGCUsingPOSTRequestWithBody(server string, params *CreateUGCUsingPOSTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MemberNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, *params.MemberNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDownloadCountIncreaseUsingPOSTRequest generates requests for DownloadCountIncreaseUsingPOST
func NewDownloadCountIncreaseUsingPOSTRequest(server string, params *DownloadCountIncreaseUsingPOSTParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/download/increase")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcId", runtime.ParamLocationQuery, params.UgcId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSimilarModUsingPOSTRequest calls the generic GetSimilarModUsingPOST builder with application/json body
func NewGetSimilarModUsingPOSTRequest(server string, body GetSimilarModUsingPOSTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSimilarModUsingPOSTRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSimilarModUsingPOSTRequestWithBody generates requests for GetSimilarModUsingPOST with any type of body
func NewGetSimilarModUsingPOSTRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/similar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadFileUsingPOSTRequestWithBody generates requests for UploadFileUsingPOST with any type of body
func NewUploadFileUsingPOSTRequestWithBody(server string, params *UploadFileUsingPOSTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsPrivate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isPrivate", runtime.ParamLocationQuery, *params.IsPrivate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileType", runtime.ParamLocationQuery, params.FileType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Module != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "module", runtime.ParamLocationQuery, *params.Module); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUgcStatisticalUsingGETRequest generates requests for GetUgcStatisticalUsingGET
func NewGetUgcStatisticalUsingGETRequest(server string, params *GetUgcStatisticalUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/workshop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUgcInfoUsingGETRequest generates requests for GetUgcInfoUsingGET
func NewGetUgcInfoUsingGETRequest(server string, ugcId string, params *GetUgcInfoUsingGETParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInternalUgcUpdateUsingPOST1RequestWithBody generates requests for InternalUgcUpdateUsingPOST1 with any type of body
func NewInternalUgcUpdateUsingPOST1RequestWithBody(server string, ugcId string, params *InternalUgcUpdateUsingPOST1Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInternalUgcUpdateUsingPUTRequestWithBody generates requests for InternalUgcUpdateUsingPUT with any type of body
func NewInternalUgcUpdateUsingPUTRequestWithBody(server string, ugcId string, params *InternalUgcUpdateUsingPUTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInternalUgcUpdateUsingDELETERequest generates requests for InternalUgcUpdateUsingDELETE
func NewInternalUgcUpdateUsingDELETERequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInternalUgcUpdateUsingPOSTRequest generates requests for InternalUgcUpdateUsingPOST
func NewInternalUgcUpdateUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcInternalResourceDownloadUsingPOSTRequest generates requests for UgcInternalResourceDownloadUsingPOST
func NewUgcInternalResourceDownloadUsingPOSTRequest(server string, ugcId string, params *UgcInternalResourceDownloadUsingPOSTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcInternalGetUsingPOSTRequestWithFormdataBody calls the generic UgcInternalGetUsingPOST builder with application/x-www-form-urlencoded body
func NewUgcInternalGetUsingPOSTRequestWithFormdataBody(server string, ugcId string, params *UgcInternalGetUsingPOSTParams, body UgcInternalGetUsingPOSTFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUgcInternalGetUsingPOSTRequestWithBody(server, ugcId, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewUgcInternalGetUsingPOSTRequestWithBody generates requests for UgcInternalGetUsingPOST with any type of body
func NewUgcInternalGetUsingPOSTRequestWithBody(server string, ugcId string, params *UgcInternalGetUsingPOSTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/get", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUgcInternalPlayUsingPOSTRequest generates requests for UgcInternalPlayUsingPOST
func NewUgcInternalPlayUsingPOSTRequest(server string, ugcId string, params *UgcInternalPlayUsingPOSTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/play", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInternalVersionListUsingGETRequest generates requests for InternalVersionListUsingGET
func NewInternalVersionListUsingGETRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/version", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcVersionCreateUsingPOSTRequestWithBody generates requests for UgcVersionCreateUsingPOST with any type of body
func NewUgcVersionCreateUsingPOSTRequestWithBody(server string, ugcId string, params *UgcVersionCreateUsingPOSTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/version", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInternalDeleteVersionUsingDELETERequest generates requests for InternalDeleteVersionUsingDELETE
func NewInternalDeleteVersionUsingDELETERequest(server string, ugcId string, versionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/version/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInternalUpdateVersionUsingPOSTRequestWithBody generates requests for InternalUpdateVersionUsingPOST with any type of body
func NewInternalUpdateVersionUsingPOSTRequestWithBody(server string, ugcId string, versionId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/version/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInternalUpdateVersionUsingPUTRequestWithBody generates requests for InternalUpdateVersionUsingPUT with any type of body
func NewInternalUpdateVersionUsingPUTRequestWithBody(server string, ugcId string, versionId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/version/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInternalDeleteVersion2UsingPOSTRequest generates requests for InternalDeleteVersion2UsingPOST
func NewInternalDeleteVersion2UsingPOSTRequest(server string, ugcId string, versionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/version/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcVersionReviewUsingPOSTRequest generates requests for UgcVersionReviewUsingPOST
func NewUgcVersionReviewUsingPOSTRequest(server string, ugcId string, versionId int, params *UgcVersionReviewUsingPOSTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc/%s/version/%s/review", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Message != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationHeader, params.MemberNo)
		if err != nil {
			return nil, err
		}

		req.Header.Set("memberNo", headerParam0)

	}

	return req, nil
}

// NewGetUGCListUsingGETRequest generates requests for GetUGCListUsingGET
func NewGetUGCListUsingGETRequest(server string, params *GetUGCListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/internal/ugc_list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcIds", runtime.ParamLocationQuery, params.UgcIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMyTagUsingGETRequest generates requests for MyTagUsingGET
func NewMyTagUsingGETRequest(server string, params *MyTagUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/myTag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUgcV21TabRequest generates requests for GetUgcV21Tab
func NewGetUgcV21TabRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/tab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagListUsingGET1Request generates requests for TagListUsingGET1
func NewTagListUsingGET1Request(server string, params *TagListUsingGET1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TagType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagType", runtime.ParamLocationQuery, *params.TagType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Brand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "brand", runtime.ParamLocationQuery, *params.Brand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUsingPOST1Request generates requests for CreateUsingPOST1
func NewCreateUsingPOST1Request(server string, params *CreateUsingPOST1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagName", runtime.ParamLocationQuery, params.TagName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagType", runtime.ParamLocationQuery, params.TagType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagOperatingUsingGETRequest generates requests for TagOperatingUsingGET
func NewTagOperatingUsingGETRequest(server string, params *TagOperatingUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/tag/operating")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visible != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visible", runtime.ParamLocationQuery, *params.Visible); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Brand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "brand", runtime.ParamLocationQuery, *params.Brand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagSearchUsingGETRequest generates requests for TagSearchUsingGET
func NewTagSearchUsingGETRequest(server string, params *TagSearchUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/tag/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Brand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "brand", runtime.ParamLocationQuery, *params.Brand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagType", runtime.ParamLocationQuery, *params.TagType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchName", runtime.ParamLocationQuery, params.SearchName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUsingPOSTRequest calls the generic UpdateUsingPOST builder with application/json body
func NewUpdateUsingPOSTRequest(server string, tagId string, body UpdateUsingPOSTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUsingPOSTRequestWithBody(server, tagId, "application/json", bodyReader)
}

// NewUpdateUsingPOSTRequestWithBody generates requests for UpdateUsingPOST with any type of body
func NewUpdateUsingPOSTRequestWithBody(server string, tagId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUsingPUTRequest calls the generic UpdateUsingPUT builder with application/json body
func NewUpdateUsingPUTRequest(server string, tagId string, body UpdateUsingPUTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUsingPUTRequestWithBody(server, tagId, "application/json", bodyReader)
}

// NewUpdateUsingPUTRequestWithBody generates requests for UpdateUsingPUT with any type of body
func NewUpdateUsingPUTRequestWithBody(server string, tagId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewUgcListUsingGETRequest generates requests for GetNewUgcListUsingGET
func NewGetNewUgcListUsingGETRequest(server string, params *GetNewUgcListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modType", runtime.ParamLocationQuery, *params.ModType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUsingPOST2RequestWithBody generates requests for CreateUsingPOST2 with any type of body
func NewCreateUsingPOST2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMemberUGCPublishedDynamicUsingGETRequest generates requests for GetMemberUGCPublishedDynamicUsingGET
func NewGetMemberUGCPublishedDynamicUsingGETRequest(server string, params *GetMemberUGCPublishedDynamicUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/follow/dynamic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenreListUsingGET1Request generates requests for GenreListUsingGET1
func NewGenreListUsingGET1Request(server string, params *GenreListUsingGET1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/genre")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcGetRecordsListUsingGETRequest generates requests for UgcGetRecordsListUsingGET
func NewUgcGetRecordsListUsingGETRequest(server string, params *UgcGetRecordsListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/get/records")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Origin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUGCDynamicUsingGETRequest generates requests for GetUGCDynamicUsingGET
func NewGetUGCDynamicUsingGETRequest(server string, params *GetUGCDynamicUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/my/dynamic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMyUGCDynamicUsingDELETERequest generates requests for DeleteMyUGCDynamicUsingDELETE
func NewDeleteMyUGCDynamicUsingDELETERequest(server string, params *DeleteMyUGCDynamicUsingDELETEParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/my/dynamic/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logId", runtime.ParamLocationQuery, params.LogId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMyUGCDynamicUsingPOSTRequest generates requests for DeleteMyUGCDynamicUsingPOST
func NewDeleteMyUGCDynamicUsingPOSTRequest(server string, params *DeleteMyUGCDynamicUsingPOSTParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/my/dynamic/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logId", runtime.ParamLocationQuery, params.LogId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyUgcListUsingGETRequest generates requests for GetMyUgcListUsingGET
func NewGetMyUgcListUsingGETRequest(server string, params *GetMyUgcListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/myugc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.GameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, *params.GameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUgcV21UgcMyugcSearchRequest generates requests for GetUgcV21UgcMyugcSearch
func NewGetUgcV21UgcMyugcSearchRequest(server string, params *GetUgcV21UgcMyugcSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/myugc/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, params.Keywords); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UgcType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcType", runtime.ParamLocationQuery, *params.UgcType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecentPlayListUsingGETRequest generates requests for RecentPlayListUsingGET
func NewRecentPlayListUsingGETRequest(server string, params *RecentPlayListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/recent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecordsListUsingGETRequest generates requests for GetRecordsListUsingGET
func NewGetRecordsListUsingGETRequest(server string, params *GetRecordsListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/records")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMyRecordsEmptyUsingDELETERequest generates requests for MyRecordsEmptyUsingDELETE
func NewMyRecordsEmptyUsingDELETERequest(server string, params *MyRecordsEmptyUsingDELETEParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/records/empty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMyRecordsEmptyUsingPOSTRequest generates requests for MyRecordsEmptyUsingPOST
func NewMyRecordsEmptyUsingPOSTRequest(server string, params *MyRecordsEmptyUsingPOSTParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/records/empty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsertUGCReportUsingPOSTRequest calls the generic InsertUGCReportUsingPOST builder with application/json body
func NewInsertUGCReportUsingPOSTRequest(server string, body InsertUGCReportUsingPOSTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertUGCReportUsingPOSTRequestWithBody(server, "application/json", bodyReader)
}

// NewInsertUGCReportUsingPOSTRequestWithBody generates requests for InsertUGCReportUsingPOST with any type of body
func NewInsertUGCReportUsingPOSTRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchUsingGET1Request generates requests for SearchUsingGET1
func NewSearchUsingGET1Request(server string, params *SearchUsingGET1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, *params.GameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UgcType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ugcType", runtime.ParamLocationQuery, *params.UgcType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTarget != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchTarget", runtime.ParamLocationQuery, *params.SearchTarget); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchName", runtime.ParamLocationQuery, params.SearchName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSimilarModUsingPOST1Request calls the generic GetSimilarModUsingPOST1 builder with application/json body
func NewGetSimilarModUsingPOST1Request(server string, body GetSimilarModUsingPOST1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSimilarModUsingPOST1RequestWithBody(server, "application/json", bodyReader)
}

// NewGetSimilarModUsingPOST1RequestWithBody generates requests for GetSimilarModUsingPOST1 with any type of body
func NewGetSimilarModUsingPOST1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/similar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPretreatmentUGCSortingUsingPOSTRequest generates requests for PretreatmentUGCSortingUsingPOST
func NewPretreatmentUGCSortingUsingPOSTRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/sorting/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadUsingPOSTRequestWithBody generates requests for UploadUsingPOST with any type of body
func NewUploadUsingPOSTRequestWithBody(server string, params *UploadUsingPOSTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileType", runtime.ParamLocationQuery, params.FileType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.GameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, *params.GameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsPrivate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isPrivate", runtime.ParamLocationQuery, *params.IsPrivate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUgcStatisticalUsingGET1Request generates requests for GetUgcStatisticalUsingGET1
func NewGetUgcStatisticalUsingGET1Request(server string, params *GetUgcStatisticalUsingGET1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/workshop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, params.MemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemberFavoriteListUsingGETRequest generates requests for GetMemberFavoriteListUsingGET
func NewGetMemberFavoriteListUsingGETRequest(server string, memberNo int64, params *GetMemberFavoriteListUsingGETParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/favorite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemberUGCListUsingGETRequest generates requests for GetMemberUGCListUsingGET
func NewGetMemberUGCListUsingGETRequest(server string, memberNo int64, params *GetMemberUGCListUsingGETParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.GameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, *params.GameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFileIdIsUseUsingGETRequest generates requests for FileIdIsUseUsingGET
func NewFileIdIsUseUsingGETRequest(server string, packageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageId", runtime.ParamLocationPath, packageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/check", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelUgcUsingDELETERequest generates requests for DelUgcUsingDELETE
func NewDelUgcUsingDELETERequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcInfoUsingGET1Request generates requests for UgcInfoUsingGET1
func NewUgcInfoUsingGET1Request(server string, ugcId string, params *UgcInfoUsingGET1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcUpdateUsingPOST1RequestWithBody generates requests for UgcUpdateUsingPOST1 with any type of body
func NewUgcUpdateUsingPOST1RequestWithBody(server string, ugcId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUgcUpdateUsingPUT1RequestWithBody generates requests for UgcUpdateUsingPUT1 with any type of body
func NewUgcUpdateUsingPUT1RequestWithBody(server string, ugcId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelUgc2UsingPOSTRequest generates requests for DelUgc2UsingPOST
func NewDelUgc2UsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUgcV21UgcUgcIdDownloadRequest generates requests for GetUgcV21UgcUgcIdDownload
func NewGetUgcV21UgcUgcIdDownloadRequest(server string, ugcId UgcId, params *GetUgcV21UgcUgcIdDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.VersionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "versionId", runtime.ParamLocationQuery, *params.VersionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Timestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp", runtime.ParamLocationQuery, *params.Timestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcResourceDownloadUsingPOSTRequest generates requests for UgcResourceDownloadUsingPOST
func NewUgcResourceDownloadUsingPOSTRequest(server string, ugcId UgcId, params *UgcResourceDownloadUsingPOSTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.VersionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "versionId", runtime.ParamLocationQuery, *params.VersionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUgcEvaluateUsingGETRequest generates requests for GetUgcEvaluateUsingGET
func NewGetUgcEvaluateUsingGETRequest(server string, ugcId string, params *GetUgcEvaluateUsingGETParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/evaluate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEvaluateUsingPOSTRequest generates requests for UpdateEvaluateUsingPOST
func NewUpdateEvaluateUsingPOSTRequest(server string, ugcId string, params *UpdateEvaluateUsingPOSTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/evaluate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score", runtime.ParamLocationQuery, params.Score); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEvaluateUsingPUTRequest generates requests for UpdateEvaluateUsingPUT
func NewUpdateEvaluateUsingPUTRequest(server string, ugcId string, params *UpdateEvaluateUsingPUTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/evaluate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "score", runtime.ParamLocationQuery, params.Score); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluateDelUsingPOSTRequest generates requests for EvaluateDelUsingPOST
func NewEvaluateDelUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/evaluate/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFavoriteAddUsingPOSTRequest generates requests for FavoriteAddUsingPOST
func NewFavoriteAddUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/favorite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelFavoriteUsingDELETERequest generates requests for DelFavoriteUsingDELETE
func NewDelFavoriteUsingDELETERequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/favorite/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelFavoriteUsingPOSTRequest generates requests for DelFavoriteUsingPOST
func NewDelFavoriteUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/favorite/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcGetUsingPOSTRequest generates requests for UgcGetUsingPOST
func NewUgcGetUsingPOSTRequest(server string, ugcId string, params *UgcGetUsingPOSTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/get", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Origin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcHideUsingPOSTRequest generates requests for UgcHideUsingPOST
func NewUgcHideUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/hide", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcPlayUsingPOSTRequest generates requests for UgcPlayUsingPOST
func NewUgcPlayUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/play", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluateRatingUsingGETRequest generates requests for EvaluateRatingUsingGET
func NewEvaluateRatingUsingGETRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/ratings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcShareUsingPOSTRequest generates requests for UgcShareUsingPOST
func NewUgcShareUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcShowUsingPOSTRequest generates requests for UgcShowUsingPOST
func NewUgcShowUsingPOSTRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/show", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionListUsingGETRequest generates requests for VersionListUsingGET
func NewVersionListUsingGETRequest(server string, ugcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcVersionCreateUsingPOST1RequestWithBody generates requests for UgcVersionCreateUsingPOST1 with any type of body
func NewUgcVersionCreateUsingPOST1RequestWithBody(server string, ugcId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVersionUsingDELETERequest generates requests for DeleteVersionUsingDELETE
func NewDeleteVersionUsingDELETERequest(server string, ugcId string, versionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateVersionUsingPOST1RequestWithBody generates requests for UpdateVersionUsingPOST1 with any type of body
func NewUpdateVersionUsingPOST1RequestWithBody(server string, ugcId string, versionId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateVersionUsingPUT1RequestWithBody generates requests for UpdateVersionUsingPUT1 with any type of body
func NewUpdateVersionUsingPUT1RequestWithBody(server string, ugcId string, versionId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVersion2UsingPOSTRequest generates requests for DeleteVersion2UsingPOST
func NewDeleteVersion2UsingPOSTRequest(server string, ugcId string, versionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcVersionPublishUsingPOSTRequest generates requests for UgcVersionPublishUsingPOST
func NewUgcVersionPublishUsingPOSTRequest(server string, ugcId string, versionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version/%s/publish", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcVersionReviewUsingPOST1Request generates requests for UgcVersionReviewUsingPOST1
func NewUgcVersionReviewUsingPOST1Request(server string, ugcId string, versionId int, params *UgcVersionReviewUsingPOST1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version/%s/review", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Message != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcVersionReviewCancelUsingPOSTRequest generates requests for UgcVersionReviewCancelUsingPOST
func NewUgcVersionReviewCancelUsingPOSTRequest(server string, ugcId string, versionId int, params *UgcVersionReviewCancelUsingPOSTParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/ugc/%s/version/%s/review/cancel", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Message != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClearMODRatingUsingPOSTRequest calls the generic ClearMODRatingUsingPOST builder with application/json body
func NewClearMODRatingUsingPOSTRequest(server string, platformServiceType string, platformServiceId string, body ClearMODRatingUsingPOSTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClearMODRatingUsingPOSTRequestWithBody(server, platformServiceType, platformServiceId, "application/json", bodyReader)
}

// NewClearMODRatingUsingPOSTRequestWithBody generates requests for ClearMODRatingUsingPOST with any type of body
func NewClearMODRatingUsingPOSTRequestWithBody(server string, platformServiceType string, platformServiceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platformServiceType", runtime.ParamLocationPath, platformServiceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platformServiceId", runtime.ParamLocationPath, platformServiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/%s/%s/clear-mod-rating", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSoldOutMODAllUsingPOSTRequest calls the generic SoldOutMODAllUsingPOST builder with application/json body
func NewSoldOutMODAllUsingPOSTRequest(server string, platformServiceType string, platformServiceId string, body SoldOutMODAllUsingPOSTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSoldOutMODAllUsingPOSTRequestWithBody(server, platformServiceType, platformServiceId, "application/json", bodyReader)
}

// NewSoldOutMODAllUsingPOSTRequestWithBody generates requests for SoldOutMODAllUsingPOST with any type of body
func NewSoldOutMODAllUsingPOSTRequestWithBody(server string, platformServiceType string, platformServiceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platformServiceType", runtime.ParamLocationPath, platformServiceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platformServiceId", runtime.ParamLocationPath, platformServiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/%s/%s/out-mod/all", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSoldOutMODUsingPOSTRequest calls the generic SoldOutMODUsingPOST builder with application/json body
func NewSoldOutMODUsingPOSTRequest(server string, platformServiceType string, platformServiceId string, body SoldOutMODUsingPOSTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSoldOutMODUsingPOSTRequestWithBody(server, platformServiceType, platformServiceId, "application/json", bodyReader)
}

// NewSoldOutMODUsingPOSTRequestWithBody generates requests for SoldOutMODUsingPOST with any type of body
func NewSoldOutMODUsingPOSTRequestWithBody(server string, platformServiceType string, platformServiceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platformServiceType", runtime.ParamLocationPath, platformServiceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platformServiceId", runtime.ParamLocationPath, platformServiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/%s/%s/sold-out-mod", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTagDelUsingDELETERequest generates requests for TagDelUsingDELETE
func NewTagDelUsingDELETERequest(server string, tagId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/%s/tag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUgcChooseVersionUsingPOSTRequest generates requests for UgcChooseVersionUsingPOST
func NewUgcChooseVersionUsingPOSTRequest(server string, ugcId string, versionId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ugcId", runtime.ParamLocationPath, ugcId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ugc/v2.1/%s/%s/choose", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBackpacksUsingGETWithResponse request
	GetBackpacksUsingGETWithResponse(ctx context.Context, params *GetBackpacksUsingGETParams, reqEditors ...RequestEditorFn) (*GetBackpacksUsingGETResponse, error)

	// AddBackpackAssetUsingPOSTWithResponse request
	AddBackpackAssetUsingPOSTWithResponse(ctx context.Context, params *AddBackpackAssetUsingPOSTParams, reqEditors ...RequestEditorFn) (*AddBackpackAssetUsingPOSTResponse, error)

	// SearchBackpackAssetUsingGETWithResponse request
	SearchBackpackAssetUsingGETWithResponse(ctx context.Context, params *SearchBackpackAssetUsingGETParams, reqEditors ...RequestEditorFn) (*SearchBackpackAssetUsingGETResponse, error)

	// RemoveBackpackAssetUsingDELETEWithResponse request
	RemoveBackpackAssetUsingDELETEWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*RemoveBackpackAssetUsingDELETEResponse, error)

	// RemoveBackpackAssetUsingPOSTWithResponse request
	RemoveBackpackAssetUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*RemoveBackpackAssetUsingPOSTResponse, error)

	// BackpackAssetDownloadUsingPOSTWithResponse request
	BackpackAssetDownloadUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*BackpackAssetDownloadUsingPOSTResponse, error)

	// MyEvaluateUsingGETWithResponse request
	MyEvaluateUsingGETWithResponse(ctx context.Context, params *MyEvaluateUsingGETParams, reqEditors ...RequestEditorFn) (*MyEvaluateUsingGETResponse, error)

	// EvaluateUsingPOSTWithResponse request
	EvaluateUsingPOSTWithResponse(ctx context.Context, params *EvaluateUsingPOSTParams, reqEditors ...RequestEditorFn) (*EvaluateUsingPOSTResponse, error)

	// FavoriteListUsingGETWithResponse request
	FavoriteListUsingGETWithResponse(ctx context.Context, params *FavoriteListUsingGETParams, reqEditors ...RequestEditorFn) (*FavoriteListUsingGETResponse, error)

	// FavoriteUsingPOSTWithResponse request
	FavoriteUsingPOSTWithResponse(ctx context.Context, params *FavoriteUsingPOSTParams, reqEditors ...RequestEditorFn) (*FavoriteUsingPOSTResponse, error)

	// DelBatchFavoriteUsingDELETEWithResponse request
	DelBatchFavoriteUsingDELETEWithResponse(ctx context.Context, params *DelBatchFavoriteUsingDELETEParams, reqEditors ...RequestEditorFn) (*DelBatchFavoriteUsingDELETEResponse, error)

	// DelBatchFavoriteUsingPOSTWithResponse request
	DelBatchFavoriteUsingPOSTWithResponse(ctx context.Context, params *DelBatchFavoriteUsingPOSTParams, reqEditors ...RequestEditorFn) (*DelBatchFavoriteUsingPOSTResponse, error)

	// GetUgcV21FavoriteSearchWithResponse request
	GetUgcV21FavoriteSearchWithResponse(ctx context.Context, params *GetUgcV21FavoriteSearchParams, reqEditors ...RequestEditorFn) (*GetUgcV21FavoriteSearchResponse, error)

	// UgcGameResourcesDownloadUsingPOSTWithResponse request
	UgcGameResourcesDownloadUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UgcGameResourcesDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcGameResourcesDownloadUsingPOSTResponse, error)

	// FindMemberHomelandUsingGETWithResponse request
	FindMemberHomelandUsingGETWithResponse(ctx context.Context, params *FindMemberHomelandUsingGETParams, reqEditors ...RequestEditorFn) (*FindMemberHomelandUsingGETResponse, error)

	// InsertHomelandUsingPOSTWithBodyWithResponse request with any body
	InsertHomelandUsingPOSTWithBodyWithResponse(ctx context.Context, params *InsertHomelandUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertHomelandUsingPOSTResponse, error)

	// FindMemberApplyRecordUsingGETWithResponse request
	FindMemberApplyRecordUsingGETWithResponse(ctx context.Context, params *FindMemberApplyRecordUsingGETParams, reqEditors ...RequestEditorFn) (*FindMemberApplyRecordUsingGETResponse, error)

	// FindHomelandsUsingGETWithResponse request
	FindHomelandsUsingGETWithResponse(ctx context.Context, params *FindHomelandsUsingGETParams, reqEditors ...RequestEditorFn) (*FindHomelandsUsingGETResponse, error)

	// FindHomelandByUgcIdUsingGETWithResponse request
	FindHomelandByUgcIdUsingGETWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*FindHomelandByUgcIdUsingGETResponse, error)

	// DownloadHomelandFileUsingPOSTWithResponse request
	DownloadHomelandFileUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DownloadHomelandFileUsingPOSTResponse, error)

	// UploadHomelandFileUsingPOSTWithBodyWithResponse request with any body
	UploadHomelandFileUsingPOSTWithBodyWithResponse(ctx context.Context, ugcId string, params *UploadHomelandFileUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadHomelandFileUsingPOSTResponse, error)

	// InsertHomelandUsingPOST1WithBodyWithResponse request with any body
	InsertHomelandUsingPOST1WithBodyWithResponse(ctx context.Context, params *InsertHomelandUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertHomelandUsingPOST1Response, error)

	// GetUgcV21InternalHomelandApprovalListWithResponse request
	GetUgcV21InternalHomelandApprovalListWithResponse(ctx context.Context, params *GetUgcV21InternalHomelandApprovalListParams, reqEditors ...RequestEditorFn) (*GetUgcV21InternalHomelandApprovalListResponse, error)

	// FindMemberApplyRecordUsingGET1WithResponse request
	FindMemberApplyRecordUsingGET1WithResponse(ctx context.Context, memberNo int64, params *FindMemberApplyRecordUsingGET1Params, reqEditors ...RequestEditorFn) (*FindMemberApplyRecordUsingGET1Response, error)

	// FindMemberHomelandUsingGET1WithResponse request
	FindMemberHomelandUsingGET1WithResponse(ctx context.Context, ugcId string, params *FindMemberHomelandUsingGET1Params, reqEditors ...RequestEditorFn) (*FindMemberHomelandUsingGET1Response, error)

	// DownloadHomelandFileUsingPOST1WithResponse request
	DownloadHomelandFileUsingPOST1WithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DownloadHomelandFileUsingPOST1Response, error)

	// UploadHomelandFileUsingPOST1WithBodyWithResponse request with any body
	UploadHomelandFileUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, params *UploadHomelandFileUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadHomelandFileUsingPOST1Response, error)

	// GetUgcInfoListUsingGETWithResponse request
	GetUgcInfoListUsingGETWithResponse(ctx context.Context, params *GetUgcInfoListUsingGETParams, reqEditors ...RequestEditorFn) (*GetUgcInfoListUsingGETResponse, error)

	// CreateUGCUsingPOSTWithBodyWithResponse request with any body
	CreateUGCUsingPOSTWithBodyWithResponse(ctx context.Context, params *CreateUGCUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUGCUsingPOSTResponse, error)

	// DownloadCountIncreaseUsingPOSTWithResponse request
	DownloadCountIncreaseUsingPOSTWithResponse(ctx context.Context, params *DownloadCountIncreaseUsingPOSTParams, reqEditors ...RequestEditorFn) (*DownloadCountIncreaseUsingPOSTResponse, error)

	// GetSimilarModUsingPOSTWithBodyWithResponse request with any body
	GetSimilarModUsingPOSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSimilarModUsingPOSTResponse, error)

	GetSimilarModUsingPOSTWithResponse(ctx context.Context, body GetSimilarModUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSimilarModUsingPOSTResponse, error)

	// UploadFileUsingPOSTWithBodyWithResponse request with any body
	UploadFileUsingPOSTWithBodyWithResponse(ctx context.Context, params *UploadFileUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileUsingPOSTResponse, error)

	// GetUgcStatisticalUsingGETWithResponse request
	GetUgcStatisticalUsingGETWithResponse(ctx context.Context, params *GetUgcStatisticalUsingGETParams, reqEditors ...RequestEditorFn) (*GetUgcStatisticalUsingGETResponse, error)

	// GetUgcInfoUsingGETWithResponse request
	GetUgcInfoUsingGETWithResponse(ctx context.Context, ugcId string, params *GetUgcInfoUsingGETParams, reqEditors ...RequestEditorFn) (*GetUgcInfoUsingGETResponse, error)

	// InternalUgcUpdateUsingPOST1WithBodyWithResponse request with any body
	InternalUgcUpdateUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, params *InternalUgcUpdateUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUgcUpdateUsingPOST1Response, error)

	// InternalUgcUpdateUsingPUTWithBodyWithResponse request with any body
	InternalUgcUpdateUsingPUTWithBodyWithResponse(ctx context.Context, ugcId string, params *InternalUgcUpdateUsingPUTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUgcUpdateUsingPUTResponse, error)

	// InternalUgcUpdateUsingDELETEWithResponse request
	InternalUgcUpdateUsingDELETEWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*InternalUgcUpdateUsingDELETEResponse, error)

	// InternalUgcUpdateUsingPOSTWithResponse request
	InternalUgcUpdateUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*InternalUgcUpdateUsingPOSTResponse, error)

	// UgcInternalResourceDownloadUsingPOSTWithResponse request
	UgcInternalResourceDownloadUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UgcInternalResourceDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcInternalResourceDownloadUsingPOSTResponse, error)

	// UgcInternalGetUsingPOSTWithBodyWithResponse request with any body
	UgcInternalGetUsingPOSTWithBodyWithResponse(ctx context.Context, ugcId string, params *UgcInternalGetUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcInternalGetUsingPOSTResponse, error)

	UgcInternalGetUsingPOSTWithFormdataBodyWithResponse(ctx context.Context, ugcId string, params *UgcInternalGetUsingPOSTParams, body UgcInternalGetUsingPOSTFormdataRequestBody, reqEditors ...RequestEditorFn) (*UgcInternalGetUsingPOSTResponse, error)

	// UgcInternalPlayUsingPOSTWithResponse request
	UgcInternalPlayUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UgcInternalPlayUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcInternalPlayUsingPOSTResponse, error)

	// InternalVersionListUsingGETWithResponse request
	InternalVersionListUsingGETWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*InternalVersionListUsingGETResponse, error)

	// UgcVersionCreateUsingPOSTWithBodyWithResponse request with any body
	UgcVersionCreateUsingPOSTWithBodyWithResponse(ctx context.Context, ugcId string, params *UgcVersionCreateUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcVersionCreateUsingPOSTResponse, error)

	// InternalDeleteVersionUsingDELETEWithResponse request
	InternalDeleteVersionUsingDELETEWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*InternalDeleteVersionUsingDELETEResponse, error)

	// InternalUpdateVersionUsingPOSTWithBodyWithResponse request with any body
	InternalUpdateVersionUsingPOSTWithBodyWithResponse(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUpdateVersionUsingPOSTResponse, error)

	// InternalUpdateVersionUsingPUTWithBodyWithResponse request with any body
	InternalUpdateVersionUsingPUTWithBodyWithResponse(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUpdateVersionUsingPUTResponse, error)

	// InternalDeleteVersion2UsingPOSTWithResponse request
	InternalDeleteVersion2UsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*InternalDeleteVersion2UsingPOSTResponse, error)

	// UgcVersionReviewUsingPOSTWithResponse request
	UgcVersionReviewUsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcVersionReviewUsingPOSTResponse, error)

	// GetUGCListUsingGETWithResponse request
	GetUGCListUsingGETWithResponse(ctx context.Context, params *GetUGCListUsingGETParams, reqEditors ...RequestEditorFn) (*GetUGCListUsingGETResponse, error)

	// MyTagUsingGETWithResponse request
	MyTagUsingGETWithResponse(ctx context.Context, params *MyTagUsingGETParams, reqEditors ...RequestEditorFn) (*MyTagUsingGETResponse, error)

	// GetUgcV21TabWithResponse request
	GetUgcV21TabWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUgcV21TabResponse, error)

	// TagListUsingGET1WithResponse request
	TagListUsingGET1WithResponse(ctx context.Context, params *TagListUsingGET1Params, reqEditors ...RequestEditorFn) (*TagListUsingGET1Response, error)

	// CreateUsingPOST1WithResponse request
	CreateUsingPOST1WithResponse(ctx context.Context, params *CreateUsingPOST1Params, reqEditors ...RequestEditorFn) (*CreateUsingPOST1Response, error)

	// TagOperatingUsingGETWithResponse request
	TagOperatingUsingGETWithResponse(ctx context.Context, params *TagOperatingUsingGETParams, reqEditors ...RequestEditorFn) (*TagOperatingUsingGETResponse, error)

	// TagSearchUsingGETWithResponse request
	TagSearchUsingGETWithResponse(ctx context.Context, params *TagSearchUsingGETParams, reqEditors ...RequestEditorFn) (*TagSearchUsingGETResponse, error)

	// UpdateUsingPOSTWithBodyWithResponse request with any body
	UpdateUsingPOSTWithBodyWithResponse(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPOSTResponse, error)

	UpdateUsingPOSTWithResponse(ctx context.Context, tagId string, body UpdateUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPOSTResponse, error)

	// UpdateUsingPUTWithBodyWithResponse request with any body
	UpdateUsingPUTWithBodyWithResponse(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPUTResponse, error)

	UpdateUsingPUTWithResponse(ctx context.Context, tagId string, body UpdateUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPUTResponse, error)

	// GetNewUgcListUsingGETWithResponse request
	GetNewUgcListUsingGETWithResponse(ctx context.Context, params *GetNewUgcListUsingGETParams, reqEditors ...RequestEditorFn) (*GetNewUgcListUsingGETResponse, error)

	// CreateUsingPOST2WithBodyWithResponse request with any body
	CreateUsingPOST2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsingPOST2Response, error)

	// GetMemberUGCPublishedDynamicUsingGETWithResponse request
	GetMemberUGCPublishedDynamicUsingGETWithResponse(ctx context.Context, params *GetMemberUGCPublishedDynamicUsingGETParams, reqEditors ...RequestEditorFn) (*GetMemberUGCPublishedDynamicUsingGETResponse, error)

	// GenreListUsingGET1WithResponse request
	GenreListUsingGET1WithResponse(ctx context.Context, params *GenreListUsingGET1Params, reqEditors ...RequestEditorFn) (*GenreListUsingGET1Response, error)

	// UgcGetRecordsListUsingGETWithResponse request
	UgcGetRecordsListUsingGETWithResponse(ctx context.Context, params *UgcGetRecordsListUsingGETParams, reqEditors ...RequestEditorFn) (*UgcGetRecordsListUsingGETResponse, error)

	// GetUGCDynamicUsingGETWithResponse request
	GetUGCDynamicUsingGETWithResponse(ctx context.Context, params *GetUGCDynamicUsingGETParams, reqEditors ...RequestEditorFn) (*GetUGCDynamicUsingGETResponse, error)

	// DeleteMyUGCDynamicUsingDELETEWithResponse request
	DeleteMyUGCDynamicUsingDELETEWithResponse(ctx context.Context, params *DeleteMyUGCDynamicUsingDELETEParams, reqEditors ...RequestEditorFn) (*DeleteMyUGCDynamicUsingDELETEResponse, error)

	// DeleteMyUGCDynamicUsingPOSTWithResponse request
	DeleteMyUGCDynamicUsingPOSTWithResponse(ctx context.Context, params *DeleteMyUGCDynamicUsingPOSTParams, reqEditors ...RequestEditorFn) (*DeleteMyUGCDynamicUsingPOSTResponse, error)

	// GetMyUgcListUsingGETWithResponse request
	GetMyUgcListUsingGETWithResponse(ctx context.Context, params *GetMyUgcListUsingGETParams, reqEditors ...RequestEditorFn) (*GetMyUgcListUsingGETResponse, error)

	// GetUgcV21UgcMyugcSearchWithResponse request
	GetUgcV21UgcMyugcSearchWithResponse(ctx context.Context, params *GetUgcV21UgcMyugcSearchParams, reqEditors ...RequestEditorFn) (*GetUgcV21UgcMyugcSearchResponse, error)

	// RecentPlayListUsingGETWithResponse request
	RecentPlayListUsingGETWithResponse(ctx context.Context, params *RecentPlayListUsingGETParams, reqEditors ...RequestEditorFn) (*RecentPlayListUsingGETResponse, error)

	// GetRecordsListUsingGETWithResponse request
	GetRecordsListUsingGETWithResponse(ctx context.Context, params *GetRecordsListUsingGETParams, reqEditors ...RequestEditorFn) (*GetRecordsListUsingGETResponse, error)

	// MyRecordsEmptyUsingDELETEWithResponse request
	MyRecordsEmptyUsingDELETEWithResponse(ctx context.Context, params *MyRecordsEmptyUsingDELETEParams, reqEditors ...RequestEditorFn) (*MyRecordsEmptyUsingDELETEResponse, error)

	// MyRecordsEmptyUsingPOSTWithResponse request
	MyRecordsEmptyUsingPOSTWithResponse(ctx context.Context, params *MyRecordsEmptyUsingPOSTParams, reqEditors ...RequestEditorFn) (*MyRecordsEmptyUsingPOSTResponse, error)

	// InsertUGCReportUsingPOSTWithBodyWithResponse request with any body
	InsertUGCReportUsingPOSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertUGCReportUsingPOSTResponse, error)

	InsertUGCReportUsingPOSTWithResponse(ctx context.Context, body InsertUGCReportUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertUGCReportUsingPOSTResponse, error)

	// SearchUsingGET1WithResponse request
	SearchUsingGET1WithResponse(ctx context.Context, params *SearchUsingGET1Params, reqEditors ...RequestEditorFn) (*SearchUsingGET1Response, error)

	// GetSimilarModUsingPOST1WithBodyWithResponse request with any body
	GetSimilarModUsingPOST1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSimilarModUsingPOST1Response, error)

	GetSimilarModUsingPOST1WithResponse(ctx context.Context, body GetSimilarModUsingPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*GetSimilarModUsingPOST1Response, error)

	// PretreatmentUGCSortingUsingPOSTWithResponse request
	PretreatmentUGCSortingUsingPOSTWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PretreatmentUGCSortingUsingPOSTResponse, error)

	// UploadUsingPOSTWithBodyWithResponse request with any body
	UploadUsingPOSTWithBodyWithResponse(ctx context.Context, params *UploadUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadUsingPOSTResponse, error)

	// GetUgcStatisticalUsingGET1WithResponse request
	GetUgcStatisticalUsingGET1WithResponse(ctx context.Context, params *GetUgcStatisticalUsingGET1Params, reqEditors ...RequestEditorFn) (*GetUgcStatisticalUsingGET1Response, error)

	// GetMemberFavoriteListUsingGETWithResponse request
	GetMemberFavoriteListUsingGETWithResponse(ctx context.Context, memberNo int64, params *GetMemberFavoriteListUsingGETParams, reqEditors ...RequestEditorFn) (*GetMemberFavoriteListUsingGETResponse, error)

	// GetMemberUGCListUsingGETWithResponse request
	GetMemberUGCListUsingGETWithResponse(ctx context.Context, memberNo int64, params *GetMemberUGCListUsingGETParams, reqEditors ...RequestEditorFn) (*GetMemberUGCListUsingGETResponse, error)

	// FileIdIsUseUsingGETWithResponse request
	FileIdIsUseUsingGETWithResponse(ctx context.Context, packageId string, reqEditors ...RequestEditorFn) (*FileIdIsUseUsingGETResponse, error)

	// DelUgcUsingDELETEWithResponse request
	DelUgcUsingDELETEWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DelUgcUsingDELETEResponse, error)

	// UgcInfoUsingGET1WithResponse request
	UgcInfoUsingGET1WithResponse(ctx context.Context, ugcId string, params *UgcInfoUsingGET1Params, reqEditors ...RequestEditorFn) (*UgcInfoUsingGET1Response, error)

	// UgcUpdateUsingPOST1WithBodyWithResponse request with any body
	UgcUpdateUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcUpdateUsingPOST1Response, error)

	// UgcUpdateUsingPUT1WithBodyWithResponse request with any body
	UgcUpdateUsingPUT1WithBodyWithResponse(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcUpdateUsingPUT1Response, error)

	// DelUgc2UsingPOSTWithResponse request
	DelUgc2UsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DelUgc2UsingPOSTResponse, error)

	// GetUgcV21UgcUgcIdDownloadWithResponse request
	GetUgcV21UgcUgcIdDownloadWithResponse(ctx context.Context, ugcId UgcId, params *GetUgcV21UgcUgcIdDownloadParams, reqEditors ...RequestEditorFn) (*GetUgcV21UgcUgcIdDownloadResponse, error)

	// UgcResourceDownloadUsingPOSTWithResponse request
	UgcResourceDownloadUsingPOSTWithResponse(ctx context.Context, ugcId UgcId, params *UgcResourceDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcResourceDownloadUsingPOSTResponse, error)

	// GetUgcEvaluateUsingGETWithResponse request
	GetUgcEvaluateUsingGETWithResponse(ctx context.Context, ugcId string, params *GetUgcEvaluateUsingGETParams, reqEditors ...RequestEditorFn) (*GetUgcEvaluateUsingGETResponse, error)

	// UpdateEvaluateUsingPOSTWithResponse request
	UpdateEvaluateUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UpdateEvaluateUsingPOSTParams, reqEditors ...RequestEditorFn) (*UpdateEvaluateUsingPOSTResponse, error)

	// UpdateEvaluateUsingPUTWithResponse request
	UpdateEvaluateUsingPUTWithResponse(ctx context.Context, ugcId string, params *UpdateEvaluateUsingPUTParams, reqEditors ...RequestEditorFn) (*UpdateEvaluateUsingPUTResponse, error)

	// EvaluateDelUsingPOSTWithResponse request
	EvaluateDelUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*EvaluateDelUsingPOSTResponse, error)

	// FavoriteAddUsingPOSTWithResponse request
	FavoriteAddUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*FavoriteAddUsingPOSTResponse, error)

	// DelFavoriteUsingDELETEWithResponse request
	DelFavoriteUsingDELETEWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DelFavoriteUsingDELETEResponse, error)

	// DelFavoriteUsingPOSTWithResponse request
	DelFavoriteUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DelFavoriteUsingPOSTResponse, error)

	// UgcGetUsingPOSTWithResponse request
	UgcGetUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UgcGetUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcGetUsingPOSTResponse, error)

	// UgcHideUsingPOSTWithResponse request
	UgcHideUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*UgcHideUsingPOSTResponse, error)

	// UgcPlayUsingPOSTWithResponse request
	UgcPlayUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*UgcPlayUsingPOSTResponse, error)

	// EvaluateRatingUsingGETWithResponse request
	EvaluateRatingUsingGETWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*EvaluateRatingUsingGETResponse, error)

	// UgcShareUsingPOSTWithResponse request
	UgcShareUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*UgcShareUsingPOSTResponse, error)

	// UgcShowUsingPOSTWithResponse request
	UgcShowUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*UgcShowUsingPOSTResponse, error)

	// VersionListUsingGETWithResponse request
	VersionListUsingGETWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*VersionListUsingGETResponse, error)

	// UgcVersionCreateUsingPOST1WithBodyWithResponse request with any body
	UgcVersionCreateUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcVersionCreateUsingPOST1Response, error)

	// DeleteVersionUsingDELETEWithResponse request
	DeleteVersionUsingDELETEWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*DeleteVersionUsingDELETEResponse, error)

	// UpdateVersionUsingPOST1WithBodyWithResponse request with any body
	UpdateVersionUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVersionUsingPOST1Response, error)

	// UpdateVersionUsingPUT1WithBodyWithResponse request with any body
	UpdateVersionUsingPUT1WithBodyWithResponse(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVersionUsingPUT1Response, error)

	// DeleteVersion2UsingPOSTWithResponse request
	DeleteVersion2UsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*DeleteVersion2UsingPOSTResponse, error)

	// UgcVersionPublishUsingPOSTWithResponse request
	UgcVersionPublishUsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*UgcVersionPublishUsingPOSTResponse, error)

	// UgcVersionReviewUsingPOST1WithResponse request
	UgcVersionReviewUsingPOST1WithResponse(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewUsingPOST1Params, reqEditors ...RequestEditorFn) (*UgcVersionReviewUsingPOST1Response, error)

	// UgcVersionReviewCancelUsingPOSTWithResponse request
	UgcVersionReviewCancelUsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewCancelUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcVersionReviewCancelUsingPOSTResponse, error)

	// ClearMODRatingUsingPOSTWithBodyWithResponse request with any body
	ClearMODRatingUsingPOSTWithBodyWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClearMODRatingUsingPOSTResponse, error)

	ClearMODRatingUsingPOSTWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, body ClearMODRatingUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*ClearMODRatingUsingPOSTResponse, error)

	// SoldOutMODAllUsingPOSTWithBodyWithResponse request with any body
	SoldOutMODAllUsingPOSTWithBodyWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SoldOutMODAllUsingPOSTResponse, error)

	SoldOutMODAllUsingPOSTWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, body SoldOutMODAllUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*SoldOutMODAllUsingPOSTResponse, error)

	// SoldOutMODUsingPOSTWithBodyWithResponse request with any body
	SoldOutMODUsingPOSTWithBodyWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SoldOutMODUsingPOSTResponse, error)

	SoldOutMODUsingPOSTWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, body SoldOutMODUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*SoldOutMODUsingPOSTResponse, error)

	// TagDelUsingDELETEWithResponse request
	TagDelUsingDELETEWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*TagDelUsingDELETEResponse, error)

	// UgcChooseVersionUsingPOSTWithResponse request
	UgcChooseVersionUsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int32, reqEditors ...RequestEditorFn) (*UgcChooseVersionUsingPOSTResponse, error)
}

type GetBackpacksUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBackpackListResults
}

// Status returns HTTPResponse.Status
func (r GetBackpacksUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackpacksUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddBackpackAssetUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBackpackResult
}

// Status returns HTTPResponse.Status
func (r AddBackpackAssetUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddBackpackAssetUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchBackpackAssetUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBackpackListResults
}

// Status returns HTTPResponse.Status
func (r SearchBackpackAssetUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchBackpackAssetUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveBackpackAssetUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBackpackResult
}

// Status returns HTTPResponse.Status
func (r RemoveBackpackAssetUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveBackpackAssetUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveBackpackAssetUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBackpackResult
}

// Status returns HTTPResponse.Status
func (r RemoveBackpackAssetUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveBackpackAssetUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackpackAssetDownloadUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BackpackAssetDownloadUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackpackAssetDownloadUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MyEvaluateUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluateInfoListResults
}

// Status returns HTTPResponse.Status
func (r MyEvaluateUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MyEvaluateUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluateInfoResults
}

// Status returns HTTPResponse.Status
func (r EvaluateUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FavoriteListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r FavoriteListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FavoriteListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FavoriteUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FavoriteInfoListResults
}

// Status returns HTTPResponse.Status
func (r FavoriteUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FavoriteUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelBatchFavoriteUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r DelBatchFavoriteUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelBatchFavoriteUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelBatchFavoriteUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r DelBatchFavoriteUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelBatchFavoriteUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcV21FavoriteSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r GetUgcV21FavoriteSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcV21FavoriteSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcGameResourcesDownloadUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UgcGameResourcesDownloadUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcGameResourcesDownloadUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindMemberHomelandUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllowedApplyResponse
}

// Status returns HTTPResponse.Status
func (r FindMemberHomelandUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindMemberHomelandUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertHomelandUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseResult
}

// Status returns HTTPResponse.Status
func (r InsertHomelandUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertHomelandUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindMemberApplyRecordUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseListResult
}

// Status returns HTTPResponse.Status
func (r FindMemberApplyRecordUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindMemberApplyRecordUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindHomelandsUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseListResult
}

// Status returns HTTPResponse.Status
func (r FindHomelandsUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindHomelandsUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindHomelandByUgcIdUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseResult
}

// Status returns HTTPResponse.Status
func (r FindHomelandByUgcIdUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindHomelandByUgcIdUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadHomelandFileUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UGCResponseResultString
}

// Status returns HTTPResponse.Status
func (r DownloadHomelandFileUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadHomelandFileUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadHomelandFileUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseResult
}

// Status returns HTTPResponse.Status
func (r UploadHomelandFileUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadHomelandFileUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertHomelandUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseResult
}

// Status returns HTTPResponse.Status
func (r InsertHomelandUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertHomelandUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcV21InternalHomelandApprovalListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseListResult
}

// Status returns HTTPResponse.Status
func (r GetUgcV21InternalHomelandApprovalListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcV21InternalHomelandApprovalListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindMemberApplyRecordUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseListResult
}

// Status returns HTTPResponse.Status
func (r FindMemberApplyRecordUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindMemberApplyRecordUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindMemberHomelandUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseResult
}

// Status returns HTTPResponse.Status
func (r FindMemberHomelandUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindMemberHomelandUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadHomelandFileUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UGCResponseResultString
}

// Status returns HTTPResponse.Status
func (r DownloadHomelandFileUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadHomelandFileUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadHomelandFileUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcHomelandMetaResponseResult
}

// Status returns HTTPResponse.Status
func (r UploadHomelandFileUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadHomelandFileUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcInfoListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcResponseListResult
}

// Status returns HTTPResponse.Status
func (r GetUgcInfoListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcInfoListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUGCUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseResult
}

// Status returns HTTPResponse.Status
func (r CreateUGCUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUGCUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadCountIncreaseUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseResult
}

// Status returns HTTPResponse.Status
func (r DownloadCountIncreaseUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadCountIncreaseUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSimilarModUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r GetSimilarModUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSimilarModUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadFileUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadFileResponse
}

// Status returns HTTPResponse.Status
func (r UploadFileUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFileUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcStatisticalUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcStatisticalResult
}

// Status returns HTTPResponse.Status
func (r GetUgcStatisticalUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcStatisticalUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcInfoUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcInfoResponseResult
}

// Status returns HTTPResponse.Status
func (r GetUgcInfoUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcInfoUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalUgcUpdateUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseResult
}

// Status returns HTTPResponse.Status
func (r InternalUgcUpdateUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalUgcUpdateUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalUgcUpdateUsingPUTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseResult
}

// Status returns HTTPResponse.Status
func (r InternalUgcUpdateUsingPUTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalUgcUpdateUsingPUTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalUgcUpdateUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r InternalUgcUpdateUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalUgcUpdateUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalUgcUpdateUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r InternalUgcUpdateUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalUgcUpdateUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcInternalResourceDownloadUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UgcInternalResourceDownloadUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcInternalResourceDownloadUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcInternalGetUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcInfoResponseResult
}

// Status returns HTTPResponse.Status
func (r UgcInternalGetUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcInternalGetUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcInternalPlayUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r UgcInternalPlayUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcInternalPlayUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalVersionListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionListResults
}

// Status returns HTTPResponse.Status
func (r InternalVersionListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalVersionListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcVersionCreateUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r UgcVersionCreateUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcVersionCreateUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalDeleteVersionUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r InternalDeleteVersionUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalDeleteVersionUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalUpdateVersionUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r InternalUpdateVersionUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalUpdateVersionUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalUpdateVersionUsingPUTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r InternalUpdateVersionUsingPUTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalUpdateVersionUsingPUTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalDeleteVersion2UsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r InternalDeleteVersion2UsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalDeleteVersion2UsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcVersionReviewUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r UgcVersionReviewUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcVersionReviewUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUGCListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r GetUGCListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUGCListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MyTagUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagInfoListResults
}

// Status returns HTTPResponse.Status
func (r MyTagUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MyTagUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcV21TabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Context *struct {
			List *[]struct {
				// Name Tab标签名称
				Name *string `json:"name,omitempty"`

				// Sorting 该标签页下数据排序方式
				Sorting *int `json:"sorting,omitempty"`

				// Type Tab标签类型；可选值：【ALL: 全部; FAVORITE: 我的收藏; RECENT: 最近游戏; GENRE: 分类;】
				Type *string `json:"type,omitempty"`

				// Value 分类参数；例如：FPS、CASUAL等
				Value *string `json:"value,omitempty"`
			} `json:"list,omitempty"`

			// TotalCnt Tab标签页总数
			TotalCnt *int `json:"totalCnt,omitempty"`
		} `json:"context,omitempty"`

		// ResultCode 状态码
		ResultCode *string `json:"result_code,omitempty"`

		// ResultMessage 服务端消息
		ResultMessage *string `json:"result_message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUgcV21TabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcV21TabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagListUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagInfoListResults
}

// Status returns HTTPResponse.Status
func (r TagListUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagListUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagInfoResult
}

// Status returns HTTPResponse.Status
func (r CreateUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagOperatingUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagInfoListResults
}

// Status returns HTTPResponse.Status
func (r TagOperatingUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagOperatingUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagSearchUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagInfoListResults
}

// Status returns HTTPResponse.Status
func (r TagSearchUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagSearchUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagInfoResult
}

// Status returns HTTPResponse.Status
func (r UpdateUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUsingPUTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagInfoResult
}

// Status returns HTTPResponse.Status
func (r UpdateUsingPUTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUsingPUTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewUgcListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcResponseListResult
}

// Status returns HTTPResponse.Status
func (r GetNewUgcListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewUgcListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUsingPOST2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseResult
}

// Status returns HTTPResponse.Status
func (r CreateUsingPOST2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUsingPOST2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberUGCPublishedDynamicUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcLatestOperateLogListResult
}

// Status returns HTTPResponse.Status
func (r GetMemberUGCPublishedDynamicUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberUGCPublishedDynamicUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenreListUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcGenreResponseListResult
}

// Status returns HTTPResponse.Status
func (r GenreListUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenreListUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcGetRecordsListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcGetAssetRecordsListResult
}

// Status returns HTTPResponse.Status
func (r UgcGetRecordsListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcGetRecordsListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUGCDynamicUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcLatestOperateLogListResult
}

// Status returns HTTPResponse.Status
func (r GetUGCDynamicUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUGCDynamicUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMyUGCDynamicUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcLatestOperateLogResult
}

// Status returns HTTPResponse.Status
func (r DeleteMyUGCDynamicUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMyUGCDynamicUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMyUGCDynamicUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcLatestOperateLogResult
}

// Status returns HTTPResponse.Status
func (r DeleteMyUGCDynamicUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMyUGCDynamicUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyUgcListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r GetMyUgcListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyUgcListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcV21UgcMyugcSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r GetUgcV21UgcMyugcSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcV21UgcMyugcSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecentPlayListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r RecentPlayListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecentPlayListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecordsListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcRecordResponseListResults
}

// Status returns HTTPResponse.Status
func (r GetRecordsListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecordsListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MyRecordsEmptyUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r MyRecordsEmptyUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MyRecordsEmptyUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MyRecordsEmptyUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r MyRecordsEmptyUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MyRecordsEmptyUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertUGCReportUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcReportResult
}

// Status returns HTTPResponse.Status
func (r InsertUGCReportUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertUGCReportUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r SearchUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSimilarModUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r GetSimilarModUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSimilarModUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PretreatmentUGCSortingUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r PretreatmentUGCSortingUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PretreatmentUGCSortingUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadFileResponse
}

// Status returns HTTPResponse.Status
func (r UploadUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcStatisticalUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcStatisticalResult
}

// Status returns HTTPResponse.Status
func (r GetUgcStatisticalUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcStatisticalUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberFavoriteListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r GetMemberFavoriteListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberFavoriteListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberUGCListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseListResults
}

// Status returns HTTPResponse.Status
func (r GetMemberUGCListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberUGCListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FileIdIsUseUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResultBoolean
}

// Status returns HTTPResponse.Status
func (r FileIdIsUseUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FileIdIsUseUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelUgcUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r DelUgcUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelUgcUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcInfoUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcInfoResponseResult
}

// Status returns HTTPResponse.Status
func (r UgcInfoUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcInfoUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcUpdateUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseResult
}

// Status returns HTTPResponse.Status
func (r UgcUpdateUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcUpdateUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcUpdateUsingPUT1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseResult
}

// Status returns HTTPResponse.Status
func (r UgcUpdateUsingPUT1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcUpdateUsingPUT1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelUgc2UsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r DelUgc2UsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelUgc2UsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcV21UgcUgcIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadInfoResp
}

// Status returns HTTPResponse.Status
func (r GetUgcV21UgcUgcIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcV21UgcUgcIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcResourceDownloadUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UgcResourceDownloadUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcResourceDownloadUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUgcEvaluateUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluateResponseListResults
}

// Status returns HTTPResponse.Status
func (r GetUgcEvaluateUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUgcEvaluateUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEvaluateUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluateInfoResults
}

// Status returns HTTPResponse.Status
func (r UpdateEvaluateUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEvaluateUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEvaluateUsingPUTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluateInfoResults
}

// Status returns HTTPResponse.Status
func (r UpdateEvaluateUsingPUTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEvaluateUsingPUTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateDelUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r EvaluateDelUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateDelUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FavoriteAddUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FavoriteInfoListResults
}

// Status returns HTTPResponse.Status
func (r FavoriteAddUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FavoriteAddUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelFavoriteUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r DelFavoriteUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelFavoriteUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelFavoriteUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r DelFavoriteUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelFavoriteUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcGetUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r UgcGetUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcGetUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcHideUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r UgcHideUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcHideUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcPlayUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r UgcPlayUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcPlayUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateRatingUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluateRatingsResponseListResult
}

// Status returns HTTPResponse.Status
func (r EvaluateRatingUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateRatingUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcShareUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcBaseResult
}

// Status returns HTTPResponse.Status
func (r UgcShareUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcShareUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcShowUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r UgcShowUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcShowUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionListResults
}

// Status returns HTTPResponse.Status
func (r VersionListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcVersionCreateUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r UgcVersionCreateUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcVersionCreateUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVersionUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r DeleteVersionUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVersionUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVersionUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r UpdateVersionUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVersionUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVersionUsingPUT1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r UpdateVersionUsingPUT1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVersionUsingPUT1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVersion2UsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OldResponseResultString
}

// Status returns HTTPResponse.Status
func (r DeleteVersion2UsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVersion2UsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcVersionPublishUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r UgcVersionPublishUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcVersionPublishUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcVersionReviewUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r UgcVersionReviewUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcVersionReviewUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcVersionReviewCancelUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r UgcVersionReviewCancelUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcVersionReviewCancelUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClearMODRatingUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GDISResponse
}

// Status returns HTTPResponse.Status
func (r ClearMODRatingUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClearMODRatingUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SoldOutMODAllUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GDISResponse
}

// Status returns HTTPResponse.Status
func (r SoldOutMODAllUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SoldOutMODAllUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SoldOutMODUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GDISResponse
}

// Status returns HTTPResponse.Status
func (r SoldOutMODUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SoldOutMODUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagDelUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResultBoolean
}

// Status returns HTTPResponse.Status
func (r TagDelUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagDelUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UgcChooseVersionUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UgcVersionResult
}

// Status returns HTTPResponse.Status
func (r UgcChooseVersionUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UgcChooseVersionUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBackpacksUsingGETWithResponse request returning *GetBackpacksUsingGETResponse
func (c *ClientWithResponses) GetBackpacksUsingGETWithResponse(ctx context.Context, params *GetBackpacksUsingGETParams, reqEditors ...RequestEditorFn) (*GetBackpacksUsingGETResponse, error) {
	rsp, err := c.GetBackpacksUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackpacksUsingGETResponse(rsp)
}

// AddBackpackAssetUsingPOSTWithResponse request returning *AddBackpackAssetUsingPOSTResponse
func (c *ClientWithResponses) AddBackpackAssetUsingPOSTWithResponse(ctx context.Context, params *AddBackpackAssetUsingPOSTParams, reqEditors ...RequestEditorFn) (*AddBackpackAssetUsingPOSTResponse, error) {
	rsp, err := c.AddBackpackAssetUsingPOST(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddBackpackAssetUsingPOSTResponse(rsp)
}

// SearchBackpackAssetUsingGETWithResponse request returning *SearchBackpackAssetUsingGETResponse
func (c *ClientWithResponses) SearchBackpackAssetUsingGETWithResponse(ctx context.Context, params *SearchBackpackAssetUsingGETParams, reqEditors ...RequestEditorFn) (*SearchBackpackAssetUsingGETResponse, error) {
	rsp, err := c.SearchBackpackAssetUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchBackpackAssetUsingGETResponse(rsp)
}

// RemoveBackpackAssetUsingDELETEWithResponse request returning *RemoveBackpackAssetUsingDELETEResponse
func (c *ClientWithResponses) RemoveBackpackAssetUsingDELETEWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*RemoveBackpackAssetUsingDELETEResponse, error) {
	rsp, err := c.RemoveBackpackAssetUsingDELETE(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveBackpackAssetUsingDELETEResponse(rsp)
}

// RemoveBackpackAssetUsingPOSTWithResponse request returning *RemoveBackpackAssetUsingPOSTResponse
func (c *ClientWithResponses) RemoveBackpackAssetUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*RemoveBackpackAssetUsingPOSTResponse, error) {
	rsp, err := c.RemoveBackpackAssetUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveBackpackAssetUsingPOSTResponse(rsp)
}

// BackpackAssetDownloadUsingPOSTWithResponse request returning *BackpackAssetDownloadUsingPOSTResponse
func (c *ClientWithResponses) BackpackAssetDownloadUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*BackpackAssetDownloadUsingPOSTResponse, error) {
	rsp, err := c.BackpackAssetDownloadUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackpackAssetDownloadUsingPOSTResponse(rsp)
}

// MyEvaluateUsingGETWithResponse request returning *MyEvaluateUsingGETResponse
func (c *ClientWithResponses) MyEvaluateUsingGETWithResponse(ctx context.Context, params *MyEvaluateUsingGETParams, reqEditors ...RequestEditorFn) (*MyEvaluateUsingGETResponse, error) {
	rsp, err := c.MyEvaluateUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMyEvaluateUsingGETResponse(rsp)
}

// EvaluateUsingPOSTWithResponse request returning *EvaluateUsingPOSTResponse
func (c *ClientWithResponses) EvaluateUsingPOSTWithResponse(ctx context.Context, params *EvaluateUsingPOSTParams, reqEditors ...RequestEditorFn) (*EvaluateUsingPOSTResponse, error) {
	rsp, err := c.EvaluateUsingPOST(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateUsingPOSTResponse(rsp)
}

// FavoriteListUsingGETWithResponse request returning *FavoriteListUsingGETResponse
func (c *ClientWithResponses) FavoriteListUsingGETWithResponse(ctx context.Context, params *FavoriteListUsingGETParams, reqEditors ...RequestEditorFn) (*FavoriteListUsingGETResponse, error) {
	rsp, err := c.FavoriteListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFavoriteListUsingGETResponse(rsp)
}

// FavoriteUsingPOSTWithResponse request returning *FavoriteUsingPOSTResponse
func (c *ClientWithResponses) FavoriteUsingPOSTWithResponse(ctx context.Context, params *FavoriteUsingPOSTParams, reqEditors ...RequestEditorFn) (*FavoriteUsingPOSTResponse, error) {
	rsp, err := c.FavoriteUsingPOST(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFavoriteUsingPOSTResponse(rsp)
}

// DelBatchFavoriteUsingDELETEWithResponse request returning *DelBatchFavoriteUsingDELETEResponse
func (c *ClientWithResponses) DelBatchFavoriteUsingDELETEWithResponse(ctx context.Context, params *DelBatchFavoriteUsingDELETEParams, reqEditors ...RequestEditorFn) (*DelBatchFavoriteUsingDELETEResponse, error) {
	rsp, err := c.DelBatchFavoriteUsingDELETE(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelBatchFavoriteUsingDELETEResponse(rsp)
}

// DelBatchFavoriteUsingPOSTWithResponse request returning *DelBatchFavoriteUsingPOSTResponse
func (c *ClientWithResponses) DelBatchFavoriteUsingPOSTWithResponse(ctx context.Context, params *DelBatchFavoriteUsingPOSTParams, reqEditors ...RequestEditorFn) (*DelBatchFavoriteUsingPOSTResponse, error) {
	rsp, err := c.DelBatchFavoriteUsingPOST(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelBatchFavoriteUsingPOSTResponse(rsp)
}

// GetUgcV21FavoriteSearchWithResponse request returning *GetUgcV21FavoriteSearchResponse
func (c *ClientWithResponses) GetUgcV21FavoriteSearchWithResponse(ctx context.Context, params *GetUgcV21FavoriteSearchParams, reqEditors ...RequestEditorFn) (*GetUgcV21FavoriteSearchResponse, error) {
	rsp, err := c.GetUgcV21FavoriteSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcV21FavoriteSearchResponse(rsp)
}

// UgcGameResourcesDownloadUsingPOSTWithResponse request returning *UgcGameResourcesDownloadUsingPOSTResponse
func (c *ClientWithResponses) UgcGameResourcesDownloadUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UgcGameResourcesDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcGameResourcesDownloadUsingPOSTResponse, error) {
	rsp, err := c.UgcGameResourcesDownloadUsingPOST(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcGameResourcesDownloadUsingPOSTResponse(rsp)
}

// FindMemberHomelandUsingGETWithResponse request returning *FindMemberHomelandUsingGETResponse
func (c *ClientWithResponses) FindMemberHomelandUsingGETWithResponse(ctx context.Context, params *FindMemberHomelandUsingGETParams, reqEditors ...RequestEditorFn) (*FindMemberHomelandUsingGETResponse, error) {
	rsp, err := c.FindMemberHomelandUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindMemberHomelandUsingGETResponse(rsp)
}

// InsertHomelandUsingPOSTWithBodyWithResponse request with arbitrary body returning *InsertHomelandUsingPOSTResponse
func (c *ClientWithResponses) InsertHomelandUsingPOSTWithBodyWithResponse(ctx context.Context, params *InsertHomelandUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertHomelandUsingPOSTResponse, error) {
	rsp, err := c.InsertHomelandUsingPOSTWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertHomelandUsingPOSTResponse(rsp)
}

// FindMemberApplyRecordUsingGETWithResponse request returning *FindMemberApplyRecordUsingGETResponse
func (c *ClientWithResponses) FindMemberApplyRecordUsingGETWithResponse(ctx context.Context, params *FindMemberApplyRecordUsingGETParams, reqEditors ...RequestEditorFn) (*FindMemberApplyRecordUsingGETResponse, error) {
	rsp, err := c.FindMemberApplyRecordUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindMemberApplyRecordUsingGETResponse(rsp)
}

// FindHomelandsUsingGETWithResponse request returning *FindHomelandsUsingGETResponse
func (c *ClientWithResponses) FindHomelandsUsingGETWithResponse(ctx context.Context, params *FindHomelandsUsingGETParams, reqEditors ...RequestEditorFn) (*FindHomelandsUsingGETResponse, error) {
	rsp, err := c.FindHomelandsUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindHomelandsUsingGETResponse(rsp)
}

// FindHomelandByUgcIdUsingGETWithResponse request returning *FindHomelandByUgcIdUsingGETResponse
func (c *ClientWithResponses) FindHomelandByUgcIdUsingGETWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*FindHomelandByUgcIdUsingGETResponse, error) {
	rsp, err := c.FindHomelandByUgcIdUsingGET(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindHomelandByUgcIdUsingGETResponse(rsp)
}

// DownloadHomelandFileUsingPOSTWithResponse request returning *DownloadHomelandFileUsingPOSTResponse
func (c *ClientWithResponses) DownloadHomelandFileUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DownloadHomelandFileUsingPOSTResponse, error) {
	rsp, err := c.DownloadHomelandFileUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadHomelandFileUsingPOSTResponse(rsp)
}

// UploadHomelandFileUsingPOSTWithBodyWithResponse request with arbitrary body returning *UploadHomelandFileUsingPOSTResponse
func (c *ClientWithResponses) UploadHomelandFileUsingPOSTWithBodyWithResponse(ctx context.Context, ugcId string, params *UploadHomelandFileUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadHomelandFileUsingPOSTResponse, error) {
	rsp, err := c.UploadHomelandFileUsingPOSTWithBody(ctx, ugcId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadHomelandFileUsingPOSTResponse(rsp)
}

// InsertHomelandUsingPOST1WithBodyWithResponse request with arbitrary body returning *InsertHomelandUsingPOST1Response
func (c *ClientWithResponses) InsertHomelandUsingPOST1WithBodyWithResponse(ctx context.Context, params *InsertHomelandUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertHomelandUsingPOST1Response, error) {
	rsp, err := c.InsertHomelandUsingPOST1WithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertHomelandUsingPOST1Response(rsp)
}

// GetUgcV21InternalHomelandApprovalListWithResponse request returning *GetUgcV21InternalHomelandApprovalListResponse
func (c *ClientWithResponses) GetUgcV21InternalHomelandApprovalListWithResponse(ctx context.Context, params *GetUgcV21InternalHomelandApprovalListParams, reqEditors ...RequestEditorFn) (*GetUgcV21InternalHomelandApprovalListResponse, error) {
	rsp, err := c.GetUgcV21InternalHomelandApprovalList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcV21InternalHomelandApprovalListResponse(rsp)
}

// FindMemberApplyRecordUsingGET1WithResponse request returning *FindMemberApplyRecordUsingGET1Response
func (c *ClientWithResponses) FindMemberApplyRecordUsingGET1WithResponse(ctx context.Context, memberNo int64, params *FindMemberApplyRecordUsingGET1Params, reqEditors ...RequestEditorFn) (*FindMemberApplyRecordUsingGET1Response, error) {
	rsp, err := c.FindMemberApplyRecordUsingGET1(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindMemberApplyRecordUsingGET1Response(rsp)
}

// FindMemberHomelandUsingGET1WithResponse request returning *FindMemberHomelandUsingGET1Response
func (c *ClientWithResponses) FindMemberHomelandUsingGET1WithResponse(ctx context.Context, ugcId string, params *FindMemberHomelandUsingGET1Params, reqEditors ...RequestEditorFn) (*FindMemberHomelandUsingGET1Response, error) {
	rsp, err := c.FindMemberHomelandUsingGET1(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindMemberHomelandUsingGET1Response(rsp)
}

// DownloadHomelandFileUsingPOST1WithResponse request returning *DownloadHomelandFileUsingPOST1Response
func (c *ClientWithResponses) DownloadHomelandFileUsingPOST1WithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DownloadHomelandFileUsingPOST1Response, error) {
	rsp, err := c.DownloadHomelandFileUsingPOST1(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadHomelandFileUsingPOST1Response(rsp)
}

// UploadHomelandFileUsingPOST1WithBodyWithResponse request with arbitrary body returning *UploadHomelandFileUsingPOST1Response
func (c *ClientWithResponses) UploadHomelandFileUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, params *UploadHomelandFileUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadHomelandFileUsingPOST1Response, error) {
	rsp, err := c.UploadHomelandFileUsingPOST1WithBody(ctx, ugcId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadHomelandFileUsingPOST1Response(rsp)
}

// GetUgcInfoListUsingGETWithResponse request returning *GetUgcInfoListUsingGETResponse
func (c *ClientWithResponses) GetUgcInfoListUsingGETWithResponse(ctx context.Context, params *GetUgcInfoListUsingGETParams, reqEditors ...RequestEditorFn) (*GetUgcInfoListUsingGETResponse, error) {
	rsp, err := c.GetUgcInfoListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcInfoListUsingGETResponse(rsp)
}

// CreateUGCUsingPOSTWithBodyWithResponse request with arbitrary body returning *CreateUGCUsingPOSTResponse
func (c *ClientWithResponses) CreateUGCUsingPOSTWithBodyWithResponse(ctx context.Context, params *CreateUGCUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUGCUsingPOSTResponse, error) {
	rsp, err := c.CreateUGCUsingPOSTWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUGCUsingPOSTResponse(rsp)
}

// DownloadCountIncreaseUsingPOSTWithResponse request returning *DownloadCountIncreaseUsingPOSTResponse
func (c *ClientWithResponses) DownloadCountIncreaseUsingPOSTWithResponse(ctx context.Context, params *DownloadCountIncreaseUsingPOSTParams, reqEditors ...RequestEditorFn) (*DownloadCountIncreaseUsingPOSTResponse, error) {
	rsp, err := c.DownloadCountIncreaseUsingPOST(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadCountIncreaseUsingPOSTResponse(rsp)
}

// GetSimilarModUsingPOSTWithBodyWithResponse request with arbitrary body returning *GetSimilarModUsingPOSTResponse
func (c *ClientWithResponses) GetSimilarModUsingPOSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSimilarModUsingPOSTResponse, error) {
	rsp, err := c.GetSimilarModUsingPOSTWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSimilarModUsingPOSTResponse(rsp)
}

func (c *ClientWithResponses) GetSimilarModUsingPOSTWithResponse(ctx context.Context, body GetSimilarModUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSimilarModUsingPOSTResponse, error) {
	rsp, err := c.GetSimilarModUsingPOST(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSimilarModUsingPOSTResponse(rsp)
}

// UploadFileUsingPOSTWithBodyWithResponse request with arbitrary body returning *UploadFileUsingPOSTResponse
func (c *ClientWithResponses) UploadFileUsingPOSTWithBodyWithResponse(ctx context.Context, params *UploadFileUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileUsingPOSTResponse, error) {
	rsp, err := c.UploadFileUsingPOSTWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadFileUsingPOSTResponse(rsp)
}

// GetUgcStatisticalUsingGETWithResponse request returning *GetUgcStatisticalUsingGETResponse
func (c *ClientWithResponses) GetUgcStatisticalUsingGETWithResponse(ctx context.Context, params *GetUgcStatisticalUsingGETParams, reqEditors ...RequestEditorFn) (*GetUgcStatisticalUsingGETResponse, error) {
	rsp, err := c.GetUgcStatisticalUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcStatisticalUsingGETResponse(rsp)
}

// GetUgcInfoUsingGETWithResponse request returning *GetUgcInfoUsingGETResponse
func (c *ClientWithResponses) GetUgcInfoUsingGETWithResponse(ctx context.Context, ugcId string, params *GetUgcInfoUsingGETParams, reqEditors ...RequestEditorFn) (*GetUgcInfoUsingGETResponse, error) {
	rsp, err := c.GetUgcInfoUsingGET(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcInfoUsingGETResponse(rsp)
}

// InternalUgcUpdateUsingPOST1WithBodyWithResponse request with arbitrary body returning *InternalUgcUpdateUsingPOST1Response
func (c *ClientWithResponses) InternalUgcUpdateUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, params *InternalUgcUpdateUsingPOST1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUgcUpdateUsingPOST1Response, error) {
	rsp, err := c.InternalUgcUpdateUsingPOST1WithBody(ctx, ugcId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUgcUpdateUsingPOST1Response(rsp)
}

// InternalUgcUpdateUsingPUTWithBodyWithResponse request with arbitrary body returning *InternalUgcUpdateUsingPUTResponse
func (c *ClientWithResponses) InternalUgcUpdateUsingPUTWithBodyWithResponse(ctx context.Context, ugcId string, params *InternalUgcUpdateUsingPUTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUgcUpdateUsingPUTResponse, error) {
	rsp, err := c.InternalUgcUpdateUsingPUTWithBody(ctx, ugcId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUgcUpdateUsingPUTResponse(rsp)
}

// InternalUgcUpdateUsingDELETEWithResponse request returning *InternalUgcUpdateUsingDELETEResponse
func (c *ClientWithResponses) InternalUgcUpdateUsingDELETEWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*InternalUgcUpdateUsingDELETEResponse, error) {
	rsp, err := c.InternalUgcUpdateUsingDELETE(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUgcUpdateUsingDELETEResponse(rsp)
}

// InternalUgcUpdateUsingPOSTWithResponse request returning *InternalUgcUpdateUsingPOSTResponse
func (c *ClientWithResponses) InternalUgcUpdateUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*InternalUgcUpdateUsingPOSTResponse, error) {
	rsp, err := c.InternalUgcUpdateUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUgcUpdateUsingPOSTResponse(rsp)
}

// UgcInternalResourceDownloadUsingPOSTWithResponse request returning *UgcInternalResourceDownloadUsingPOSTResponse
func (c *ClientWithResponses) UgcInternalResourceDownloadUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UgcInternalResourceDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcInternalResourceDownloadUsingPOSTResponse, error) {
	rsp, err := c.UgcInternalResourceDownloadUsingPOST(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcInternalResourceDownloadUsingPOSTResponse(rsp)
}

// UgcInternalGetUsingPOSTWithBodyWithResponse request with arbitrary body returning *UgcInternalGetUsingPOSTResponse
func (c *ClientWithResponses) UgcInternalGetUsingPOSTWithBodyWithResponse(ctx context.Context, ugcId string, params *UgcInternalGetUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcInternalGetUsingPOSTResponse, error) {
	rsp, err := c.UgcInternalGetUsingPOSTWithBody(ctx, ugcId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcInternalGetUsingPOSTResponse(rsp)
}

func (c *ClientWithResponses) UgcInternalGetUsingPOSTWithFormdataBodyWithResponse(ctx context.Context, ugcId string, params *UgcInternalGetUsingPOSTParams, body UgcInternalGetUsingPOSTFormdataRequestBody, reqEditors ...RequestEditorFn) (*UgcInternalGetUsingPOSTResponse, error) {
	rsp, err := c.UgcInternalGetUsingPOSTWithFormdataBody(ctx, ugcId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcInternalGetUsingPOSTResponse(rsp)
}

// UgcInternalPlayUsingPOSTWithResponse request returning *UgcInternalPlayUsingPOSTResponse
func (c *ClientWithResponses) UgcInternalPlayUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UgcInternalPlayUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcInternalPlayUsingPOSTResponse, error) {
	rsp, err := c.UgcInternalPlayUsingPOST(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcInternalPlayUsingPOSTResponse(rsp)
}

// InternalVersionListUsingGETWithResponse request returning *InternalVersionListUsingGETResponse
func (c *ClientWithResponses) InternalVersionListUsingGETWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*InternalVersionListUsingGETResponse, error) {
	rsp, err := c.InternalVersionListUsingGET(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalVersionListUsingGETResponse(rsp)
}

// UgcVersionCreateUsingPOSTWithBodyWithResponse request with arbitrary body returning *UgcVersionCreateUsingPOSTResponse
func (c *ClientWithResponses) UgcVersionCreateUsingPOSTWithBodyWithResponse(ctx context.Context, ugcId string, params *UgcVersionCreateUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcVersionCreateUsingPOSTResponse, error) {
	rsp, err := c.UgcVersionCreateUsingPOSTWithBody(ctx, ugcId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcVersionCreateUsingPOSTResponse(rsp)
}

// InternalDeleteVersionUsingDELETEWithResponse request returning *InternalDeleteVersionUsingDELETEResponse
func (c *ClientWithResponses) InternalDeleteVersionUsingDELETEWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*InternalDeleteVersionUsingDELETEResponse, error) {
	rsp, err := c.InternalDeleteVersionUsingDELETE(ctx, ugcId, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalDeleteVersionUsingDELETEResponse(rsp)
}

// InternalUpdateVersionUsingPOSTWithBodyWithResponse request with arbitrary body returning *InternalUpdateVersionUsingPOSTResponse
func (c *ClientWithResponses) InternalUpdateVersionUsingPOSTWithBodyWithResponse(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUpdateVersionUsingPOSTResponse, error) {
	rsp, err := c.InternalUpdateVersionUsingPOSTWithBody(ctx, ugcId, versionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUpdateVersionUsingPOSTResponse(rsp)
}

// InternalUpdateVersionUsingPUTWithBodyWithResponse request with arbitrary body returning *InternalUpdateVersionUsingPUTResponse
func (c *ClientWithResponses) InternalUpdateVersionUsingPUTWithBodyWithResponse(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUpdateVersionUsingPUTResponse, error) {
	rsp, err := c.InternalUpdateVersionUsingPUTWithBody(ctx, ugcId, versionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUpdateVersionUsingPUTResponse(rsp)
}

// InternalDeleteVersion2UsingPOSTWithResponse request returning *InternalDeleteVersion2UsingPOSTResponse
func (c *ClientWithResponses) InternalDeleteVersion2UsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*InternalDeleteVersion2UsingPOSTResponse, error) {
	rsp, err := c.InternalDeleteVersion2UsingPOST(ctx, ugcId, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalDeleteVersion2UsingPOSTResponse(rsp)
}

// UgcVersionReviewUsingPOSTWithResponse request returning *UgcVersionReviewUsingPOSTResponse
func (c *ClientWithResponses) UgcVersionReviewUsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcVersionReviewUsingPOSTResponse, error) {
	rsp, err := c.UgcVersionReviewUsingPOST(ctx, ugcId, versionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcVersionReviewUsingPOSTResponse(rsp)
}

// GetUGCListUsingGETWithResponse request returning *GetUGCListUsingGETResponse
func (c *ClientWithResponses) GetUGCListUsingGETWithResponse(ctx context.Context, params *GetUGCListUsingGETParams, reqEditors ...RequestEditorFn) (*GetUGCListUsingGETResponse, error) {
	rsp, err := c.GetUGCListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUGCListUsingGETResponse(rsp)
}

// MyTagUsingGETWithResponse request returning *MyTagUsingGETResponse
func (c *ClientWithResponses) MyTagUsingGETWithResponse(ctx context.Context, params *MyTagUsingGETParams, reqEditors ...RequestEditorFn) (*MyTagUsingGETResponse, error) {
	rsp, err := c.MyTagUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMyTagUsingGETResponse(rsp)
}

// GetUgcV21TabWithResponse request returning *GetUgcV21TabResponse
func (c *ClientWithResponses) GetUgcV21TabWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUgcV21TabResponse, error) {
	rsp, err := c.GetUgcV21Tab(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcV21TabResponse(rsp)
}

// TagListUsingGET1WithResponse request returning *TagListUsingGET1Response
func (c *ClientWithResponses) TagListUsingGET1WithResponse(ctx context.Context, params *TagListUsingGET1Params, reqEditors ...RequestEditorFn) (*TagListUsingGET1Response, error) {
	rsp, err := c.TagListUsingGET1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagListUsingGET1Response(rsp)
}

// CreateUsingPOST1WithResponse request returning *CreateUsingPOST1Response
func (c *ClientWithResponses) CreateUsingPOST1WithResponse(ctx context.Context, params *CreateUsingPOST1Params, reqEditors ...RequestEditorFn) (*CreateUsingPOST1Response, error) {
	rsp, err := c.CreateUsingPOST1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsingPOST1Response(rsp)
}

// TagOperatingUsingGETWithResponse request returning *TagOperatingUsingGETResponse
func (c *ClientWithResponses) TagOperatingUsingGETWithResponse(ctx context.Context, params *TagOperatingUsingGETParams, reqEditors ...RequestEditorFn) (*TagOperatingUsingGETResponse, error) {
	rsp, err := c.TagOperatingUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagOperatingUsingGETResponse(rsp)
}

// TagSearchUsingGETWithResponse request returning *TagSearchUsingGETResponse
func (c *ClientWithResponses) TagSearchUsingGETWithResponse(ctx context.Context, params *TagSearchUsingGETParams, reqEditors ...RequestEditorFn) (*TagSearchUsingGETResponse, error) {
	rsp, err := c.TagSearchUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagSearchUsingGETResponse(rsp)
}

// UpdateUsingPOSTWithBodyWithResponse request with arbitrary body returning *UpdateUsingPOSTResponse
func (c *ClientWithResponses) UpdateUsingPOSTWithBodyWithResponse(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPOSTResponse, error) {
	rsp, err := c.UpdateUsingPOSTWithBody(ctx, tagId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPOSTResponse(rsp)
}

func (c *ClientWithResponses) UpdateUsingPOSTWithResponse(ctx context.Context, tagId string, body UpdateUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPOSTResponse, error) {
	rsp, err := c.UpdateUsingPOST(ctx, tagId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPOSTResponse(rsp)
}

// UpdateUsingPUTWithBodyWithResponse request with arbitrary body returning *UpdateUsingPUTResponse
func (c *ClientWithResponses) UpdateUsingPUTWithBodyWithResponse(ctx context.Context, tagId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPUTResponse, error) {
	rsp, err := c.UpdateUsingPUTWithBody(ctx, tagId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPUTResponse(rsp)
}

func (c *ClientWithResponses) UpdateUsingPUTWithResponse(ctx context.Context, tagId string, body UpdateUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPUTResponse, error) {
	rsp, err := c.UpdateUsingPUT(ctx, tagId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPUTResponse(rsp)
}

// GetNewUgcListUsingGETWithResponse request returning *GetNewUgcListUsingGETResponse
func (c *ClientWithResponses) GetNewUgcListUsingGETWithResponse(ctx context.Context, params *GetNewUgcListUsingGETParams, reqEditors ...RequestEditorFn) (*GetNewUgcListUsingGETResponse, error) {
	rsp, err := c.GetNewUgcListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewUgcListUsingGETResponse(rsp)
}

// CreateUsingPOST2WithBodyWithResponse request with arbitrary body returning *CreateUsingPOST2Response
func (c *ClientWithResponses) CreateUsingPOST2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsingPOST2Response, error) {
	rsp, err := c.CreateUsingPOST2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsingPOST2Response(rsp)
}

// GetMemberUGCPublishedDynamicUsingGETWithResponse request returning *GetMemberUGCPublishedDynamicUsingGETResponse
func (c *ClientWithResponses) GetMemberUGCPublishedDynamicUsingGETWithResponse(ctx context.Context, params *GetMemberUGCPublishedDynamicUsingGETParams, reqEditors ...RequestEditorFn) (*GetMemberUGCPublishedDynamicUsingGETResponse, error) {
	rsp, err := c.GetMemberUGCPublishedDynamicUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberUGCPublishedDynamicUsingGETResponse(rsp)
}

// GenreListUsingGET1WithResponse request returning *GenreListUsingGET1Response
func (c *ClientWithResponses) GenreListUsingGET1WithResponse(ctx context.Context, params *GenreListUsingGET1Params, reqEditors ...RequestEditorFn) (*GenreListUsingGET1Response, error) {
	rsp, err := c.GenreListUsingGET1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenreListUsingGET1Response(rsp)
}

// UgcGetRecordsListUsingGETWithResponse request returning *UgcGetRecordsListUsingGETResponse
func (c *ClientWithResponses) UgcGetRecordsListUsingGETWithResponse(ctx context.Context, params *UgcGetRecordsListUsingGETParams, reqEditors ...RequestEditorFn) (*UgcGetRecordsListUsingGETResponse, error) {
	rsp, err := c.UgcGetRecordsListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcGetRecordsListUsingGETResponse(rsp)
}

// GetUGCDynamicUsingGETWithResponse request returning *GetUGCDynamicUsingGETResponse
func (c *ClientWithResponses) GetUGCDynamicUsingGETWithResponse(ctx context.Context, params *GetUGCDynamicUsingGETParams, reqEditors ...RequestEditorFn) (*GetUGCDynamicUsingGETResponse, error) {
	rsp, err := c.GetUGCDynamicUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUGCDynamicUsingGETResponse(rsp)
}

// DeleteMyUGCDynamicUsingDELETEWithResponse request returning *DeleteMyUGCDynamicUsingDELETEResponse
func (c *ClientWithResponses) DeleteMyUGCDynamicUsingDELETEWithResponse(ctx context.Context, params *DeleteMyUGCDynamicUsingDELETEParams, reqEditors ...RequestEditorFn) (*DeleteMyUGCDynamicUsingDELETEResponse, error) {
	rsp, err := c.DeleteMyUGCDynamicUsingDELETE(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMyUGCDynamicUsingDELETEResponse(rsp)
}

// DeleteMyUGCDynamicUsingPOSTWithResponse request returning *DeleteMyUGCDynamicUsingPOSTResponse
func (c *ClientWithResponses) DeleteMyUGCDynamicUsingPOSTWithResponse(ctx context.Context, params *DeleteMyUGCDynamicUsingPOSTParams, reqEditors ...RequestEditorFn) (*DeleteMyUGCDynamicUsingPOSTResponse, error) {
	rsp, err := c.DeleteMyUGCDynamicUsingPOST(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMyUGCDynamicUsingPOSTResponse(rsp)
}

// GetMyUgcListUsingGETWithResponse request returning *GetMyUgcListUsingGETResponse
func (c *ClientWithResponses) GetMyUgcListUsingGETWithResponse(ctx context.Context, params *GetMyUgcListUsingGETParams, reqEditors ...RequestEditorFn) (*GetMyUgcListUsingGETResponse, error) {
	rsp, err := c.GetMyUgcListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyUgcListUsingGETResponse(rsp)
}

// GetUgcV21UgcMyugcSearchWithResponse request returning *GetUgcV21UgcMyugcSearchResponse
func (c *ClientWithResponses) GetUgcV21UgcMyugcSearchWithResponse(ctx context.Context, params *GetUgcV21UgcMyugcSearchParams, reqEditors ...RequestEditorFn) (*GetUgcV21UgcMyugcSearchResponse, error) {
	rsp, err := c.GetUgcV21UgcMyugcSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcV21UgcMyugcSearchResponse(rsp)
}

// RecentPlayListUsingGETWithResponse request returning *RecentPlayListUsingGETResponse
func (c *ClientWithResponses) RecentPlayListUsingGETWithResponse(ctx context.Context, params *RecentPlayListUsingGETParams, reqEditors ...RequestEditorFn) (*RecentPlayListUsingGETResponse, error) {
	rsp, err := c.RecentPlayListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecentPlayListUsingGETResponse(rsp)
}

// GetRecordsListUsingGETWithResponse request returning *GetRecordsListUsingGETResponse
func (c *ClientWithResponses) GetRecordsListUsingGETWithResponse(ctx context.Context, params *GetRecordsListUsingGETParams, reqEditors ...RequestEditorFn) (*GetRecordsListUsingGETResponse, error) {
	rsp, err := c.GetRecordsListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecordsListUsingGETResponse(rsp)
}

// MyRecordsEmptyUsingDELETEWithResponse request returning *MyRecordsEmptyUsingDELETEResponse
func (c *ClientWithResponses) MyRecordsEmptyUsingDELETEWithResponse(ctx context.Context, params *MyRecordsEmptyUsingDELETEParams, reqEditors ...RequestEditorFn) (*MyRecordsEmptyUsingDELETEResponse, error) {
	rsp, err := c.MyRecordsEmptyUsingDELETE(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMyRecordsEmptyUsingDELETEResponse(rsp)
}

// MyRecordsEmptyUsingPOSTWithResponse request returning *MyRecordsEmptyUsingPOSTResponse
func (c *ClientWithResponses) MyRecordsEmptyUsingPOSTWithResponse(ctx context.Context, params *MyRecordsEmptyUsingPOSTParams, reqEditors ...RequestEditorFn) (*MyRecordsEmptyUsingPOSTResponse, error) {
	rsp, err := c.MyRecordsEmptyUsingPOST(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMyRecordsEmptyUsingPOSTResponse(rsp)
}

// InsertUGCReportUsingPOSTWithBodyWithResponse request with arbitrary body returning *InsertUGCReportUsingPOSTResponse
func (c *ClientWithResponses) InsertUGCReportUsingPOSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertUGCReportUsingPOSTResponse, error) {
	rsp, err := c.InsertUGCReportUsingPOSTWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertUGCReportUsingPOSTResponse(rsp)
}

func (c *ClientWithResponses) InsertUGCReportUsingPOSTWithResponse(ctx context.Context, body InsertUGCReportUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertUGCReportUsingPOSTResponse, error) {
	rsp, err := c.InsertUGCReportUsingPOST(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertUGCReportUsingPOSTResponse(rsp)
}

// SearchUsingGET1WithResponse request returning *SearchUsingGET1Response
func (c *ClientWithResponses) SearchUsingGET1WithResponse(ctx context.Context, params *SearchUsingGET1Params, reqEditors ...RequestEditorFn) (*SearchUsingGET1Response, error) {
	rsp, err := c.SearchUsingGET1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchUsingGET1Response(rsp)
}

// GetSimilarModUsingPOST1WithBodyWithResponse request with arbitrary body returning *GetSimilarModUsingPOST1Response
func (c *ClientWithResponses) GetSimilarModUsingPOST1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSimilarModUsingPOST1Response, error) {
	rsp, err := c.GetSimilarModUsingPOST1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSimilarModUsingPOST1Response(rsp)
}

func (c *ClientWithResponses) GetSimilarModUsingPOST1WithResponse(ctx context.Context, body GetSimilarModUsingPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*GetSimilarModUsingPOST1Response, error) {
	rsp, err := c.GetSimilarModUsingPOST1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSimilarModUsingPOST1Response(rsp)
}

// PretreatmentUGCSortingUsingPOSTWithResponse request returning *PretreatmentUGCSortingUsingPOSTResponse
func (c *ClientWithResponses) PretreatmentUGCSortingUsingPOSTWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PretreatmentUGCSortingUsingPOSTResponse, error) {
	rsp, err := c.PretreatmentUGCSortingUsingPOST(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePretreatmentUGCSortingUsingPOSTResponse(rsp)
}

// UploadUsingPOSTWithBodyWithResponse request with arbitrary body returning *UploadUsingPOSTResponse
func (c *ClientWithResponses) UploadUsingPOSTWithBodyWithResponse(ctx context.Context, params *UploadUsingPOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadUsingPOSTResponse, error) {
	rsp, err := c.UploadUsingPOSTWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadUsingPOSTResponse(rsp)
}

// GetUgcStatisticalUsingGET1WithResponse request returning *GetUgcStatisticalUsingGET1Response
func (c *ClientWithResponses) GetUgcStatisticalUsingGET1WithResponse(ctx context.Context, params *GetUgcStatisticalUsingGET1Params, reqEditors ...RequestEditorFn) (*GetUgcStatisticalUsingGET1Response, error) {
	rsp, err := c.GetUgcStatisticalUsingGET1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcStatisticalUsingGET1Response(rsp)
}

// GetMemberFavoriteListUsingGETWithResponse request returning *GetMemberFavoriteListUsingGETResponse
func (c *ClientWithResponses) GetMemberFavoriteListUsingGETWithResponse(ctx context.Context, memberNo int64, params *GetMemberFavoriteListUsingGETParams, reqEditors ...RequestEditorFn) (*GetMemberFavoriteListUsingGETResponse, error) {
	rsp, err := c.GetMemberFavoriteListUsingGET(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberFavoriteListUsingGETResponse(rsp)
}

// GetMemberUGCListUsingGETWithResponse request returning *GetMemberUGCListUsingGETResponse
func (c *ClientWithResponses) GetMemberUGCListUsingGETWithResponse(ctx context.Context, memberNo int64, params *GetMemberUGCListUsingGETParams, reqEditors ...RequestEditorFn) (*GetMemberUGCListUsingGETResponse, error) {
	rsp, err := c.GetMemberUGCListUsingGET(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberUGCListUsingGETResponse(rsp)
}

// FileIdIsUseUsingGETWithResponse request returning *FileIdIsUseUsingGETResponse
func (c *ClientWithResponses) FileIdIsUseUsingGETWithResponse(ctx context.Context, packageId string, reqEditors ...RequestEditorFn) (*FileIdIsUseUsingGETResponse, error) {
	rsp, err := c.FileIdIsUseUsingGET(ctx, packageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFileIdIsUseUsingGETResponse(rsp)
}

// DelUgcUsingDELETEWithResponse request returning *DelUgcUsingDELETEResponse
func (c *ClientWithResponses) DelUgcUsingDELETEWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DelUgcUsingDELETEResponse, error) {
	rsp, err := c.DelUgcUsingDELETE(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelUgcUsingDELETEResponse(rsp)
}

// UgcInfoUsingGET1WithResponse request returning *UgcInfoUsingGET1Response
func (c *ClientWithResponses) UgcInfoUsingGET1WithResponse(ctx context.Context, ugcId string, params *UgcInfoUsingGET1Params, reqEditors ...RequestEditorFn) (*UgcInfoUsingGET1Response, error) {
	rsp, err := c.UgcInfoUsingGET1(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcInfoUsingGET1Response(rsp)
}

// UgcUpdateUsingPOST1WithBodyWithResponse request with arbitrary body returning *UgcUpdateUsingPOST1Response
func (c *ClientWithResponses) UgcUpdateUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcUpdateUsingPOST1Response, error) {
	rsp, err := c.UgcUpdateUsingPOST1WithBody(ctx, ugcId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcUpdateUsingPOST1Response(rsp)
}

// UgcUpdateUsingPUT1WithBodyWithResponse request with arbitrary body returning *UgcUpdateUsingPUT1Response
func (c *ClientWithResponses) UgcUpdateUsingPUT1WithBodyWithResponse(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcUpdateUsingPUT1Response, error) {
	rsp, err := c.UgcUpdateUsingPUT1WithBody(ctx, ugcId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcUpdateUsingPUT1Response(rsp)
}

// DelUgc2UsingPOSTWithResponse request returning *DelUgc2UsingPOSTResponse
func (c *ClientWithResponses) DelUgc2UsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DelUgc2UsingPOSTResponse, error) {
	rsp, err := c.DelUgc2UsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelUgc2UsingPOSTResponse(rsp)
}

// GetUgcV21UgcUgcIdDownloadWithResponse request returning *GetUgcV21UgcUgcIdDownloadResponse
func (c *ClientWithResponses) GetUgcV21UgcUgcIdDownloadWithResponse(ctx context.Context, ugcId UgcId, params *GetUgcV21UgcUgcIdDownloadParams, reqEditors ...RequestEditorFn) (*GetUgcV21UgcUgcIdDownloadResponse, error) {
	rsp, err := c.GetUgcV21UgcUgcIdDownload(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcV21UgcUgcIdDownloadResponse(rsp)
}

// UgcResourceDownloadUsingPOSTWithResponse request returning *UgcResourceDownloadUsingPOSTResponse
func (c *ClientWithResponses) UgcResourceDownloadUsingPOSTWithResponse(ctx context.Context, ugcId UgcId, params *UgcResourceDownloadUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcResourceDownloadUsingPOSTResponse, error) {
	rsp, err := c.UgcResourceDownloadUsingPOST(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcResourceDownloadUsingPOSTResponse(rsp)
}

// GetUgcEvaluateUsingGETWithResponse request returning *GetUgcEvaluateUsingGETResponse
func (c *ClientWithResponses) GetUgcEvaluateUsingGETWithResponse(ctx context.Context, ugcId string, params *GetUgcEvaluateUsingGETParams, reqEditors ...RequestEditorFn) (*GetUgcEvaluateUsingGETResponse, error) {
	rsp, err := c.GetUgcEvaluateUsingGET(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUgcEvaluateUsingGETResponse(rsp)
}

// UpdateEvaluateUsingPOSTWithResponse request returning *UpdateEvaluateUsingPOSTResponse
func (c *ClientWithResponses) UpdateEvaluateUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UpdateEvaluateUsingPOSTParams, reqEditors ...RequestEditorFn) (*UpdateEvaluateUsingPOSTResponse, error) {
	rsp, err := c.UpdateEvaluateUsingPOST(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEvaluateUsingPOSTResponse(rsp)
}

// UpdateEvaluateUsingPUTWithResponse request returning *UpdateEvaluateUsingPUTResponse
func (c *ClientWithResponses) UpdateEvaluateUsingPUTWithResponse(ctx context.Context, ugcId string, params *UpdateEvaluateUsingPUTParams, reqEditors ...RequestEditorFn) (*UpdateEvaluateUsingPUTResponse, error) {
	rsp, err := c.UpdateEvaluateUsingPUT(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEvaluateUsingPUTResponse(rsp)
}

// EvaluateDelUsingPOSTWithResponse request returning *EvaluateDelUsingPOSTResponse
func (c *ClientWithResponses) EvaluateDelUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*EvaluateDelUsingPOSTResponse, error) {
	rsp, err := c.EvaluateDelUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateDelUsingPOSTResponse(rsp)
}

// FavoriteAddUsingPOSTWithResponse request returning *FavoriteAddUsingPOSTResponse
func (c *ClientWithResponses) FavoriteAddUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*FavoriteAddUsingPOSTResponse, error) {
	rsp, err := c.FavoriteAddUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFavoriteAddUsingPOSTResponse(rsp)
}

// DelFavoriteUsingDELETEWithResponse request returning *DelFavoriteUsingDELETEResponse
func (c *ClientWithResponses) DelFavoriteUsingDELETEWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DelFavoriteUsingDELETEResponse, error) {
	rsp, err := c.DelFavoriteUsingDELETE(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelFavoriteUsingDELETEResponse(rsp)
}

// DelFavoriteUsingPOSTWithResponse request returning *DelFavoriteUsingPOSTResponse
func (c *ClientWithResponses) DelFavoriteUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*DelFavoriteUsingPOSTResponse, error) {
	rsp, err := c.DelFavoriteUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelFavoriteUsingPOSTResponse(rsp)
}

// UgcGetUsingPOSTWithResponse request returning *UgcGetUsingPOSTResponse
func (c *ClientWithResponses) UgcGetUsingPOSTWithResponse(ctx context.Context, ugcId string, params *UgcGetUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcGetUsingPOSTResponse, error) {
	rsp, err := c.UgcGetUsingPOST(ctx, ugcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcGetUsingPOSTResponse(rsp)
}

// UgcHideUsingPOSTWithResponse request returning *UgcHideUsingPOSTResponse
func (c *ClientWithResponses) UgcHideUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*UgcHideUsingPOSTResponse, error) {
	rsp, err := c.UgcHideUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcHideUsingPOSTResponse(rsp)
}

// UgcPlayUsingPOSTWithResponse request returning *UgcPlayUsingPOSTResponse
func (c *ClientWithResponses) UgcPlayUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*UgcPlayUsingPOSTResponse, error) {
	rsp, err := c.UgcPlayUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcPlayUsingPOSTResponse(rsp)
}

// EvaluateRatingUsingGETWithResponse request returning *EvaluateRatingUsingGETResponse
func (c *ClientWithResponses) EvaluateRatingUsingGETWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*EvaluateRatingUsingGETResponse, error) {
	rsp, err := c.EvaluateRatingUsingGET(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateRatingUsingGETResponse(rsp)
}

// UgcShareUsingPOSTWithResponse request returning *UgcShareUsingPOSTResponse
func (c *ClientWithResponses) UgcShareUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*UgcShareUsingPOSTResponse, error) {
	rsp, err := c.UgcShareUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcShareUsingPOSTResponse(rsp)
}

// UgcShowUsingPOSTWithResponse request returning *UgcShowUsingPOSTResponse
func (c *ClientWithResponses) UgcShowUsingPOSTWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*UgcShowUsingPOSTResponse, error) {
	rsp, err := c.UgcShowUsingPOST(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcShowUsingPOSTResponse(rsp)
}

// VersionListUsingGETWithResponse request returning *VersionListUsingGETResponse
func (c *ClientWithResponses) VersionListUsingGETWithResponse(ctx context.Context, ugcId string, reqEditors ...RequestEditorFn) (*VersionListUsingGETResponse, error) {
	rsp, err := c.VersionListUsingGET(ctx, ugcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersionListUsingGETResponse(rsp)
}

// UgcVersionCreateUsingPOST1WithBodyWithResponse request with arbitrary body returning *UgcVersionCreateUsingPOST1Response
func (c *ClientWithResponses) UgcVersionCreateUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UgcVersionCreateUsingPOST1Response, error) {
	rsp, err := c.UgcVersionCreateUsingPOST1WithBody(ctx, ugcId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcVersionCreateUsingPOST1Response(rsp)
}

// DeleteVersionUsingDELETEWithResponse request returning *DeleteVersionUsingDELETEResponse
func (c *ClientWithResponses) DeleteVersionUsingDELETEWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*DeleteVersionUsingDELETEResponse, error) {
	rsp, err := c.DeleteVersionUsingDELETE(ctx, ugcId, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVersionUsingDELETEResponse(rsp)
}

// UpdateVersionUsingPOST1WithBodyWithResponse request with arbitrary body returning *UpdateVersionUsingPOST1Response
func (c *ClientWithResponses) UpdateVersionUsingPOST1WithBodyWithResponse(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVersionUsingPOST1Response, error) {
	rsp, err := c.UpdateVersionUsingPOST1WithBody(ctx, ugcId, versionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVersionUsingPOST1Response(rsp)
}

// UpdateVersionUsingPUT1WithBodyWithResponse request with arbitrary body returning *UpdateVersionUsingPUT1Response
func (c *ClientWithResponses) UpdateVersionUsingPUT1WithBodyWithResponse(ctx context.Context, ugcId string, versionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVersionUsingPUT1Response, error) {
	rsp, err := c.UpdateVersionUsingPUT1WithBody(ctx, ugcId, versionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVersionUsingPUT1Response(rsp)
}

// DeleteVersion2UsingPOSTWithResponse request returning *DeleteVersion2UsingPOSTResponse
func (c *ClientWithResponses) DeleteVersion2UsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*DeleteVersion2UsingPOSTResponse, error) {
	rsp, err := c.DeleteVersion2UsingPOST(ctx, ugcId, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVersion2UsingPOSTResponse(rsp)
}

// UgcVersionPublishUsingPOSTWithResponse request returning *UgcVersionPublishUsingPOSTResponse
func (c *ClientWithResponses) UgcVersionPublishUsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, reqEditors ...RequestEditorFn) (*UgcVersionPublishUsingPOSTResponse, error) {
	rsp, err := c.UgcVersionPublishUsingPOST(ctx, ugcId, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcVersionPublishUsingPOSTResponse(rsp)
}

// UgcVersionReviewUsingPOST1WithResponse request returning *UgcVersionReviewUsingPOST1Response
func (c *ClientWithResponses) UgcVersionReviewUsingPOST1WithResponse(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewUsingPOST1Params, reqEditors ...RequestEditorFn) (*UgcVersionReviewUsingPOST1Response, error) {
	rsp, err := c.UgcVersionReviewUsingPOST1(ctx, ugcId, versionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcVersionReviewUsingPOST1Response(rsp)
}

// UgcVersionReviewCancelUsingPOSTWithResponse request returning *UgcVersionReviewCancelUsingPOSTResponse
func (c *ClientWithResponses) UgcVersionReviewCancelUsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int, params *UgcVersionReviewCancelUsingPOSTParams, reqEditors ...RequestEditorFn) (*UgcVersionReviewCancelUsingPOSTResponse, error) {
	rsp, err := c.UgcVersionReviewCancelUsingPOST(ctx, ugcId, versionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcVersionReviewCancelUsingPOSTResponse(rsp)
}

// ClearMODRatingUsingPOSTWithBodyWithResponse request with arbitrary body returning *ClearMODRatingUsingPOSTResponse
func (c *ClientWithResponses) ClearMODRatingUsingPOSTWithBodyWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClearMODRatingUsingPOSTResponse, error) {
	rsp, err := c.ClearMODRatingUsingPOSTWithBody(ctx, platformServiceType, platformServiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClearMODRatingUsingPOSTResponse(rsp)
}

func (c *ClientWithResponses) ClearMODRatingUsingPOSTWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, body ClearMODRatingUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*ClearMODRatingUsingPOSTResponse, error) {
	rsp, err := c.ClearMODRatingUsingPOST(ctx, platformServiceType, platformServiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClearMODRatingUsingPOSTResponse(rsp)
}

// SoldOutMODAllUsingPOSTWithBodyWithResponse request with arbitrary body returning *SoldOutMODAllUsingPOSTResponse
func (c *ClientWithResponses) SoldOutMODAllUsingPOSTWithBodyWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SoldOutMODAllUsingPOSTResponse, error) {
	rsp, err := c.SoldOutMODAllUsingPOSTWithBody(ctx, platformServiceType, platformServiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSoldOutMODAllUsingPOSTResponse(rsp)
}

func (c *ClientWithResponses) SoldOutMODAllUsingPOSTWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, body SoldOutMODAllUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*SoldOutMODAllUsingPOSTResponse, error) {
	rsp, err := c.SoldOutMODAllUsingPOST(ctx, platformServiceType, platformServiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSoldOutMODAllUsingPOSTResponse(rsp)
}

// SoldOutMODUsingPOSTWithBodyWithResponse request with arbitrary body returning *SoldOutMODUsingPOSTResponse
func (c *ClientWithResponses) SoldOutMODUsingPOSTWithBodyWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SoldOutMODUsingPOSTResponse, error) {
	rsp, err := c.SoldOutMODUsingPOSTWithBody(ctx, platformServiceType, platformServiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSoldOutMODUsingPOSTResponse(rsp)
}

func (c *ClientWithResponses) SoldOutMODUsingPOSTWithResponse(ctx context.Context, platformServiceType string, platformServiceId string, body SoldOutMODUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*SoldOutMODUsingPOSTResponse, error) {
	rsp, err := c.SoldOutMODUsingPOST(ctx, platformServiceType, platformServiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSoldOutMODUsingPOSTResponse(rsp)
}

// TagDelUsingDELETEWithResponse request returning *TagDelUsingDELETEResponse
func (c *ClientWithResponses) TagDelUsingDELETEWithResponse(ctx context.Context, tagId string, reqEditors ...RequestEditorFn) (*TagDelUsingDELETEResponse, error) {
	rsp, err := c.TagDelUsingDELETE(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagDelUsingDELETEResponse(rsp)
}

// UgcChooseVersionUsingPOSTWithResponse request returning *UgcChooseVersionUsingPOSTResponse
func (c *ClientWithResponses) UgcChooseVersionUsingPOSTWithResponse(ctx context.Context, ugcId string, versionId int32, reqEditors ...RequestEditorFn) (*UgcChooseVersionUsingPOSTResponse, error) {
	rsp, err := c.UgcChooseVersionUsingPOST(ctx, ugcId, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUgcChooseVersionUsingPOSTResponse(rsp)
}

// ParseGetBackpacksUsingGETResponse parses an HTTP response from a GetBackpacksUsingGETWithResponse call
func ParseGetBackpacksUsingGETResponse(rsp *http.Response) (*GetBackpacksUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackpacksUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBackpackListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddBackpackAssetUsingPOSTResponse parses an HTTP response from a AddBackpackAssetUsingPOSTWithResponse call
func ParseAddBackpackAssetUsingPOSTResponse(rsp *http.Response) (*AddBackpackAssetUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddBackpackAssetUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBackpackResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchBackpackAssetUsingGETResponse parses an HTTP response from a SearchBackpackAssetUsingGETWithResponse call
func ParseSearchBackpackAssetUsingGETResponse(rsp *http.Response) (*SearchBackpackAssetUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchBackpackAssetUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBackpackListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveBackpackAssetUsingDELETEResponse parses an HTTP response from a RemoveBackpackAssetUsingDELETEWithResponse call
func ParseRemoveBackpackAssetUsingDELETEResponse(rsp *http.Response) (*RemoveBackpackAssetUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveBackpackAssetUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBackpackResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveBackpackAssetUsingPOSTResponse parses an HTTP response from a RemoveBackpackAssetUsingPOSTWithResponse call
func ParseRemoveBackpackAssetUsingPOSTResponse(rsp *http.Response) (*RemoveBackpackAssetUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveBackpackAssetUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBackpackResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBackpackAssetDownloadUsingPOSTResponse parses an HTTP response from a BackpackAssetDownloadUsingPOSTWithResponse call
func ParseBackpackAssetDownloadUsingPOSTResponse(rsp *http.Response) (*BackpackAssetDownloadUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackpackAssetDownloadUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMyEvaluateUsingGETResponse parses an HTTP response from a MyEvaluateUsingGETWithResponse call
func ParseMyEvaluateUsingGETResponse(rsp *http.Response) (*MyEvaluateUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MyEvaluateUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluateInfoListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvaluateUsingPOSTResponse parses an HTTP response from a EvaluateUsingPOSTWithResponse call
func ParseEvaluateUsingPOSTResponse(rsp *http.Response) (*EvaluateUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluateInfoResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFavoriteListUsingGETResponse parses an HTTP response from a FavoriteListUsingGETWithResponse call
func ParseFavoriteListUsingGETResponse(rsp *http.Response) (*FavoriteListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FavoriteListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFavoriteUsingPOSTResponse parses an HTTP response from a FavoriteUsingPOSTWithResponse call
func ParseFavoriteUsingPOSTResponse(rsp *http.Response) (*FavoriteUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FavoriteUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FavoriteInfoListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelBatchFavoriteUsingDELETEResponse parses an HTTP response from a DelBatchFavoriteUsingDELETEWithResponse call
func ParseDelBatchFavoriteUsingDELETEResponse(rsp *http.Response) (*DelBatchFavoriteUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelBatchFavoriteUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelBatchFavoriteUsingPOSTResponse parses an HTTP response from a DelBatchFavoriteUsingPOSTWithResponse call
func ParseDelBatchFavoriteUsingPOSTResponse(rsp *http.Response) (*DelBatchFavoriteUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelBatchFavoriteUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcV21FavoriteSearchResponse parses an HTTP response from a GetUgcV21FavoriteSearchWithResponse call
func ParseGetUgcV21FavoriteSearchResponse(rsp *http.Response) (*GetUgcV21FavoriteSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcV21FavoriteSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcGameResourcesDownloadUsingPOSTResponse parses an HTTP response from a UgcGameResourcesDownloadUsingPOSTWithResponse call
func ParseUgcGameResourcesDownloadUsingPOSTResponse(rsp *http.Response) (*UgcGameResourcesDownloadUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcGameResourcesDownloadUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindMemberHomelandUsingGETResponse parses an HTTP response from a FindMemberHomelandUsingGETWithResponse call
func ParseFindMemberHomelandUsingGETResponse(rsp *http.Response) (*FindMemberHomelandUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindMemberHomelandUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllowedApplyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsertHomelandUsingPOSTResponse parses an HTTP response from a InsertHomelandUsingPOSTWithResponse call
func ParseInsertHomelandUsingPOSTResponse(rsp *http.Response) (*InsertHomelandUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertHomelandUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindMemberApplyRecordUsingGETResponse parses an HTTP response from a FindMemberApplyRecordUsingGETWithResponse call
func ParseFindMemberApplyRecordUsingGETResponse(rsp *http.Response) (*FindMemberApplyRecordUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindMemberApplyRecordUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindHomelandsUsingGETResponse parses an HTTP response from a FindHomelandsUsingGETWithResponse call
func ParseFindHomelandsUsingGETResponse(rsp *http.Response) (*FindHomelandsUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindHomelandsUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindHomelandByUgcIdUsingGETResponse parses an HTTP response from a FindHomelandByUgcIdUsingGETWithResponse call
func ParseFindHomelandByUgcIdUsingGETResponse(rsp *http.Response) (*FindHomelandByUgcIdUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindHomelandByUgcIdUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadHomelandFileUsingPOSTResponse parses an HTTP response from a DownloadHomelandFileUsingPOSTWithResponse call
func ParseDownloadHomelandFileUsingPOSTResponse(rsp *http.Response) (*DownloadHomelandFileUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadHomelandFileUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UGCResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadHomelandFileUsingPOSTResponse parses an HTTP response from a UploadHomelandFileUsingPOSTWithResponse call
func ParseUploadHomelandFileUsingPOSTResponse(rsp *http.Response) (*UploadHomelandFileUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadHomelandFileUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsertHomelandUsingPOST1Response parses an HTTP response from a InsertHomelandUsingPOST1WithResponse call
func ParseInsertHomelandUsingPOST1Response(rsp *http.Response) (*InsertHomelandUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertHomelandUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcV21InternalHomelandApprovalListResponse parses an HTTP response from a GetUgcV21InternalHomelandApprovalListWithResponse call
func ParseGetUgcV21InternalHomelandApprovalListResponse(rsp *http.Response) (*GetUgcV21InternalHomelandApprovalListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcV21InternalHomelandApprovalListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindMemberApplyRecordUsingGET1Response parses an HTTP response from a FindMemberApplyRecordUsingGET1WithResponse call
func ParseFindMemberApplyRecordUsingGET1Response(rsp *http.Response) (*FindMemberApplyRecordUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindMemberApplyRecordUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindMemberHomelandUsingGET1Response parses an HTTP response from a FindMemberHomelandUsingGET1WithResponse call
func ParseFindMemberHomelandUsingGET1Response(rsp *http.Response) (*FindMemberHomelandUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindMemberHomelandUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadHomelandFileUsingPOST1Response parses an HTTP response from a DownloadHomelandFileUsingPOST1WithResponse call
func ParseDownloadHomelandFileUsingPOST1Response(rsp *http.Response) (*DownloadHomelandFileUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadHomelandFileUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UGCResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadHomelandFileUsingPOST1Response parses an HTTP response from a UploadHomelandFileUsingPOST1WithResponse call
func ParseUploadHomelandFileUsingPOST1Response(rsp *http.Response) (*UploadHomelandFileUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadHomelandFileUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcHomelandMetaResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcInfoListUsingGETResponse parses an HTTP response from a GetUgcInfoListUsingGETWithResponse call
func ParseGetUgcInfoListUsingGETResponse(rsp *http.Response) (*GetUgcInfoListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcInfoListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcResponseListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUGCUsingPOSTResponse parses an HTTP response from a CreateUGCUsingPOSTWithResponse call
func ParseCreateUGCUsingPOSTResponse(rsp *http.Response) (*CreateUGCUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUGCUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadCountIncreaseUsingPOSTResponse parses an HTTP response from a DownloadCountIncreaseUsingPOSTWithResponse call
func ParseDownloadCountIncreaseUsingPOSTResponse(rsp *http.Response) (*DownloadCountIncreaseUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadCountIncreaseUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSimilarModUsingPOSTResponse parses an HTTP response from a GetSimilarModUsingPOSTWithResponse call
func ParseGetSimilarModUsingPOSTResponse(rsp *http.Response) (*GetSimilarModUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSimilarModUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadFileUsingPOSTResponse parses an HTTP response from a UploadFileUsingPOSTWithResponse call
func ParseUploadFileUsingPOSTResponse(rsp *http.Response) (*UploadFileUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadFileUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcStatisticalUsingGETResponse parses an HTTP response from a GetUgcStatisticalUsingGETWithResponse call
func ParseGetUgcStatisticalUsingGETResponse(rsp *http.Response) (*GetUgcStatisticalUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcStatisticalUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcStatisticalResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcInfoUsingGETResponse parses an HTTP response from a GetUgcInfoUsingGETWithResponse call
func ParseGetUgcInfoUsingGETResponse(rsp *http.Response) (*GetUgcInfoUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcInfoUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcInfoResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalUgcUpdateUsingPOST1Response parses an HTTP response from a InternalUgcUpdateUsingPOST1WithResponse call
func ParseInternalUgcUpdateUsingPOST1Response(rsp *http.Response) (*InternalUgcUpdateUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalUgcUpdateUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalUgcUpdateUsingPUTResponse parses an HTTP response from a InternalUgcUpdateUsingPUTWithResponse call
func ParseInternalUgcUpdateUsingPUTResponse(rsp *http.Response) (*InternalUgcUpdateUsingPUTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalUgcUpdateUsingPUTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalUgcUpdateUsingDELETEResponse parses an HTTP response from a InternalUgcUpdateUsingDELETEWithResponse call
func ParseInternalUgcUpdateUsingDELETEResponse(rsp *http.Response) (*InternalUgcUpdateUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalUgcUpdateUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalUgcUpdateUsingPOSTResponse parses an HTTP response from a InternalUgcUpdateUsingPOSTWithResponse call
func ParseInternalUgcUpdateUsingPOSTResponse(rsp *http.Response) (*InternalUgcUpdateUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalUgcUpdateUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcInternalResourceDownloadUsingPOSTResponse parses an HTTP response from a UgcInternalResourceDownloadUsingPOSTWithResponse call
func ParseUgcInternalResourceDownloadUsingPOSTResponse(rsp *http.Response) (*UgcInternalResourceDownloadUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcInternalResourceDownloadUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUgcInternalGetUsingPOSTResponse parses an HTTP response from a UgcInternalGetUsingPOSTWithResponse call
func ParseUgcInternalGetUsingPOSTResponse(rsp *http.Response) (*UgcInternalGetUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcInternalGetUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcInfoResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcInternalPlayUsingPOSTResponse parses an HTTP response from a UgcInternalPlayUsingPOSTWithResponse call
func ParseUgcInternalPlayUsingPOSTResponse(rsp *http.Response) (*UgcInternalPlayUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcInternalPlayUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalVersionListUsingGETResponse parses an HTTP response from a InternalVersionListUsingGETWithResponse call
func ParseInternalVersionListUsingGETResponse(rsp *http.Response) (*InternalVersionListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalVersionListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcVersionCreateUsingPOSTResponse parses an HTTP response from a UgcVersionCreateUsingPOSTWithResponse call
func ParseUgcVersionCreateUsingPOSTResponse(rsp *http.Response) (*UgcVersionCreateUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcVersionCreateUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalDeleteVersionUsingDELETEResponse parses an HTTP response from a InternalDeleteVersionUsingDELETEWithResponse call
func ParseInternalDeleteVersionUsingDELETEResponse(rsp *http.Response) (*InternalDeleteVersionUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalDeleteVersionUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalUpdateVersionUsingPOSTResponse parses an HTTP response from a InternalUpdateVersionUsingPOSTWithResponse call
func ParseInternalUpdateVersionUsingPOSTResponse(rsp *http.Response) (*InternalUpdateVersionUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalUpdateVersionUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalUpdateVersionUsingPUTResponse parses an HTTP response from a InternalUpdateVersionUsingPUTWithResponse call
func ParseInternalUpdateVersionUsingPUTResponse(rsp *http.Response) (*InternalUpdateVersionUsingPUTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalUpdateVersionUsingPUTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalDeleteVersion2UsingPOSTResponse parses an HTTP response from a InternalDeleteVersion2UsingPOSTWithResponse call
func ParseInternalDeleteVersion2UsingPOSTResponse(rsp *http.Response) (*InternalDeleteVersion2UsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalDeleteVersion2UsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcVersionReviewUsingPOSTResponse parses an HTTP response from a UgcVersionReviewUsingPOSTWithResponse call
func ParseUgcVersionReviewUsingPOSTResponse(rsp *http.Response) (*UgcVersionReviewUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcVersionReviewUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUGCListUsingGETResponse parses an HTTP response from a GetUGCListUsingGETWithResponse call
func ParseGetUGCListUsingGETResponse(rsp *http.Response) (*GetUGCListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUGCListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMyTagUsingGETResponse parses an HTTP response from a MyTagUsingGETWithResponse call
func ParseMyTagUsingGETResponse(rsp *http.Response) (*MyTagUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MyTagUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagInfoListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcV21TabResponse parses an HTTP response from a GetUgcV21TabWithResponse call
func ParseGetUgcV21TabResponse(rsp *http.Response) (*GetUgcV21TabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcV21TabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Context *struct {
				List *[]struct {
					// Name Tab标签名称
					Name *string `json:"name,omitempty"`

					// Sorting 该标签页下数据排序方式
					Sorting *int `json:"sorting,omitempty"`

					// Type Tab标签类型；可选值：【ALL: 全部; FAVORITE: 我的收藏; RECENT: 最近游戏; GENRE: 分类;】
					Type *string `json:"type,omitempty"`

					// Value 分类参数；例如：FPS、CASUAL等
					Value *string `json:"value,omitempty"`
				} `json:"list,omitempty"`

				// TotalCnt Tab标签页总数
				TotalCnt *int `json:"totalCnt,omitempty"`
			} `json:"context,omitempty"`

			// ResultCode 状态码
			ResultCode *string `json:"result_code,omitempty"`

			// ResultMessage 服务端消息
			ResultMessage *string `json:"result_message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagListUsingGET1Response parses an HTTP response from a TagListUsingGET1WithResponse call
func ParseTagListUsingGET1Response(rsp *http.Response) (*TagListUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagListUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagInfoListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUsingPOST1Response parses an HTTP response from a CreateUsingPOST1WithResponse call
func ParseCreateUsingPOST1Response(rsp *http.Response) (*CreateUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagInfoResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagOperatingUsingGETResponse parses an HTTP response from a TagOperatingUsingGETWithResponse call
func ParseTagOperatingUsingGETResponse(rsp *http.Response) (*TagOperatingUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagOperatingUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagInfoListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagSearchUsingGETResponse parses an HTTP response from a TagSearchUsingGETWithResponse call
func ParseTagSearchUsingGETResponse(rsp *http.Response) (*TagSearchUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagSearchUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagInfoListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUsingPOSTResponse parses an HTTP response from a UpdateUsingPOSTWithResponse call
func ParseUpdateUsingPOSTResponse(rsp *http.Response) (*UpdateUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagInfoResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUsingPUTResponse parses an HTTP response from a UpdateUsingPUTWithResponse call
func ParseUpdateUsingPUTResponse(rsp *http.Response) (*UpdateUsingPUTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUsingPUTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagInfoResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNewUgcListUsingGETResponse parses an HTTP response from a GetNewUgcListUsingGETWithResponse call
func ParseGetNewUgcListUsingGETResponse(rsp *http.Response) (*GetNewUgcListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewUgcListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcResponseListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUsingPOST2Response parses an HTTP response from a CreateUsingPOST2WithResponse call
func ParseCreateUsingPOST2Response(rsp *http.Response) (*CreateUsingPOST2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUsingPOST2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMemberUGCPublishedDynamicUsingGETResponse parses an HTTP response from a GetMemberUGCPublishedDynamicUsingGETWithResponse call
func ParseGetMemberUGCPublishedDynamicUsingGETResponse(rsp *http.Response) (*GetMemberUGCPublishedDynamicUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberUGCPublishedDynamicUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcLatestOperateLogListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenreListUsingGET1Response parses an HTTP response from a GenreListUsingGET1WithResponse call
func ParseGenreListUsingGET1Response(rsp *http.Response) (*GenreListUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenreListUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcGenreResponseListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcGetRecordsListUsingGETResponse parses an HTTP response from a UgcGetRecordsListUsingGETWithResponse call
func ParseUgcGetRecordsListUsingGETResponse(rsp *http.Response) (*UgcGetRecordsListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcGetRecordsListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcGetAssetRecordsListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUGCDynamicUsingGETResponse parses an HTTP response from a GetUGCDynamicUsingGETWithResponse call
func ParseGetUGCDynamicUsingGETResponse(rsp *http.Response) (*GetUGCDynamicUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUGCDynamicUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcLatestOperateLogListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMyUGCDynamicUsingDELETEResponse parses an HTTP response from a DeleteMyUGCDynamicUsingDELETEWithResponse call
func ParseDeleteMyUGCDynamicUsingDELETEResponse(rsp *http.Response) (*DeleteMyUGCDynamicUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMyUGCDynamicUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcLatestOperateLogResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMyUGCDynamicUsingPOSTResponse parses an HTTP response from a DeleteMyUGCDynamicUsingPOSTWithResponse call
func ParseDeleteMyUGCDynamicUsingPOSTResponse(rsp *http.Response) (*DeleteMyUGCDynamicUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMyUGCDynamicUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcLatestOperateLogResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyUgcListUsingGETResponse parses an HTTP response from a GetMyUgcListUsingGETWithResponse call
func ParseGetMyUgcListUsingGETResponse(rsp *http.Response) (*GetMyUgcListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyUgcListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcV21UgcMyugcSearchResponse parses an HTTP response from a GetUgcV21UgcMyugcSearchWithResponse call
func ParseGetUgcV21UgcMyugcSearchResponse(rsp *http.Response) (*GetUgcV21UgcMyugcSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcV21UgcMyugcSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRecentPlayListUsingGETResponse parses an HTTP response from a RecentPlayListUsingGETWithResponse call
func ParseRecentPlayListUsingGETResponse(rsp *http.Response) (*RecentPlayListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecentPlayListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecordsListUsingGETResponse parses an HTTP response from a GetRecordsListUsingGETWithResponse call
func ParseGetRecordsListUsingGETResponse(rsp *http.Response) (*GetRecordsListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecordsListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcRecordResponseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMyRecordsEmptyUsingDELETEResponse parses an HTTP response from a MyRecordsEmptyUsingDELETEWithResponse call
func ParseMyRecordsEmptyUsingDELETEResponse(rsp *http.Response) (*MyRecordsEmptyUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MyRecordsEmptyUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMyRecordsEmptyUsingPOSTResponse parses an HTTP response from a MyRecordsEmptyUsingPOSTWithResponse call
func ParseMyRecordsEmptyUsingPOSTResponse(rsp *http.Response) (*MyRecordsEmptyUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MyRecordsEmptyUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsertUGCReportUsingPOSTResponse parses an HTTP response from a InsertUGCReportUsingPOSTWithResponse call
func ParseInsertUGCReportUsingPOSTResponse(rsp *http.Response) (*InsertUGCReportUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertUGCReportUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcReportResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchUsingGET1Response parses an HTTP response from a SearchUsingGET1WithResponse call
func ParseSearchUsingGET1Response(rsp *http.Response) (*SearchUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSimilarModUsingPOST1Response parses an HTTP response from a GetSimilarModUsingPOST1WithResponse call
func ParseGetSimilarModUsingPOST1Response(rsp *http.Response) (*GetSimilarModUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSimilarModUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePretreatmentUGCSortingUsingPOSTResponse parses an HTTP response from a PretreatmentUGCSortingUsingPOSTWithResponse call
func ParsePretreatmentUGCSortingUsingPOSTResponse(rsp *http.Response) (*PretreatmentUGCSortingUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PretreatmentUGCSortingUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadUsingPOSTResponse parses an HTTP response from a UploadUsingPOSTWithResponse call
func ParseUploadUsingPOSTResponse(rsp *http.Response) (*UploadUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcStatisticalUsingGET1Response parses an HTTP response from a GetUgcStatisticalUsingGET1WithResponse call
func ParseGetUgcStatisticalUsingGET1Response(rsp *http.Response) (*GetUgcStatisticalUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcStatisticalUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcStatisticalResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMemberFavoriteListUsingGETResponse parses an HTTP response from a GetMemberFavoriteListUsingGETWithResponse call
func ParseGetMemberFavoriteListUsingGETResponse(rsp *http.Response) (*GetMemberFavoriteListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberFavoriteListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMemberUGCListUsingGETResponse parses an HTTP response from a GetMemberUGCListUsingGETWithResponse call
func ParseGetMemberUGCListUsingGETResponse(rsp *http.Response) (*GetMemberUGCListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberUGCListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFileIdIsUseUsingGETResponse parses an HTTP response from a FileIdIsUseUsingGETWithResponse call
func ParseFileIdIsUseUsingGETResponse(rsp *http.Response) (*FileIdIsUseUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FileIdIsUseUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResultBoolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelUgcUsingDELETEResponse parses an HTTP response from a DelUgcUsingDELETEWithResponse call
func ParseDelUgcUsingDELETEResponse(rsp *http.Response) (*DelUgcUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelUgcUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcInfoUsingGET1Response parses an HTTP response from a UgcInfoUsingGET1WithResponse call
func ParseUgcInfoUsingGET1Response(rsp *http.Response) (*UgcInfoUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcInfoUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcInfoResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcUpdateUsingPOST1Response parses an HTTP response from a UgcUpdateUsingPOST1WithResponse call
func ParseUgcUpdateUsingPOST1Response(rsp *http.Response) (*UgcUpdateUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcUpdateUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcUpdateUsingPUT1Response parses an HTTP response from a UgcUpdateUsingPUT1WithResponse call
func ParseUgcUpdateUsingPUT1Response(rsp *http.Response) (*UgcUpdateUsingPUT1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcUpdateUsingPUT1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelUgc2UsingPOSTResponse parses an HTTP response from a DelUgc2UsingPOSTWithResponse call
func ParseDelUgc2UsingPOSTResponse(rsp *http.Response) (*DelUgc2UsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelUgc2UsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUgcV21UgcUgcIdDownloadResponse parses an HTTP response from a GetUgcV21UgcUgcIdDownloadWithResponse call
func ParseGetUgcV21UgcUgcIdDownloadResponse(rsp *http.Response) (*GetUgcV21UgcUgcIdDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcV21UgcUgcIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcResourceDownloadUsingPOSTResponse parses an HTTP response from a UgcResourceDownloadUsingPOSTWithResponse call
func ParseUgcResourceDownloadUsingPOSTResponse(rsp *http.Response) (*UgcResourceDownloadUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcResourceDownloadUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUgcEvaluateUsingGETResponse parses an HTTP response from a GetUgcEvaluateUsingGETWithResponse call
func ParseGetUgcEvaluateUsingGETResponse(rsp *http.Response) (*GetUgcEvaluateUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUgcEvaluateUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluateResponseListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEvaluateUsingPOSTResponse parses an HTTP response from a UpdateEvaluateUsingPOSTWithResponse call
func ParseUpdateEvaluateUsingPOSTResponse(rsp *http.Response) (*UpdateEvaluateUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEvaluateUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluateInfoResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEvaluateUsingPUTResponse parses an HTTP response from a UpdateEvaluateUsingPUTWithResponse call
func ParseUpdateEvaluateUsingPUTResponse(rsp *http.Response) (*UpdateEvaluateUsingPUTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEvaluateUsingPUTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluateInfoResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvaluateDelUsingPOSTResponse parses an HTTP response from a EvaluateDelUsingPOSTWithResponse call
func ParseEvaluateDelUsingPOSTResponse(rsp *http.Response) (*EvaluateDelUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateDelUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFavoriteAddUsingPOSTResponse parses an HTTP response from a FavoriteAddUsingPOSTWithResponse call
func ParseFavoriteAddUsingPOSTResponse(rsp *http.Response) (*FavoriteAddUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FavoriteAddUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FavoriteInfoListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelFavoriteUsingDELETEResponse parses an HTTP response from a DelFavoriteUsingDELETEWithResponse call
func ParseDelFavoriteUsingDELETEResponse(rsp *http.Response) (*DelFavoriteUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelFavoriteUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelFavoriteUsingPOSTResponse parses an HTTP response from a DelFavoriteUsingPOSTWithResponse call
func ParseDelFavoriteUsingPOSTResponse(rsp *http.Response) (*DelFavoriteUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelFavoriteUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcGetUsingPOSTResponse parses an HTTP response from a UgcGetUsingPOSTWithResponse call
func ParseUgcGetUsingPOSTResponse(rsp *http.Response) (*UgcGetUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcGetUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcHideUsingPOSTResponse parses an HTTP response from a UgcHideUsingPOSTWithResponse call
func ParseUgcHideUsingPOSTResponse(rsp *http.Response) (*UgcHideUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcHideUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcPlayUsingPOSTResponse parses an HTTP response from a UgcPlayUsingPOSTWithResponse call
func ParseUgcPlayUsingPOSTResponse(rsp *http.Response) (*UgcPlayUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcPlayUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvaluateRatingUsingGETResponse parses an HTTP response from a EvaluateRatingUsingGETWithResponse call
func ParseEvaluateRatingUsingGETResponse(rsp *http.Response) (*EvaluateRatingUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateRatingUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluateRatingsResponseListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcShareUsingPOSTResponse parses an HTTP response from a UgcShareUsingPOSTWithResponse call
func ParseUgcShareUsingPOSTResponse(rsp *http.Response) (*UgcShareUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcShareUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcBaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcShowUsingPOSTResponse parses an HTTP response from a UgcShowUsingPOSTWithResponse call
func ParseUgcShowUsingPOSTResponse(rsp *http.Response) (*UgcShowUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcShowUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVersionListUsingGETResponse parses an HTTP response from a VersionListUsingGETWithResponse call
func ParseVersionListUsingGETResponse(rsp *http.Response) (*VersionListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersionListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionListResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcVersionCreateUsingPOST1Response parses an HTTP response from a UgcVersionCreateUsingPOST1WithResponse call
func ParseUgcVersionCreateUsingPOST1Response(rsp *http.Response) (*UgcVersionCreateUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcVersionCreateUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteVersionUsingDELETEResponse parses an HTTP response from a DeleteVersionUsingDELETEWithResponse call
func ParseDeleteVersionUsingDELETEResponse(rsp *http.Response) (*DeleteVersionUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVersionUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateVersionUsingPOST1Response parses an HTTP response from a UpdateVersionUsingPOST1WithResponse call
func ParseUpdateVersionUsingPOST1Response(rsp *http.Response) (*UpdateVersionUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateVersionUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateVersionUsingPUT1Response parses an HTTP response from a UpdateVersionUsingPUT1WithResponse call
func ParseUpdateVersionUsingPUT1Response(rsp *http.Response) (*UpdateVersionUsingPUT1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateVersionUsingPUT1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteVersion2UsingPOSTResponse parses an HTTP response from a DeleteVersion2UsingPOSTWithResponse call
func ParseDeleteVersion2UsingPOSTResponse(rsp *http.Response) (*DeleteVersion2UsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVersion2UsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OldResponseResultString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcVersionPublishUsingPOSTResponse parses an HTTP response from a UgcVersionPublishUsingPOSTWithResponse call
func ParseUgcVersionPublishUsingPOSTResponse(rsp *http.Response) (*UgcVersionPublishUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcVersionPublishUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcVersionReviewUsingPOST1Response parses an HTTP response from a UgcVersionReviewUsingPOST1WithResponse call
func ParseUgcVersionReviewUsingPOST1Response(rsp *http.Response) (*UgcVersionReviewUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcVersionReviewUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcVersionReviewCancelUsingPOSTResponse parses an HTTP response from a UgcVersionReviewCancelUsingPOSTWithResponse call
func ParseUgcVersionReviewCancelUsingPOSTResponse(rsp *http.Response) (*UgcVersionReviewCancelUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcVersionReviewCancelUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClearMODRatingUsingPOSTResponse parses an HTTP response from a ClearMODRatingUsingPOSTWithResponse call
func ParseClearMODRatingUsingPOSTResponse(rsp *http.Response) (*ClearMODRatingUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClearMODRatingUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GDISResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSoldOutMODAllUsingPOSTResponse parses an HTTP response from a SoldOutMODAllUsingPOSTWithResponse call
func ParseSoldOutMODAllUsingPOSTResponse(rsp *http.Response) (*SoldOutMODAllUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SoldOutMODAllUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GDISResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSoldOutMODUsingPOSTResponse parses an HTTP response from a SoldOutMODUsingPOSTWithResponse call
func ParseSoldOutMODUsingPOSTResponse(rsp *http.Response) (*SoldOutMODUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SoldOutMODUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GDISResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagDelUsingDELETEResponse parses an HTTP response from a TagDelUsingDELETEWithResponse call
func ParseTagDelUsingDELETEResponse(rsp *http.Response) (*TagDelUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagDelUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResultBoolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUgcChooseVersionUsingPOSTResponse parses an HTTP response from a UgcChooseVersionUsingPOSTWithResponse call
func ParseUgcChooseVersionUsingPOSTResponse(rsp *http.Response) (*UgcChooseVersionUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UgcChooseVersionUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UgcVersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
