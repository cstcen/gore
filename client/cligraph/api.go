// Package cligraph provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package cligraph

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ServerTokenScopes = "ServerToken.Scopes"
	UserTokenScopes   = "UserToken.Scopes"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Code 响应码
	Code Code `json:"code"`

	// Message 响应信息
	Message Message `json:"message"`
}

// BestStatusResponse defines model for BestStatusResponse.
type BestStatusResponse struct {
	// Code 响应码
	Code *string       `json:"code,omitempty"`
	Data *BestStatusVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// BestStatusVO defines model for BestStatusVO.
type BestStatusVO struct {
	// Status 密友状态
	Status *bool `json:"status,omitempty"`
}

// Code 响应码
type Code = int

// FollowCountAndRelationResponse defines model for FollowCountAndRelationResponse.
type FollowCountAndRelationResponse struct {
	// Code 响应码
	Code *int                      `json:"code,omitempty"`
	Data *FollowCountAndRelationVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// FollowCountAndRelationVO defines model for FollowCountAndRelationVO.
type FollowCountAndRelationVO struct {
	// FollowerCount 粉丝数量
	FollowerCount *int `json:"followerCount,omitempty"`
	FollowerNo    *int `json:"followerNo,omitempty"`

	// FollowingCount 关注数量
	FollowingCount *int `json:"followingCount,omitempty"`
	MemberNo       *int `json:"memberNo,omitempty"`

	// RelationType 0 -> 无关系，1 -> 关注的人，3 -> 互相关注
	RelationType *int `json:"relationType,omitempty"`
}

// FollowFollowerCountResponse defines model for FollowFollowerCountResponse.
type FollowFollowerCountResponse struct {
	// Code 响应码
	Code *int                   `json:"code,omitempty"`
	Data *FollowFollowerCountVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// FollowFollowerCountVO defines model for FollowFollowerCountVO.
type FollowFollowerCountVO struct {
	// FollowerCount 粉丝数量
	FollowerCount *int `json:"followerCount,omitempty"`

	// FollowingCount 关注数量
	FollowingCount *int `json:"followingCount,omitempty"`
}

// FollowListResponse defines model for FollowListResponse.
type FollowListResponse struct {
	// Code 响应码
	Code *int          `json:"code,omitempty"`
	Data *FollowPageVo `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// FollowPageVo defines model for FollowPageVo.
type FollowPageVo struct {
	List *[]Xk5MemberVO `json:"list,omitempty"`

	// PageNo 当前页码
	PageNo *int `json:"pageNo,omitempty"`

	// PageSize 每页数据量
	PageSize *int `json:"pageSize,omitempty"`

	// Total 总数据量
	Total *int `json:"total,omitempty"`

	// TotalPages 总页数
	TotalPages *int `json:"totalPages,omitempty"`
}

// FollowRelationVO defines model for FollowRelationVO.
type FollowRelationVO struct {
	FollowerNo *int `json:"followerNo,omitempty"`
	MemberNo   *int `json:"memberNo,omitempty"`

	// RelationType 0 -> 无关系，1 -> 关注的人，3 -> 互相关注
	RelationType *int `json:"relationType,omitempty"`
}

// FollowResponse defines model for FollowResponse.
type FollowResponse struct {
	// Code 响应码
	Code *int              `json:"code,omitempty"`
	Data *FollowRelationVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// FriendRequestBody defines model for FriendRequestBody.
type FriendRequestBody struct {
	// ToMemberNo 对方玩家唯一标识
	ToMemberNo ToMemberNo `json:"to_member_no"`

	// WorldId 区服ID，目前暂未分区，默认 0
	WorldId *GameWorldId `json:"world_id,omitempty"`
}

// GameBlockListResponse defines model for GameBlockListResponse.
type GameBlockListResponse struct {
	// Code 响应码
	Code *string          `json:"code,omitempty"`
	Data *GameBlockListVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GameBlockListVO defines model for GameBlockListVO.
type GameBlockListVO struct {
	// CurrentPage 当前页
	CurrentPage *int           `json:"currentPage,omitempty"`
	DataList    *[]GameBlockVO `json:"dataList,omitempty"`

	// Size 每页显示的数量
	Size *int `json:"size,omitempty"`

	// Total 总数量
	Total *int `json:"total,omitempty"`

	// TotalPage 总页数
	TotalPage *int `json:"totalPage,omitempty"`
}

// GameBlockVO defines model for GameBlockVO.
type GameBlockVO struct {
	// BlockCreatedDt 屏蔽时间
	BlockCreatedDt *string `json:"block_created_dt,omitempty"`

	// CharacterNo 角色编号
	CharacterNo *int `json:"character_no,omitempty"`

	// GameCd 游戏代码 224
	GameCd *string `json:"game_cd,omitempty"`

	// MemberNo memberNo 会员编号
	MemberNo *int `json:"member_no,omitempty"`

	// Nickname 角色昵称
	Nickname *string `json:"nickname,omitempty"`

	// OpenId openId 腾讯项目的识别号。一个项目一个平台账号对应一个openid
	OpenId *string `json:"open_id,omitempty"`

	// ProfileImageUrl 头像
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// ProviderCd 平台信息
	ProviderCd *string `json:"provider_cd,omitempty"`
}

// GameCountInfo defines model for GameCountInfo.
type GameCountInfo struct {
	// Count 好友数量
	Count *int `json:"count,omitempty"`

	// Receive 好友接收数量
	Receive *int `json:"receive,omitempty"`

	// Request 好友请求数量
	Request *int `json:"request,omitempty"`
}

// GameFriendBaseBodyRequest defines model for GameFriendBaseBodyRequest.
type GameFriendBaseBodyRequest struct {
	// GameWorld 游戏区服识别号 参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `json:"game_world,omitempty"`
}

// GameFriendListResponse defines model for GameFriendListResponse.
type GameFriendListResponse struct {
	// Code 响应码
	Code *string           `json:"code,omitempty"`
	Data *GameFriendListVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GameFriendListVO defines model for GameFriendListVO.
type GameFriendListVO struct {
	// CurrentPage 当前页
	CurrentPage *int            `json:"currentPage,omitempty"`
	DataList    *[]GameFriendVO `json:"dataList,omitempty"`

	// Size 每页显示的数量
	Size *int `json:"size,omitempty"`

	// Total 总数量
	Total *int `json:"total,omitempty"`

	// TotalPage 总页数
	TotalPage *int `json:"totalPage,omitempty"`
}

// GameFriendVO defines model for GameFriendVO.
type GameFriendVO struct {
	// BestStatus 好友亲密状态
	BestStatus *bool `json:"best_status,omitempty"`

	// CharacterNo 角色编号
	CharacterNo *int `json:"character_no,omitempty"`

	// FriendCreatedDt 成为好友的时间
	FriendCreatedDt *string `json:"friend_created_dt,omitempty"`

	// GameCd 游戏代码 224
	GameCd *string `json:"game_cd,omitempty"`

	// LastLaunchTime 最后通过特权登录的时间
	LastLaunchTime      *string `json:"last_launch_time,omitempty"`
	LastPrivilegeStatus *bool   `json:"last_privilege_status,omitempty"`

	// MemberNo memberNo 会员编号
	MemberNo *int `json:"member_no,omitempty"`

	// Nickname 角色昵称
	Nickname *string `json:"nickname,omitempty"`

	// OpenId openId 腾讯项目的识别号。一个项目一个平台账号对应一个openid
	OpenId *string `json:"open_id,omitempty"`

	// ProfileImageUrl 头像
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// ProviderCd 平台信息
	ProviderCd *string `json:"provider_cd,omitempty"`

	// RegisteredAt 玩家注册时间
	RegisteredAt *string `json:"registered_at,omitempty"`

	// SessionLoginDt 登录时间
	SessionLoginDt *string `json:"session_login_dt,omitempty"`

	// SessionLogoutDt 登出时间
	SessionLogoutDt *string `json:"session_logout_dt,omitempty"`

	// SessionStatus 玩家状态
	SessionStatus *string `json:"session_status,omitempty"`

	// StatusDescription 玩家在线/离线状态描述
	StatusDescription *string `json:"status_description,omitempty"`
}

// GameNo 游戏编号
type GameNo = int

// GamePageResultVO defines model for GamePageResultVO.
type GamePageResultVO struct {
	// CurrentPage 当前页
	CurrentPage *int                      `json:"currentPage,omitempty"`
	DataList    *[]map[string]interface{} `json:"dataList,omitempty"`

	// Size 每页显示的数量
	Size *int `json:"size,omitempty"`

	// Total 总数量
	Total *int `json:"total,omitempty"`

	// TotalPage 总页数
	TotalPage *int `json:"totalPage,omitempty"`
}

// GamePlayerRelationListResponse defines model for GamePlayerRelationListResponse.
type GamePlayerRelationListResponse struct {
	// Code 响应码
	Code *string                  `json:"code,omitempty"`
	Data *[]GamePlayerRelationsVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GamePlayerRelationListResponseV21 defines model for GamePlayerRelationListResponseV21.
type GamePlayerRelationListResponseV21 struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`
	Data *struct {
		List *[]GamePlayerRelationsVO2 `json:"list,omitempty"`
	} `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GamePlayerRelationsVO defines model for GamePlayerRelationsVO.
type GamePlayerRelationsVO struct {
	// CharacterName 对立的玩家的角色昵称
	CharacterName *string `json:"character_name,omitempty"`

	// CharacterNo 对立的玩家角色编号
	CharacterNo *int           `json:"character_no,omitempty"`
	FriendInfo  *GameCountInfo `json:"friend_info,omitempty"`

	// GameCd 游戏代码 224
	GameCd *string `json:"game_cd,omitempty"`

	// GameWorld 游戏区服 0
	GameWorld *string `json:"game_world,omitempty"`

	// MemberNo 对立的玩家会员编号
	MemberNo *int `json:"member_no,omitempty"`

	// ProfileImageUrl 玩家头像
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// Relations 玩家之间的关系
	// * `FRIEND` - 游戏好友
	// * `PLATFORM_FRIEND` - 平台好友
	// * `BEST_BOTH` - 互为亲密好友
	// * `BEST_OP` - 对方的亲密好友
	// * `FRIEND_RECEIVED` - 我向对方发送了好友请求，且被接受了
	// * `FRIEND_REQUESTED` - 我同意了对方的好友请求
	// * `RECEIVE` - 收到好友请求
	// * `REQUEST` - 好友请求
	// * `BLOCKED` - 被对方屏蔽
	// * `BLOCK` - 屏蔽对方
	// * `NONE` - 无关系
	Relations *[]string `json:"relations,omitempty"`

	// SessionLoginDt 登录时间
	SessionLoginDt *string `json:"session_login_dt,omitempty"`

	// SessionLogoutDt 登出时间
	SessionLogoutDt *string `json:"session_logout_dt,omitempty"`
}

// GamePlayerRelationsVO2 defines model for GamePlayerRelationsVO2.
type GamePlayerRelationsVO2 struct {
	// CharacterNo 对立的玩家角色编号
	CharacterNo *int `json:"characterNo,omitempty"`

	// MemberNo 对立的玩家会员编号
	MemberNo *int `json:"memberNo,omitempty"`

	// Relations 玩家之间的关系
	// * `FRIEND` - 游戏好友
	// * `PLATFORM_FRIEND` - 平台好友
	// * `BEST_BOTH` - 互为亲密好友
	// * `BEST_OP` - 对方的亲密好友
	// * `FRIEND_RECEIVED` - 我向对方发送了好友请求，且被接受了
	// * `FRIEND_REQUESTED` - 我同意了对方的好友请求
	// * `RECEIVE` - 收到好友请求
	// * `REQUEST` - 好友请求
	// * `BLOCKED` - 被对方屏蔽
	// * `BLOCK` - 屏蔽对方
	// * `NONE` - 无关系
	Relations *[]string `json:"relations,omitempty"`
}

// GamePlayerVO defines model for GamePlayerVO.
type GamePlayerVO struct {
	// CharacterNo 角色编号 <br/><br/> Character number
	CharacterNo *int `json:"character_no,omitempty"`

	// GameCd 游戏代码 224 <br/><br/> Game number
	GameCd *string `json:"game_cd,omitempty"`

	// LastLaunchTime 最后通过特权登录的时间 <br/><br/> Time of last privileged login
	LastLaunchTime *string `json:"last_launch_time,omitempty"`

	// LastPrivilegeStatus 最后通过特权登录的状态 <br/><br/> The status of the last login by privilege
	LastPrivilegeStatus *bool `json:"last_privilege_status,omitempty"`

	// MemberNo memberNo 会员编号
	MemberNo *int `json:"member_no,omitempty"`

	// Nickname 角色昵称 <br/><br/> Character nickname
	Nickname *string `json:"nickname,omitempty"`

	// OpenId openId 腾讯项目的识别号。一个项目一个平台账号对应一个openid <br/><br/>The identification number of Tencent project. Each platform account corresponds to an OpenID for each project
	OpenId *string `json:"open_id,omitempty"`

	// ProfileImageUrl 头像 <br/><br/> Profile image
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// ProviderCd 平台信息 <br/><br/> Platform type -> QQ | WECHAT
	ProviderCd *string `json:"provider_cd,omitempty"`

	// SessionLoginDt 登录时间 <br/><br/> Login time
	SessionLoginDt *string `json:"session_login_dt,omitempty"`

	// SessionLogoutDt 登出时间 <br/><br/> Logout time
	SessionLogoutDt *string `json:"session_logout_dt,omitempty"`

	// SessionStatus 玩家状态 <br/><br/> Session status -> online | offline
	SessionStatus *string `json:"session_status,omitempty"`
}

// GamePlayerVOListResponse defines model for GamePlayerVOListResponse.
type GamePlayerVOListResponse struct {
	// Code 响应码
	Code *string             `json:"code,omitempty"`
	Data *GamePlayerVOListVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GamePlayerVOListVO defines model for GamePlayerVOListVO.
type GamePlayerVOListVO struct {
	List *[]GamePlayerVO `json:"list,omitempty"`
}

// GameRequestVO defines model for GameRequestVO.
type GameRequestVO struct {
	// CharacterNo 角色编号
	CharacterNo *int `json:"character_no,omitempty"`

	// GameCd 游戏代码 224
	GameCd *string `json:"game_cd,omitempty"`

	// MemberNo memberNo 会员编号
	MemberNo *int `json:"member_no,omitempty"`

	// Nickname 角色昵称
	Nickname *string `json:"nickname,omitempty"`

	// OpenId openId 腾讯项目的识别号。一个项目一个平台账号对应一个openid
	OpenId *string `json:"open_id,omitempty"`

	// ProfileImageUrl 头像
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// ProviderCd 平台信息
	ProviderCd *string `json:"provider_cd,omitempty"`

	// RequestCreatedDt 申请或被申请的时间
	RequestCreatedDt *string `json:"request_created_dt,omitempty"`
}

// GameRequestVOListResponse defines model for GameRequestVOListResponse.
type GameRequestVOListResponse struct {
	// Code 响应码
	Code *string              `json:"code,omitempty"`
	Data *GameRequestVOListVO `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GameRequestVOListVO defines model for GameRequestVOListVO.
type GameRequestVOListVO struct {
	// CurrentPage 当前页
	CurrentPage *int             `json:"currentPage,omitempty"`
	DataList    *[]GameRequestVO `json:"dataList,omitempty"`

	// Size 每页显示的数量
	Size *int `json:"size,omitempty"`

	// Total 总数量
	Total *int `json:"total,omitempty"`

	// TotalPage 总页数
	TotalPage *int `json:"totalPage,omitempty"`
}

// GameWorldId 区服ID，目前暂未分区，默认 0
type GameWorldId = string

// GameWorldMemberNoListRequest defines model for GameWorldMemberNoListRequest.
type GameWorldMemberNoListRequest struct {
	// GameWorld 游戏区服识别号 参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `json:"game_world,omitempty"`

	// ToMemberNoList 会员号码列表
	ToMemberNoList *[]int `json:"toMemberNoList,omitempty"`
}

// Message 响应信息
type Message = string

// PageResultVO defines model for PageResultVO.
type PageResultVO struct {
	List *[]map[string]interface{} `json:"list,omitempty"`

	// PageNo 当前页码
	PageNo *int `json:"pageNo,omitempty"`

	// PageSize 每页数据量
	PageSize *int `json:"pageSize,omitempty"`

	// Total 总数据量
	Total *int `json:"total,omitempty"`

	// TotalPages 总页数
	TotalPages *int `json:"totalPages,omitempty"`
}

// ResponseResult4Int defines model for ResponseResult4Int.
type ResponseResult4Int struct {
	// Code 响应码
	Code *int                    `json:"code,omitempty"`
	Data *map[string]interface{} `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// ResponseResult4Str defines model for ResponseResult4Str.
type ResponseResult4Str struct {
	// Code 响应码
	Code *string                 `json:"code,omitempty"`
	Data *map[string]interface{} `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// ResponseResult4StrList defines model for ResponseResult4StrList.
type ResponseResult4StrList struct {
	// Code 响应码
	Code *string                   `json:"code,omitempty"`
	Data *[]map[string]interface{} `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// ToMemberNo 对方玩家唯一标识
type ToMemberNo = int64

// TogetherFriendListResponse defines model for TogetherFriendListResponse.
type TogetherFriendListResponse struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`
	Data *struct {
		List *TogetherFriendListVO `json:"list,omitempty"`
	} `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// TogetherFriendListVO defines model for TogetherFriendListVO.
type TogetherFriendListVO = []TogetherFriendVO

// TogetherFriendPageVo defines model for TogetherFriendPageVo.
type TogetherFriendPageVo struct {
	List *TogetherFriendListVO `json:"list,omitempty"`

	// PageNo 当前页码
	PageNo *int `json:"pageNo,omitempty"`

	// PageSize 每页数据量
	PageSize *int `json:"pageSize,omitempty"`

	// Total 总数据量
	Total *int `json:"total,omitempty"`

	// TotalPages 总页数
	TotalPages *int `json:"totalPages,omitempty"`
}

// TogetherFriendPageVoResponse defines model for TogetherFriendPageVoResponse.
type TogetherFriendPageVoResponse struct {
	// Code 响应码
	Code *int                  `json:"code,omitempty"`
	Data *TogetherFriendPageVo `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// TogetherFriendRequestBody 同玩好友 API body 请求体
type TogetherFriendRequestBody struct {
	// Openid 腾讯的 open id
	Openid *string `json:"openid,omitempty"`

	// SubChannelid 渠道 id
	SubChannelid *int `json:"sub_channelid,omitempty"`

	// Token 腾讯的 token
	Token *string `json:"token,omitempty"`
}

// TogetherFriendVO 同玩好友信息
type TogetherFriendVO struct {
	// City 所在城市
	City *string `json:"city,omitempty"`

	// Country 所在国家
	Country *string `json:"country,omitempty"`

	// Gender 性别 1 - 男, 2 - 女，用户未填则默认为 0
	Gender *int `json:"gender,omitempty"`

	// Language 语言
	Language *string `json:"language,omitempty"`

	// LastLoginDt 最后一次登录时间(2022-06-24 11:57:00)
	LastLoginDt *string `json:"last_login_dt,omitempty"`

	// MemberNicknameNo 角色编号
	MemberNicknameNo *int `json:"member_nickname_no,omitempty"`

	// MemberNo TV 平台玩家唯一标识
	MemberNo *string `json:"member_no,omitempty"`

	// Openid 腾讯的 OpenID
	Openid *string `json:"openid,omitempty"`

	// PictureUrl 平台头像
	PictureUrl *string `json:"picture_url,omitempty"`

	// ProfileImg 游戏头像
	ProfileImg *string `json:"profile_img,omitempty"`

	// Provice 所在省份
	Provice *string `json:"provice,omitempty"`

	// ProviderId 平台类型 QQ | WECHAT | ···
	ProviderId *string `json:"provider_id,omitempty"`

	// UserName 平台昵称
	UserName *string `json:"user_name,omitempty"`

	// Xk5Nickname 游戏昵称
	Xk5Nickname *string `json:"xk5_nickname,omitempty"`
}

// Xk5MemberVO defines model for Xk5MemberVO.
type Xk5MemberVO struct {
	CreatedTimestamp *int    `json:"createdTimestamp,omitempty"`
	MemberNo         *int    `json:"memberNo,omitempty"`
	Nickname         *string `json:"nickname,omitempty"`
	ProfileImg       *string `json:"profileImg,omitempty"`

	// RelationType 0 -> 无关系, 1 -> 关注的人, 2 -> 粉我的人, 3 -> 互相关注
	RelationType *int `json:"relationType,omitempty"`
}

// PathGameNo 游戏编号
type PathGameNo = GameNo

// PathToMemberNo 对方玩家唯一标识
type PathToMemberNo = ToMemberNo

// AuthFailed defines model for AuthFailed.
type AuthFailed = BaseResponse

// InvalidArgument defines model for InvalidArgument.
type InvalidArgument = BaseResponse

// ServiceError defines model for ServiceError.
type ServiceError = BaseResponse

// GetV20ApiInternalXk5FollowerMemberNoListParams defines parameters for GetV20ApiInternalXk5FollowerMemberNoList.
type GetV20ApiInternalXk5FollowerMemberNoListParams struct {
	// PageNo 当前页
	PageNo *int `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize 每页数量
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder 排序规则（ASC | DESC）
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// LastDataTime 如果是非跳页的方式分页（如下滑加载更多等），传当前页最后一条数据的 createdTimeStamp，用于分页
	LastDataTime *int `form:"lastDataTime,omitempty" json:"lastDataTime,omitempty"`
}

// GetV20ApiInternalXk5FollowingMemberNoListParams defines parameters for GetV20ApiInternalXk5FollowingMemberNoList.
type GetV20ApiInternalXk5FollowingMemberNoListParams struct {
	// PageNo 当前页
	PageNo *string `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize 每页数量
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder 排序规则（ASC | DESC）
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// LastDataTime 如果是非跳页的方式分页（如下滑加载更多等），传当前页最后一条数据的createdTimeStamp，用于分页
	LastDataTime *string `form:"lastDataTime,omitempty" json:"lastDataTime,omitempty"`
}

// PostV20GameGameNoFriendPageTogetherParams defines parameters for PostV20GameGameNoFriendPageTogether.
type PostV20GameGameNoFriendPageTogetherParams struct {
	// PageNo 当前页
	PageNo *string `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize 每页数量
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder 排序规则（ASC | DESC）
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// OsType 操作系统类型
	OsType string `json:"Os-Type"`

	// ApplicationId 应用 ID
	ApplicationId string `json:"Application-Id"`
}

// PostV20GameGameNoFriendTogetherParams defines parameters for PostV20GameGameNoFriendTogether.
type PostV20GameGameNoFriendTogetherParams struct {
	// OsType 操作系统类型
	OsType string `json:"Os-Type"`

	// ApplicationId 应用 ID
	ApplicationId string `json:"Application-Id"`
}

// GetV20GameGameCdBlockParams defines parameters for GetV20GameGameCdBlock.
type GetV20GameGameCdBlockParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'toNickName(玩家昵称)'排序<br/>参考值：<br/>'toNickName': 玩家昵称<br/>'createdDt': 屏蔽时间<br/>'toCharacterNo': 玩家的角色编号
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20GameGameCdBlockSearchKeywordParams defines parameters for GetV20GameGameCdBlockSearchKeyword.
type GetV20GameGameCdBlockSearchKeywordParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'toNickName(玩家昵称)'排序<br/>参考值：<br/>'toNickName': 玩家昵称<br/>'createdDt': 屏蔽时间<br/>'toCharacterNo': 玩家的角色编号
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20GameGameCdFriendParams defines parameters for GetV20GameGameCdFriend.
type GetV20GameGameCdFriendParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'toNickName(玩家昵称)'排序<br/>参考值：<br/>'toNickName': 玩家昵称<br/>'createdDt': 成为好友的时间<br/>'toCharacterNo': 好友的角色编号<br/>'complex': 在线密友->在线普通好友->离线好友的方式排序
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20GameGameCdFriendToMemberNoBestParams defines parameters for GetV20GameGameCdFriendToMemberNoBest.
type GetV20GameGameCdFriendToMemberNoBestParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`
}

// GetV20GameGameCdIncomingParams defines parameters for GetV20GameGameCdIncoming.
type GetV20GameGameCdIncomingParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'fromNickName(玩家昵称)'排序<br/>参考值：<br/>'fromNickName': 玩家昵称<br/>'createdDt': 邀请创建的时间<br/>'fromCharacterNo': 玩家的角色编号<br/>'complex': 在线密友->在线普通好友->离线好友的方式排序
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20GameGameCdIncomingSearchKeywordParams defines parameters for GetV20GameGameCdIncomingSearchKeyword.
type GetV20GameGameCdIncomingSearchKeywordParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'fromNickName(玩家昵称)'排序<br/>参考值：<br/>'fromNickName': 玩家昵称<br/>'createdDt': 邀请创建的时间<br/>'fromCharacterNo': 玩家的角色编号<br/>'complex': 在线密友->在线普通好友->离线好友的方式排序
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20GameGameCdOutgoingParams defines parameters for GetV20GameGameCdOutgoing.
type GetV20GameGameCdOutgoingParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'toNickName(玩家昵称)'排序<br/>参考值：<br/>'toNickName': 玩家昵称<br/>'createdDt': 邀请创建的时间<br/>'toCharacterNo': 玩家的角色编号
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20GameGameCdOutgoingSearchKeywordParams defines parameters for GetV20GameGameCdOutgoingSearchKeyword.
type GetV20GameGameCdOutgoingSearchKeywordParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'toNickName(玩家昵称)'排序<br/>参考值：<br/>'toNickName': 玩家昵称<br/>'createdDt': 邀请创建的时间<br/>'toCharacterNo': 玩家的角色编号 default(toNickName)
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20GameGameCdPlayerListParams defines parameters for GetV20GameGameCdPlayerList.
type GetV20GameGameCdPlayerListParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：0
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// MemberNoList 含义：被指定的玩家会员号码列表<br/>示例: 1000000018011704, 1000000018011704
	MemberNoList []int `form:"memberNoList" json:"memberNoList"`
}

// GetV20GameGameCdRelationsParams defines parameters for GetV20GameGameCdRelations.
type GetV20GameGameCdRelationsParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// MemberNoList 含义：被指定的玩家会员号码列表<br/>示例：1000000018011704<br/>
	MemberNoList []int `form:"memberNoList" json:"memberNoList"`
}

// GetV20GameGameCdSearchKeywordParams defines parameters for GetV20GameGameCdSearchKeyword.
type GetV20GameGameCdSearchKeywordParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'toNickName(玩家昵称)'排序<br/>参考值：<br/>'toNickName': 玩家昵称<br/>'createdDt': 成为好友的时间<br/>'toCharacterNo': 好友的角色编号<br/>'complex': 在线密友->在线普通好友->离线好友的方式排序
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20ServerV20GameGameCdFriendMemberNoParams defines parameters for GetV20ServerV20GameGameCdFriendMemberNo.
type GetV20ServerV20GameGameCdFriendMemberNoParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// Page 含义：当前页<br/>参考值：1
	Page int `form:"page" json:"page"`

	// Size 含义：每页显示的数量<br/>参考值：10
	Size int `form:"size" json:"size"`

	// SortRule 含义：排序方式，只提供正序，默认按'toNickName(玩家昵称)'排序<br/>参考值：<br/>'toNickName': 玩家昵称<br/>'createdDt': 成为好友的时间<br/>'toCharacterNo': 好友的角色编号<br/>'complex': 在线密友->在线普通好友->离线好友的方式排序
	SortRule *string `form:"sort_rule,omitempty" json:"sort_rule,omitempty"`
}

// GetV20ServerV20GameGameCdPlayerListParams defines parameters for GetV20ServerV20GameGameCdPlayerList.
type GetV20ServerV20GameGameCdPlayerListParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：0
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// MemberNoList 含义：被指定的玩家会员号码列表<br/>示例：1000000018011704, 1000000018011704
	MemberNoList []int `form:"memberNoList" json:"memberNoList"`
}

// GetV20ServerV20GameGameCdRelationsMemberNoParams defines parameters for GetV20ServerV20GameGameCdRelationsMemberNo.
type GetV20ServerV20GameGameCdRelationsMemberNoParams struct {
	// GameWorld 含义：游戏区服识别号<br/>参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"game_world,omitempty" json:"game_world,omitempty"`

	// MemberNoList 含义：被指定的玩家会员号码列表<br/>示例：1000000018011704<br/>
	MemberNoList []int `form:"memberNoList" json:"memberNoList"`
}

// GetV20Xk5FollowerMemberNoListParams defines parameters for GetV20Xk5FollowerMemberNoList.
type GetV20Xk5FollowerMemberNoListParams struct {
	// PageNo 当前页
	PageNo *string `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize 每页数量
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder 排序规则（ASC | DESC）
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// LastDataTime 如果是非跳页的方式分页（如下滑加载更多等），传当前页最后一条数据的createdTimeStamp，用于分页
	LastDataTime *string `form:"lastDataTime,omitempty" json:"lastDataTime,omitempty"`
}

// GetV20Xk5FollowingMemberNoListParams defines parameters for GetV20Xk5FollowingMemberNoList.
type GetV20Xk5FollowingMemberNoListParams struct {
	// PageNo 当前页
	PageNo *string `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize 每页数量
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder 排序规则（ASC | DESC）
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// LastDataTime 如果是非跳页的方式分页（如下滑加载更多等），传当前页最后一条数据的createdTimeStamp，用于分页
	LastDataTime *string `form:"lastDataTime,omitempty" json:"lastDataTime,omitempty"`
}

// GetV20Xk5RelationMemberNoListParams defines parameters for GetV20Xk5RelationMemberNoList.
type GetV20Xk5RelationMemberNoListParams struct {
	// ToMemberNo toMemberNo 集合
	ToMemberNo []int `form:"toMemberNo" json:"toMemberNo"`
}

// GetV21ServerGameGameCdRelationsMemberNoParams defines parameters for GetV21ServerGameGameCdRelationsMemberNo.
type GetV21ServerGameGameCdRelationsMemberNoParams struct {
	// GameWorld 含义：游戏区服识别号
	// 参考值：目前没有定义区服, 不分区服的游戏的值为：'0'
	GameWorld *string `form:"gameWorld,omitempty" json:"gameWorld,omitempty"`

	// MemberNoList 含义：被指定的玩家会员号码列表
	// 示例：1000000018011704
	MemberNoList []int `form:"memberNoList" json:"memberNoList"`

	// AccessToken 腾讯 QQ / 微信账号的 TOKEN
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty"`

	// OsType 操作系统类型
	// * `Android` - 安卓系统
	// * `iOS` - 苹果系统
	// * `Web` - Web 网页端
	// * `Linux` - Linux
	// * `windows` - windows
	OsType *string `form:"osType,omitempty" json:"osType,omitempty"`
}

// PostV30GameGameNoFriendPageTogetherParams defines parameters for PostV30GameGameNoFriendPageTogether.
type PostV30GameGameNoFriendPageTogetherParams struct {
	// PageNo 当前页
	PageNo *string `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize 每页数量
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder 排序规则（ASC | DESC）
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// OsType 操作系统类型
	OsType string `json:"Os-Type"`

	// ApplicationId 应用 ID
	ApplicationId string `json:"Application-Id"`
}

// PostV30GameGameNoFriendTogetherParams defines parameters for PostV30GameGameNoFriendTogether.
type PostV30GameGameNoFriendTogetherParams struct {
	// OsType 操作系统类型
	OsType string `json:"Os-Type"`

	// ApplicationId 应用 ID
	ApplicationId string `json:"Application-Id"`
}

// PostV20GameGameNoFriendPageTogetherJSONRequestBody defines body for PostV20GameGameNoFriendPageTogether for application/json ContentType.
type PostV20GameGameNoFriendPageTogetherJSONRequestBody = TogetherFriendRequestBody

// PostV20GameGameNoFriendTogetherJSONRequestBody defines body for PostV20GameGameNoFriendTogether for application/json ContentType.
type PostV20GameGameNoFriendTogetherJSONRequestBody = TogetherFriendRequestBody

// DeleteV20GameGameCdBlockMemberNoJSONRequestBody defines body for DeleteV20GameGameCdBlockMemberNo for application/json ContentType.
type DeleteV20GameGameCdBlockMemberNoJSONRequestBody = GameFriendBaseBodyRequest

// PostV20GameGameCdBlockMemberNoJSONRequestBody defines body for PostV20GameGameCdBlockMemberNo for application/json ContentType.
type PostV20GameGameCdBlockMemberNoJSONRequestBody = GameFriendBaseBodyRequest

// DeleteV20GameGameCdFriendToMemberNoJSONRequestBody defines body for DeleteV20GameGameCdFriendToMemberNo for application/json ContentType.
type DeleteV20GameGameCdFriendToMemberNoJSONRequestBody = GameFriendBaseBodyRequest

// DeleteV20GameGameCdFriendToMemberNoBestJSONRequestBody defines body for DeleteV20GameGameCdFriendToMemberNoBest for application/json ContentType.
type DeleteV20GameGameCdFriendToMemberNoBestJSONRequestBody = GameFriendBaseBodyRequest

// PostV20GameGameCdFriendToMemberNoBestJSONRequestBody defines body for PostV20GameGameCdFriendToMemberNoBest for application/json ContentType.
type PostV20GameGameCdFriendToMemberNoBestJSONRequestBody = GameFriendBaseBodyRequest

// PostV20GameGameCdIncomingAcceptallJSONRequestBody defines body for PostV20GameGameCdIncomingAcceptall for application/json ContentType.
type PostV20GameGameCdIncomingAcceptallJSONRequestBody = GameFriendBaseBodyRequest

// PostV20GameGameCdIncomingAcceptlistJSONRequestBody defines body for PostV20GameGameCdIncomingAcceptlist for application/json ContentType.
type PostV20GameGameCdIncomingAcceptlistJSONRequestBody = GameWorldMemberNoListRequest

// DeleteV20GameGameCdIncomingRejectallJSONRequestBody defines body for DeleteV20GameGameCdIncomingRejectall for application/json ContentType.
type DeleteV20GameGameCdIncomingRejectallJSONRequestBody = GameFriendBaseBodyRequest

// DeleteV20GameGameCdIncomingRejectlistJSONRequestBody defines body for DeleteV20GameGameCdIncomingRejectlist for application/json ContentType.
type DeleteV20GameGameCdIncomingRejectlistJSONRequestBody = GameWorldMemberNoListRequest

// DeleteV20GameGameCdIncomingToMemberNoJSONRequestBody defines body for DeleteV20GameGameCdIncomingToMemberNo for application/json ContentType.
type DeleteV20GameGameCdIncomingToMemberNoJSONRequestBody = GameFriendBaseBodyRequest

// PostV20GameGameCdIncomingToMemberNoJSONRequestBody defines body for PostV20GameGameCdIncomingToMemberNo for application/json ContentType.
type PostV20GameGameCdIncomingToMemberNoJSONRequestBody = GameFriendBaseBodyRequest

// PostV20GameGameCdOutgoingCancelallJSONRequestBody defines body for PostV20GameGameCdOutgoingCancelall for application/json ContentType.
type PostV20GameGameCdOutgoingCancelallJSONRequestBody = GameFriendBaseBodyRequest

// PostV20GameGameCdOutgoingCancellistJSONRequestBody defines body for PostV20GameGameCdOutgoingCancellist for application/json ContentType.
type PostV20GameGameCdOutgoingCancellistJSONRequestBody = GameWorldMemberNoListRequest

// DeleteV20GameGameCdOutgoingToMemberNoJSONRequestBody defines body for DeleteV20GameGameCdOutgoingToMemberNo for application/json ContentType.
type DeleteV20GameGameCdOutgoingToMemberNoJSONRequestBody = GameFriendBaseBodyRequest

// PostV20GameGameCdOutgoingToMemberNoJSONRequestBody defines body for PostV20GameGameCdOutgoingToMemberNo for application/json ContentType.
type PostV20GameGameCdOutgoingToMemberNoJSONRequestBody = GameFriendBaseBodyRequest

// PostV21GameGameNoFriendRequestsJSONRequestBody defines body for PostV21GameGameNoFriendRequests for application/json ContentType.
type PostV21GameGameNoFriendRequestsJSONRequestBody = FriendRequestBody

// PostV30GameGameNoFriendPageTogetherJSONRequestBody defines body for PostV30GameGameNoFriendPageTogether for application/json ContentType.
type PostV30GameGameNoFriendPageTogetherJSONRequestBody = TogetherFriendRequestBody

// PostV30GameGameNoFriendTogetherJSONRequestBody defines body for PostV30GameGameNoFriendTogether for application/json ContentType.
type PostV30GameGameNoFriendTogetherJSONRequestBody = TogetherFriendRequestBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV20ApiInternalXk5FollowerMemberNoList request
	GetV20ApiInternalXk5FollowerMemberNoList(ctx context.Context, memberNo string, params *GetV20ApiInternalXk5FollowerMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20ApiInternalXk5FollowingMemberNoList request
	GetV20ApiInternalXk5FollowingMemberNoList(ctx context.Context, memberNo string, params *GetV20ApiInternalXk5FollowingMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameNoFriendPageTogetherWithBody request with any body
	PostV20GameGameNoFriendPageTogetherWithBody(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameNoFriendPageTogether(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, body PostV20GameGameNoFriendPageTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameNoFriendTogetherWithBody request with any body
	PostV20GameGameNoFriendTogetherWithBody(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameNoFriendTogether(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendTogetherParams, body PostV20GameGameNoFriendTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdBlock request
	GetV20GameGameCdBlock(ctx context.Context, gameCd string, params *GetV20GameGameCdBlockParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdBlockSearchKeyword request
	GetV20GameGameCdBlockSearchKeyword(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdBlockSearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV20GameGameCdBlockMemberNoWithBody request with any body
	DeleteV20GameGameCdBlockMemberNoWithBody(ctx context.Context, gameCd string, memberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV20GameGameCdBlockMemberNo(ctx context.Context, gameCd string, memberNo int, body DeleteV20GameGameCdBlockMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameCdBlockMemberNoWithBody request with any body
	PostV20GameGameCdBlockMemberNoWithBody(ctx context.Context, gameCd string, memberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameCdBlockMemberNo(ctx context.Context, gameCd string, memberNo int, body PostV20GameGameCdBlockMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdFriend request
	GetV20GameGameCdFriend(ctx context.Context, gameCd string, params *GetV20GameGameCdFriendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV20GameGameCdFriendToMemberNoWithBody request with any body
	DeleteV20GameGameCdFriendToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV20GameGameCdFriendToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV20GameGameCdFriendToMemberNoBestWithBody request with any body
	DeleteV20GameGameCdFriendToMemberNoBestWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV20GameGameCdFriendToMemberNoBest(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoBestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdFriendToMemberNoBest request
	GetV20GameGameCdFriendToMemberNoBest(ctx context.Context, gameCd string, toMemberNo int, params *GetV20GameGameCdFriendToMemberNoBestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameCdFriendToMemberNoBestWithBody request with any body
	PostV20GameGameCdFriendToMemberNoBestWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameCdFriendToMemberNoBest(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdFriendToMemberNoBestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdIncoming request
	GetV20GameGameCdIncoming(ctx context.Context, gameCd string, params *GetV20GameGameCdIncomingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameCdIncomingAcceptallWithBody request with any body
	PostV20GameGameCdIncomingAcceptallWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameCdIncomingAcceptall(ctx context.Context, gameCd string, body PostV20GameGameCdIncomingAcceptallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameCdIncomingAcceptlistWithBody request with any body
	PostV20GameGameCdIncomingAcceptlistWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameCdIncomingAcceptlist(ctx context.Context, gameCd string, body PostV20GameGameCdIncomingAcceptlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV20GameGameCdIncomingRejectallWithBody request with any body
	DeleteV20GameGameCdIncomingRejectallWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV20GameGameCdIncomingRejectall(ctx context.Context, gameCd string, body DeleteV20GameGameCdIncomingRejectallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV20GameGameCdIncomingRejectlistWithBody request with any body
	DeleteV20GameGameCdIncomingRejectlistWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV20GameGameCdIncomingRejectlist(ctx context.Context, gameCd string, body DeleteV20GameGameCdIncomingRejectlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdIncomingSearchKeyword request
	GetV20GameGameCdIncomingSearchKeyword(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdIncomingSearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV20GameGameCdIncomingToMemberNoWithBody request with any body
	DeleteV20GameGameCdIncomingToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV20GameGameCdIncomingToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdIncomingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameCdIncomingToMemberNoWithBody request with any body
	PostV20GameGameCdIncomingToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameCdIncomingToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdIncomingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdOutgoing request
	GetV20GameGameCdOutgoing(ctx context.Context, gameCd string, params *GetV20GameGameCdOutgoingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameCdOutgoingCancelallWithBody request with any body
	PostV20GameGameCdOutgoingCancelallWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameCdOutgoingCancelall(ctx context.Context, gameCd string, body PostV20GameGameCdOutgoingCancelallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameCdOutgoingCancellistWithBody request with any body
	PostV20GameGameCdOutgoingCancellistWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameCdOutgoingCancellist(ctx context.Context, gameCd string, body PostV20GameGameCdOutgoingCancellistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdOutgoingSearchKeyword request
	GetV20GameGameCdOutgoingSearchKeyword(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdOutgoingSearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV20GameGameCdOutgoingToMemberNoWithBody request with any body
	DeleteV20GameGameCdOutgoingToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV20GameGameCdOutgoingToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdOutgoingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20GameGameCdOutgoingToMemberNoWithBody request with any body
	PostV20GameGameCdOutgoingToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV20GameGameCdOutgoingToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdOutgoingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdPlayerList request
	GetV20GameGameCdPlayerList(ctx context.Context, gameCd string, params *GetV20GameGameCdPlayerListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdRelations request
	GetV20GameGameCdRelations(ctx context.Context, gameCd string, params *GetV20GameGameCdRelationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20GameGameCdSearchKeyword request
	GetV20GameGameCdSearchKeyword(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdSearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20ServerV20GameGameCdFriendMemberNo request
	GetV20ServerV20GameGameCdFriendMemberNo(ctx context.Context, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdFriendMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20ServerV20GameGameCdPlayerList request
	GetV20ServerV20GameGameCdPlayerList(ctx context.Context, gameCd string, params *GetV20ServerV20GameGameCdPlayerListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20ServerV20GameGameCdRelationsMemberNo request
	GetV20ServerV20GameGameCdRelationsMemberNo(ctx context.Context, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdRelationsMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20Xk5FollowerMemberNoList request
	GetV20Xk5FollowerMemberNoList(ctx context.Context, memberNo string, params *GetV20Xk5FollowerMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV20Xk5FollowingMemberNo request
	DeleteV20Xk5FollowingMemberNo(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV20Xk5FollowingMemberNo request
	PostV20Xk5FollowingMemberNo(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20Xk5FollowingMemberNoList request
	GetV20Xk5FollowingMemberNoList(ctx context.Context, memberNo string, params *GetV20Xk5FollowingMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20Xk5FollowingFollowerMemberNoCount request
	GetV20Xk5FollowingFollowerMemberNoCount(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20Xk5RelationMemberNo request
	GetV20Xk5RelationMemberNo(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV20Xk5RelationMemberNoList request
	GetV20Xk5RelationMemberNoList(ctx context.Context, memberNo string, params *GetV20Xk5RelationMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV21GameGameNoFriendApprovals request
	PostV21GameGameNoFriendApprovals(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV21GameGameNoFriendApprovalsToMemberNo request
	PostV21GameGameNoFriendApprovalsToMemberNo(ctx context.Context, gameNo PathGameNo, toMemberNo PathToMemberNo, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV21GameGameNoFriendRequestsWithBody request with any body
	PostV21GameGameNoFriendRequestsWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV21GameGameNoFriendRequests(ctx context.Context, gameNo PathGameNo, body PostV21GameGameNoFriendRequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV21ServerGameGameCdRelationsMemberNo request
	GetV21ServerGameGameCdRelationsMemberNo(ctx context.Context, gameCd string, memberNo int, params *GetV21ServerGameGameCdRelationsMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV30GameGameNoFriendPageTogetherWithBody request with any body
	PostV30GameGameNoFriendPageTogetherWithBody(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV30GameGameNoFriendPageTogether(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, body PostV30GameGameNoFriendPageTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV30GameGameNoFriendTogetherWithBody request with any body
	PostV30GameGameNoFriendTogetherWithBody(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV30GameGameNoFriendTogether(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendTogetherParams, body PostV30GameGameNoFriendTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV20ApiInternalXk5FollowerMemberNoList(ctx context.Context, memberNo string, params *GetV20ApiInternalXk5FollowerMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20ApiInternalXk5FollowerMemberNoListRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20ApiInternalXk5FollowingMemberNoList(ctx context.Context, memberNo string, params *GetV20ApiInternalXk5FollowingMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20ApiInternalXk5FollowingMemberNoListRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameNoFriendPageTogetherWithBody(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameNoFriendPageTogetherRequestWithBody(c.Server, gameNo, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameNoFriendPageTogether(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, body PostV20GameGameNoFriendPageTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameNoFriendPageTogetherRequest(c.Server, gameNo, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameNoFriendTogetherWithBody(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameNoFriendTogetherRequestWithBody(c.Server, gameNo, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameNoFriendTogether(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendTogetherParams, body PostV20GameGameNoFriendTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameNoFriendTogetherRequest(c.Server, gameNo, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdBlock(ctx context.Context, gameCd string, params *GetV20GameGameCdBlockParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdBlockRequest(c.Server, gameCd, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdBlockSearchKeyword(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdBlockSearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdBlockSearchKeywordRequest(c.Server, gameCd, keyword, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdBlockMemberNoWithBody(ctx context.Context, gameCd string, memberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdBlockMemberNoRequestWithBody(c.Server, gameCd, memberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdBlockMemberNo(ctx context.Context, gameCd string, memberNo int, body DeleteV20GameGameCdBlockMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdBlockMemberNoRequest(c.Server, gameCd, memberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdBlockMemberNoWithBody(ctx context.Context, gameCd string, memberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdBlockMemberNoRequestWithBody(c.Server, gameCd, memberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdBlockMemberNo(ctx context.Context, gameCd string, memberNo int, body PostV20GameGameCdBlockMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdBlockMemberNoRequest(c.Server, gameCd, memberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdFriend(ctx context.Context, gameCd string, params *GetV20GameGameCdFriendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdFriendRequest(c.Server, gameCd, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdFriendToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdFriendToMemberNoRequestWithBody(c.Server, gameCd, toMemberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdFriendToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdFriendToMemberNoRequest(c.Server, gameCd, toMemberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdFriendToMemberNoBestWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdFriendToMemberNoBestRequestWithBody(c.Server, gameCd, toMemberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdFriendToMemberNoBest(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoBestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdFriendToMemberNoBestRequest(c.Server, gameCd, toMemberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdFriendToMemberNoBest(ctx context.Context, gameCd string, toMemberNo int, params *GetV20GameGameCdFriendToMemberNoBestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdFriendToMemberNoBestRequest(c.Server, gameCd, toMemberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdFriendToMemberNoBestWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdFriendToMemberNoBestRequestWithBody(c.Server, gameCd, toMemberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdFriendToMemberNoBest(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdFriendToMemberNoBestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdFriendToMemberNoBestRequest(c.Server, gameCd, toMemberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdIncoming(ctx context.Context, gameCd string, params *GetV20GameGameCdIncomingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdIncomingRequest(c.Server, gameCd, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdIncomingAcceptallWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdIncomingAcceptallRequestWithBody(c.Server, gameCd, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdIncomingAcceptall(ctx context.Context, gameCd string, body PostV20GameGameCdIncomingAcceptallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdIncomingAcceptallRequest(c.Server, gameCd, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdIncomingAcceptlistWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdIncomingAcceptlistRequestWithBody(c.Server, gameCd, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdIncomingAcceptlist(ctx context.Context, gameCd string, body PostV20GameGameCdIncomingAcceptlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdIncomingAcceptlistRequest(c.Server, gameCd, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdIncomingRejectallWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdIncomingRejectallRequestWithBody(c.Server, gameCd, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdIncomingRejectall(ctx context.Context, gameCd string, body DeleteV20GameGameCdIncomingRejectallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdIncomingRejectallRequest(c.Server, gameCd, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdIncomingRejectlistWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdIncomingRejectlistRequestWithBody(c.Server, gameCd, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdIncomingRejectlist(ctx context.Context, gameCd string, body DeleteV20GameGameCdIncomingRejectlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdIncomingRejectlistRequest(c.Server, gameCd, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdIncomingSearchKeyword(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdIncomingSearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdIncomingSearchKeywordRequest(c.Server, gameCd, keyword, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdIncomingToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdIncomingToMemberNoRequestWithBody(c.Server, gameCd, toMemberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdIncomingToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdIncomingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdIncomingToMemberNoRequest(c.Server, gameCd, toMemberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdIncomingToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdIncomingToMemberNoRequestWithBody(c.Server, gameCd, toMemberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdIncomingToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdIncomingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdIncomingToMemberNoRequest(c.Server, gameCd, toMemberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdOutgoing(ctx context.Context, gameCd string, params *GetV20GameGameCdOutgoingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdOutgoingRequest(c.Server, gameCd, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdOutgoingCancelallWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdOutgoingCancelallRequestWithBody(c.Server, gameCd, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdOutgoingCancelall(ctx context.Context, gameCd string, body PostV20GameGameCdOutgoingCancelallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdOutgoingCancelallRequest(c.Server, gameCd, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdOutgoingCancellistWithBody(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdOutgoingCancellistRequestWithBody(c.Server, gameCd, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdOutgoingCancellist(ctx context.Context, gameCd string, body PostV20GameGameCdOutgoingCancellistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdOutgoingCancellistRequest(c.Server, gameCd, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdOutgoingSearchKeyword(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdOutgoingSearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdOutgoingSearchKeywordRequest(c.Server, gameCd, keyword, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdOutgoingToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdOutgoingToMemberNoRequestWithBody(c.Server, gameCd, toMemberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20GameGameCdOutgoingToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdOutgoingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20GameGameCdOutgoingToMemberNoRequest(c.Server, gameCd, toMemberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdOutgoingToMemberNoWithBody(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdOutgoingToMemberNoRequestWithBody(c.Server, gameCd, toMemberNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20GameGameCdOutgoingToMemberNo(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdOutgoingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20GameGameCdOutgoingToMemberNoRequest(c.Server, gameCd, toMemberNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdPlayerList(ctx context.Context, gameCd string, params *GetV20GameGameCdPlayerListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdPlayerListRequest(c.Server, gameCd, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdRelations(ctx context.Context, gameCd string, params *GetV20GameGameCdRelationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdRelationsRequest(c.Server, gameCd, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20GameGameCdSearchKeyword(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdSearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20GameGameCdSearchKeywordRequest(c.Server, gameCd, keyword, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20ServerV20GameGameCdFriendMemberNo(ctx context.Context, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdFriendMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20ServerV20GameGameCdFriendMemberNoRequest(c.Server, gameCd, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20ServerV20GameGameCdPlayerList(ctx context.Context, gameCd string, params *GetV20ServerV20GameGameCdPlayerListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20ServerV20GameGameCdPlayerListRequest(c.Server, gameCd, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20ServerV20GameGameCdRelationsMemberNo(ctx context.Context, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdRelationsMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20ServerV20GameGameCdRelationsMemberNoRequest(c.Server, gameCd, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20Xk5FollowerMemberNoList(ctx context.Context, memberNo string, params *GetV20Xk5FollowerMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20Xk5FollowerMemberNoListRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV20Xk5FollowingMemberNo(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV20Xk5FollowingMemberNoRequest(c.Server, memberNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV20Xk5FollowingMemberNo(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV20Xk5FollowingMemberNoRequest(c.Server, memberNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20Xk5FollowingMemberNoList(ctx context.Context, memberNo string, params *GetV20Xk5FollowingMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20Xk5FollowingMemberNoListRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20Xk5FollowingFollowerMemberNoCount(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20Xk5FollowingFollowerMemberNoCountRequest(c.Server, memberNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20Xk5RelationMemberNo(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20Xk5RelationMemberNoRequest(c.Server, memberNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV20Xk5RelationMemberNoList(ctx context.Context, memberNo string, params *GetV20Xk5RelationMemberNoListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV20Xk5RelationMemberNoListRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV21GameGameNoFriendApprovals(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV21GameGameNoFriendApprovalsRequest(c.Server, gameNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV21GameGameNoFriendApprovalsToMemberNo(ctx context.Context, gameNo PathGameNo, toMemberNo PathToMemberNo, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV21GameGameNoFriendApprovalsToMemberNoRequest(c.Server, gameNo, toMemberNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV21GameGameNoFriendRequestsWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV21GameGameNoFriendRequestsRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV21GameGameNoFriendRequests(ctx context.Context, gameNo PathGameNo, body PostV21GameGameNoFriendRequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV21GameGameNoFriendRequestsRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV21ServerGameGameCdRelationsMemberNo(ctx context.Context, gameCd string, memberNo int, params *GetV21ServerGameGameCdRelationsMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV21ServerGameGameCdRelationsMemberNoRequest(c.Server, gameCd, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV30GameGameNoFriendPageTogetherWithBody(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV30GameGameNoFriendPageTogetherRequestWithBody(c.Server, gameNo, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV30GameGameNoFriendPageTogether(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, body PostV30GameGameNoFriendPageTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV30GameGameNoFriendPageTogetherRequest(c.Server, gameNo, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV30GameGameNoFriendTogetherWithBody(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV30GameGameNoFriendTogetherRequestWithBody(c.Server, gameNo, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV30GameGameNoFriendTogether(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendTogetherParams, body PostV30GameGameNoFriendTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV30GameGameNoFriendTogetherRequest(c.Server, gameNo, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV20ApiInternalXk5FollowerMemberNoListRequest generates requests for GetV20ApiInternalXk5FollowerMemberNoList
func NewGetV20ApiInternalXk5FollowerMemberNoListRequest(server string, memberNo string, params *GetV20ApiInternalXk5FollowerMemberNoListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/api/internal/xk5/follower/%s/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastDataTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastDataTime", runtime.ParamLocationQuery, *params.LastDataTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20ApiInternalXk5FollowingMemberNoListRequest generates requests for GetV20ApiInternalXk5FollowingMemberNoList
func NewGetV20ApiInternalXk5FollowingMemberNoListRequest(server string, memberNo string, params *GetV20ApiInternalXk5FollowingMemberNoListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/api/internal/xk5/following/%s/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastDataTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastDataTime", runtime.ParamLocationQuery, *params.LastDataTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV20GameGameNoFriendPageTogetherRequest calls the generic PostV20GameGameNoFriendPageTogether builder with application/json body
func NewPostV20GameGameNoFriendPageTogetherRequest(server string, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, body PostV20GameGameNoFriendPageTogetherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameNoFriendPageTogetherRequestWithBody(server, gameNo, params, "application/json", bodyReader)
}

// NewPostV20GameGameNoFriendPageTogetherRequestWithBody generates requests for PostV20GameGameNoFriendPageTogether with any type of body
func NewPostV20GameGameNoFriendPageTogetherRequestWithBody(server string, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/friend/page_together", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Os-Type", runtime.ParamLocationHeader, params.OsType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Os-Type", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Application-Id", runtime.ParamLocationHeader, params.ApplicationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Application-Id", headerParam1)

	}

	return req, nil
}

// NewPostV20GameGameNoFriendTogetherRequest calls the generic PostV20GameGameNoFriendTogether builder with application/json body
func NewPostV20GameGameNoFriendTogetherRequest(server string, gameNo int, params *PostV20GameGameNoFriendTogetherParams, body PostV20GameGameNoFriendTogetherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameNoFriendTogetherRequestWithBody(server, gameNo, params, "application/json", bodyReader)
}

// NewPostV20GameGameNoFriendTogetherRequestWithBody generates requests for PostV20GameGameNoFriendTogether with any type of body
func NewPostV20GameGameNoFriendTogetherRequestWithBody(server string, gameNo int, params *PostV20GameGameNoFriendTogetherParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/friend/together", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Os-Type", runtime.ParamLocationHeader, params.OsType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Os-Type", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Application-Id", runtime.ParamLocationHeader, params.ApplicationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Application-Id", headerParam1)

	}

	return req, nil
}

// NewGetV20GameGameCdBlockRequest generates requests for GetV20GameGameCdBlock
func NewGetV20GameGameCdBlockRequest(server string, gameCd string, params *GetV20GameGameCdBlockParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/block", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20GameGameCdBlockSearchKeywordRequest generates requests for GetV20GameGameCdBlockSearchKeyword
func NewGetV20GameGameCdBlockSearchKeywordRequest(server string, gameCd string, keyword string, params *GetV20GameGameCdBlockSearchKeywordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyword", runtime.ParamLocationPath, keyword)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/block/search/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV20GameGameCdBlockMemberNoRequest calls the generic DeleteV20GameGameCdBlockMemberNo builder with application/json body
func NewDeleteV20GameGameCdBlockMemberNoRequest(server string, gameCd string, memberNo int, body DeleteV20GameGameCdBlockMemberNoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV20GameGameCdBlockMemberNoRequestWithBody(server, gameCd, memberNo, "application/json", bodyReader)
}

// NewDeleteV20GameGameCdBlockMemberNoRequestWithBody generates requests for DeleteV20GameGameCdBlockMemberNo with any type of body
func NewDeleteV20GameGameCdBlockMemberNoRequestWithBody(server string, gameCd string, memberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/block/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV20GameGameCdBlockMemberNoRequest calls the generic PostV20GameGameCdBlockMemberNo builder with application/json body
func NewPostV20GameGameCdBlockMemberNoRequest(server string, gameCd string, memberNo int, body PostV20GameGameCdBlockMemberNoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameCdBlockMemberNoRequestWithBody(server, gameCd, memberNo, "application/json", bodyReader)
}

// NewPostV20GameGameCdBlockMemberNoRequestWithBody generates requests for PostV20GameGameCdBlockMemberNo with any type of body
func NewPostV20GameGameCdBlockMemberNoRequestWithBody(server string, gameCd string, memberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/block/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV20GameGameCdFriendRequest generates requests for GetV20GameGameCdFriend
func NewGetV20GameGameCdFriendRequest(server string, gameCd string, params *GetV20GameGameCdFriendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/friend", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV20GameGameCdFriendToMemberNoRequest calls the generic DeleteV20GameGameCdFriendToMemberNo builder with application/json body
func NewDeleteV20GameGameCdFriendToMemberNoRequest(server string, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV20GameGameCdFriendToMemberNoRequestWithBody(server, gameCd, toMemberNo, "application/json", bodyReader)
}

// NewDeleteV20GameGameCdFriendToMemberNoRequestWithBody generates requests for DeleteV20GameGameCdFriendToMemberNo with any type of body
func NewDeleteV20GameGameCdFriendToMemberNoRequestWithBody(server string, gameCd string, toMemberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to_member_no", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/friend/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV20GameGameCdFriendToMemberNoBestRequest calls the generic DeleteV20GameGameCdFriendToMemberNoBest builder with application/json body
func NewDeleteV20GameGameCdFriendToMemberNoBestRequest(server string, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoBestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV20GameGameCdFriendToMemberNoBestRequestWithBody(server, gameCd, toMemberNo, "application/json", bodyReader)
}

// NewDeleteV20GameGameCdFriendToMemberNoBestRequestWithBody generates requests for DeleteV20GameGameCdFriendToMemberNoBest with any type of body
func NewDeleteV20GameGameCdFriendToMemberNoBestRequestWithBody(server string, gameCd string, toMemberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to_member_no", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/friend/%s/best", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV20GameGameCdFriendToMemberNoBestRequest generates requests for GetV20GameGameCdFriendToMemberNoBest
func NewGetV20GameGameCdFriendToMemberNoBestRequest(server string, gameCd string, toMemberNo int, params *GetV20GameGameCdFriendToMemberNoBestParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to_member_no", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/friend/%s/best", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV20GameGameCdFriendToMemberNoBestRequest calls the generic PostV20GameGameCdFriendToMemberNoBest builder with application/json body
func NewPostV20GameGameCdFriendToMemberNoBestRequest(server string, gameCd string, toMemberNo int, body PostV20GameGameCdFriendToMemberNoBestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameCdFriendToMemberNoBestRequestWithBody(server, gameCd, toMemberNo, "application/json", bodyReader)
}

// NewPostV20GameGameCdFriendToMemberNoBestRequestWithBody generates requests for PostV20GameGameCdFriendToMemberNoBest with any type of body
func NewPostV20GameGameCdFriendToMemberNoBestRequestWithBody(server string, gameCd string, toMemberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to_member_no", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/friend/%s/best", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV20GameGameCdIncomingRequest generates requests for GetV20GameGameCdIncoming
func NewGetV20GameGameCdIncomingRequest(server string, gameCd string, params *GetV20GameGameCdIncomingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/incoming", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV20GameGameCdIncomingAcceptallRequest calls the generic PostV20GameGameCdIncomingAcceptall builder with application/json body
func NewPostV20GameGameCdIncomingAcceptallRequest(server string, gameCd string, body PostV20GameGameCdIncomingAcceptallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameCdIncomingAcceptallRequestWithBody(server, gameCd, "application/json", bodyReader)
}

// NewPostV20GameGameCdIncomingAcceptallRequestWithBody generates requests for PostV20GameGameCdIncomingAcceptall with any type of body
func NewPostV20GameGameCdIncomingAcceptallRequestWithBody(server string, gameCd string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/incoming/acceptall", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV20GameGameCdIncomingAcceptlistRequest calls the generic PostV20GameGameCdIncomingAcceptlist builder with application/json body
func NewPostV20GameGameCdIncomingAcceptlistRequest(server string, gameCd string, body PostV20GameGameCdIncomingAcceptlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameCdIncomingAcceptlistRequestWithBody(server, gameCd, "application/json", bodyReader)
}

// NewPostV20GameGameCdIncomingAcceptlistRequestWithBody generates requests for PostV20GameGameCdIncomingAcceptlist with any type of body
func NewPostV20GameGameCdIncomingAcceptlistRequestWithBody(server string, gameCd string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/incoming/acceptlist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV20GameGameCdIncomingRejectallRequest calls the generic DeleteV20GameGameCdIncomingRejectall builder with application/json body
func NewDeleteV20GameGameCdIncomingRejectallRequest(server string, gameCd string, body DeleteV20GameGameCdIncomingRejectallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV20GameGameCdIncomingRejectallRequestWithBody(server, gameCd, "application/json", bodyReader)
}

// NewDeleteV20GameGameCdIncomingRejectallRequestWithBody generates requests for DeleteV20GameGameCdIncomingRejectall with any type of body
func NewDeleteV20GameGameCdIncomingRejectallRequestWithBody(server string, gameCd string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/incoming/rejectall", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV20GameGameCdIncomingRejectlistRequest calls the generic DeleteV20GameGameCdIncomingRejectlist builder with application/json body
func NewDeleteV20GameGameCdIncomingRejectlistRequest(server string, gameCd string, body DeleteV20GameGameCdIncomingRejectlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV20GameGameCdIncomingRejectlistRequestWithBody(server, gameCd, "application/json", bodyReader)
}

// NewDeleteV20GameGameCdIncomingRejectlistRequestWithBody generates requests for DeleteV20GameGameCdIncomingRejectlist with any type of body
func NewDeleteV20GameGameCdIncomingRejectlistRequestWithBody(server string, gameCd string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/incoming/rejectlist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV20GameGameCdIncomingSearchKeywordRequest generates requests for GetV20GameGameCdIncomingSearchKeyword
func NewGetV20GameGameCdIncomingSearchKeywordRequest(server string, gameCd string, keyword string, params *GetV20GameGameCdIncomingSearchKeywordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyword", runtime.ParamLocationPath, keyword)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/incoming/search/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV20GameGameCdIncomingToMemberNoRequest calls the generic DeleteV20GameGameCdIncomingToMemberNo builder with application/json body
func NewDeleteV20GameGameCdIncomingToMemberNoRequest(server string, gameCd string, toMemberNo int, body DeleteV20GameGameCdIncomingToMemberNoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV20GameGameCdIncomingToMemberNoRequestWithBody(server, gameCd, toMemberNo, "application/json", bodyReader)
}

// NewDeleteV20GameGameCdIncomingToMemberNoRequestWithBody generates requests for DeleteV20GameGameCdIncomingToMemberNo with any type of body
func NewDeleteV20GameGameCdIncomingToMemberNoRequestWithBody(server string, gameCd string, toMemberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to_member_no", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/incoming/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV20GameGameCdIncomingToMemberNoRequest calls the generic PostV20GameGameCdIncomingToMemberNo builder with application/json body
func NewPostV20GameGameCdIncomingToMemberNoRequest(server string, gameCd string, toMemberNo int, body PostV20GameGameCdIncomingToMemberNoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameCdIncomingToMemberNoRequestWithBody(server, gameCd, toMemberNo, "application/json", bodyReader)
}

// NewPostV20GameGameCdIncomingToMemberNoRequestWithBody generates requests for PostV20GameGameCdIncomingToMemberNo with any type of body
func NewPostV20GameGameCdIncomingToMemberNoRequestWithBody(server string, gameCd string, toMemberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to_member_no", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/incoming/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV20GameGameCdOutgoingRequest generates requests for GetV20GameGameCdOutgoing
func NewGetV20GameGameCdOutgoingRequest(server string, gameCd string, params *GetV20GameGameCdOutgoingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/outgoing", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV20GameGameCdOutgoingCancelallRequest calls the generic PostV20GameGameCdOutgoingCancelall builder with application/json body
func NewPostV20GameGameCdOutgoingCancelallRequest(server string, gameCd string, body PostV20GameGameCdOutgoingCancelallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameCdOutgoingCancelallRequestWithBody(server, gameCd, "application/json", bodyReader)
}

// NewPostV20GameGameCdOutgoingCancelallRequestWithBody generates requests for PostV20GameGameCdOutgoingCancelall with any type of body
func NewPostV20GameGameCdOutgoingCancelallRequestWithBody(server string, gameCd string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/outgoing/cancelall", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV20GameGameCdOutgoingCancellistRequest calls the generic PostV20GameGameCdOutgoingCancellist builder with application/json body
func NewPostV20GameGameCdOutgoingCancellistRequest(server string, gameCd string, body PostV20GameGameCdOutgoingCancellistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameCdOutgoingCancellistRequestWithBody(server, gameCd, "application/json", bodyReader)
}

// NewPostV20GameGameCdOutgoingCancellistRequestWithBody generates requests for PostV20GameGameCdOutgoingCancellist with any type of body
func NewPostV20GameGameCdOutgoingCancellistRequestWithBody(server string, gameCd string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/outgoing/cancellist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV20GameGameCdOutgoingSearchKeywordRequest generates requests for GetV20GameGameCdOutgoingSearchKeyword
func NewGetV20GameGameCdOutgoingSearchKeywordRequest(server string, gameCd string, keyword string, params *GetV20GameGameCdOutgoingSearchKeywordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyword", runtime.ParamLocationPath, keyword)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/outgoing/search/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV20GameGameCdOutgoingToMemberNoRequest calls the generic DeleteV20GameGameCdOutgoingToMemberNo builder with application/json body
func NewDeleteV20GameGameCdOutgoingToMemberNoRequest(server string, gameCd string, toMemberNo int, body DeleteV20GameGameCdOutgoingToMemberNoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV20GameGameCdOutgoingToMemberNoRequestWithBody(server, gameCd, toMemberNo, "application/json", bodyReader)
}

// NewDeleteV20GameGameCdOutgoingToMemberNoRequestWithBody generates requests for DeleteV20GameGameCdOutgoingToMemberNo with any type of body
func NewDeleteV20GameGameCdOutgoingToMemberNoRequestWithBody(server string, gameCd string, toMemberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to_member_no", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/outgoing/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV20GameGameCdOutgoingToMemberNoRequest calls the generic PostV20GameGameCdOutgoingToMemberNo builder with application/json body
func NewPostV20GameGameCdOutgoingToMemberNoRequest(server string, gameCd string, toMemberNo int, body PostV20GameGameCdOutgoingToMemberNoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV20GameGameCdOutgoingToMemberNoRequestWithBody(server, gameCd, toMemberNo, "application/json", bodyReader)
}

// NewPostV20GameGameCdOutgoingToMemberNoRequestWithBody generates requests for PostV20GameGameCdOutgoingToMemberNo with any type of body
func NewPostV20GameGameCdOutgoingToMemberNoRequestWithBody(server string, gameCd string, toMemberNo int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to_member_no", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/outgoing/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV20GameGameCdPlayerListRequest generates requests for GetV20GameGameCdPlayerList
func NewGetV20GameGameCdPlayerListRequest(server string, gameCd string, params *GetV20GameGameCdPlayerListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/player/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "memberNoList", runtime.ParamLocationQuery, params.MemberNoList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20GameGameCdRelationsRequest generates requests for GetV20GameGameCdRelations
func NewGetV20GameGameCdRelationsRequest(server string, gameCd string, params *GetV20GameGameCdRelationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/relations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "memberNoList", runtime.ParamLocationQuery, params.MemberNoList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20GameGameCdSearchKeywordRequest generates requests for GetV20GameGameCdSearchKeyword
func NewGetV20GameGameCdSearchKeywordRequest(server string, gameCd string, keyword string, params *GetV20GameGameCdSearchKeywordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyword", runtime.ParamLocationPath, keyword)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/search/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20ServerV20GameGameCdFriendMemberNoRequest generates requests for GetV20ServerV20GameGameCdFriendMemberNo
func NewGetV20ServerV20GameGameCdFriendMemberNoRequest(server string, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdFriendMemberNoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/server/v2.0/game/%s/friend/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortRule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_rule", runtime.ParamLocationQuery, *params.SortRule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20ServerV20GameGameCdPlayerListRequest generates requests for GetV20ServerV20GameGameCdPlayerList
func NewGetV20ServerV20GameGameCdPlayerListRequest(server string, gameCd string, params *GetV20ServerV20GameGameCdPlayerListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/server/v2.0/game/%s/player/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "memberNoList", runtime.ParamLocationQuery, params.MemberNoList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20ServerV20GameGameCdRelationsMemberNoRequest generates requests for GetV20ServerV20GameGameCdRelationsMemberNo
func NewGetV20ServerV20GameGameCdRelationsMemberNoRequest(server string, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdRelationsMemberNoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "game_cd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/server/v2.0/game/%s/relations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_world", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "memberNoList", runtime.ParamLocationQuery, params.MemberNoList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20Xk5FollowerMemberNoListRequest generates requests for GetV20Xk5FollowerMemberNoList
func NewGetV20Xk5FollowerMemberNoListRequest(server string, memberNo string, params *GetV20Xk5FollowerMemberNoListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/xk5/follower/%s/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastDataTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastDataTime", runtime.ParamLocationQuery, *params.LastDataTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV20Xk5FollowingMemberNoRequest generates requests for DeleteV20Xk5FollowingMemberNo
func NewDeleteV20Xk5FollowingMemberNoRequest(server string, memberNo string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/xk5/following/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV20Xk5FollowingMemberNoRequest generates requests for PostV20Xk5FollowingMemberNo
func NewPostV20Xk5FollowingMemberNoRequest(server string, memberNo string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/xk5/following/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20Xk5FollowingMemberNoListRequest generates requests for GetV20Xk5FollowingMemberNoList
func NewGetV20Xk5FollowingMemberNoListRequest(server string, memberNo string, params *GetV20Xk5FollowingMemberNoListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/xk5/following/%s/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastDataTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastDataTime", runtime.ParamLocationQuery, *params.LastDataTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20Xk5FollowingFollowerMemberNoCountRequest generates requests for GetV20Xk5FollowingFollowerMemberNoCount
func NewGetV20Xk5FollowingFollowerMemberNoCountRequest(server string, memberNo string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/xk5/following_follower/%s/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20Xk5RelationMemberNoRequest generates requests for GetV20Xk5RelationMemberNo
func NewGetV20Xk5RelationMemberNoRequest(server string, memberNo string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/xk5/relation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV20Xk5RelationMemberNoListRequest generates requests for GetV20Xk5RelationMemberNoList
func NewGetV20Xk5RelationMemberNoListRequest(server string, memberNo string, params *GetV20Xk5RelationMemberNoListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_no", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/xk5/relation/%s/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toMemberNo", runtime.ParamLocationQuery, params.ToMemberNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV21GameGameNoFriendApprovalsRequest generates requests for PostV21GameGameNoFriendApprovals
func NewPostV21GameGameNoFriendApprovalsRequest(server string, gameNo PathGameNo) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.1/game/%s/friend-approvals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV21GameGameNoFriendApprovalsToMemberNoRequest generates requests for PostV21GameGameNoFriendApprovalsToMemberNo
func NewPostV21GameGameNoFriendApprovalsToMemberNoRequest(server string, gameNo PathGameNo, toMemberNo PathToMemberNo) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toMemberNo", runtime.ParamLocationPath, toMemberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.1/game/%s/friend-approvals/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV21GameGameNoFriendRequestsRequest calls the generic PostV21GameGameNoFriendRequests builder with application/json body
func NewPostV21GameGameNoFriendRequestsRequest(server string, gameNo PathGameNo, body PostV21GameGameNoFriendRequestsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV21GameGameNoFriendRequestsRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostV21GameGameNoFriendRequestsRequestWithBody generates requests for PostV21GameGameNoFriendRequests with any type of body
func NewPostV21GameGameNoFriendRequestsRequestWithBody(server string, gameNo PathGameNo, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.1/game/%s/friend-requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV21ServerGameGameCdRelationsMemberNoRequest generates requests for GetV21ServerGameGameCdRelationsMemberNo
func NewGetV21ServerGameGameCdRelationsMemberNoRequest(server string, gameCd string, memberNo int, params *GetV21ServerGameGameCdRelationsMemberNoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameCd", runtime.ParamLocationPath, gameCd)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.1/server/game/%s/relations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GameWorld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameWorld", runtime.ParamLocationQuery, *params.GameWorld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "memberNoList", runtime.ParamLocationQuery, params.MemberNoList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AccessToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accessToken", runtime.ParamLocationQuery, *params.AccessToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OsType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "osType", runtime.ParamLocationQuery, *params.OsType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV30GameGameNoFriendPageTogetherRequest calls the generic PostV30GameGameNoFriendPageTogether builder with application/json body
func NewPostV30GameGameNoFriendPageTogetherRequest(server string, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, body PostV30GameGameNoFriendPageTogetherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV30GameGameNoFriendPageTogetherRequestWithBody(server, gameNo, params, "application/json", bodyReader)
}

// NewPostV30GameGameNoFriendPageTogetherRequestWithBody generates requests for PostV30GameGameNoFriendPageTogether with any type of body
func NewPostV30GameGameNoFriendPageTogetherRequestWithBody(server string, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3.0/game/%s/friend/page_together", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Os-Type", runtime.ParamLocationHeader, params.OsType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Os-Type", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Application-Id", runtime.ParamLocationHeader, params.ApplicationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Application-Id", headerParam1)

	}

	return req, nil
}

// NewPostV30GameGameNoFriendTogetherRequest calls the generic PostV30GameGameNoFriendTogether builder with application/json body
func NewPostV30GameGameNoFriendTogetherRequest(server string, gameNo int, params *PostV30GameGameNoFriendTogetherParams, body PostV30GameGameNoFriendTogetherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV30GameGameNoFriendTogetherRequestWithBody(server, gameNo, params, "application/json", bodyReader)
}

// NewPostV30GameGameNoFriendTogetherRequestWithBody generates requests for PostV30GameGameNoFriendTogether with any type of body
func NewPostV30GameGameNoFriendTogetherRequestWithBody(server string, gameNo int, params *PostV30GameGameNoFriendTogetherParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3.0/game/%s/friend/together", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Os-Type", runtime.ParamLocationHeader, params.OsType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Os-Type", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Application-Id", runtime.ParamLocationHeader, params.ApplicationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Application-Id", headerParam1)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV20ApiInternalXk5FollowerMemberNoListWithResponse request
	GetV20ApiInternalXk5FollowerMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20ApiInternalXk5FollowerMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20ApiInternalXk5FollowerMemberNoListResponse, error)

	// GetV20ApiInternalXk5FollowingMemberNoListWithResponse request
	GetV20ApiInternalXk5FollowingMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20ApiInternalXk5FollowingMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20ApiInternalXk5FollowingMemberNoListResponse, error)

	// PostV20GameGameNoFriendPageTogetherWithBodyWithResponse request with any body
	PostV20GameGameNoFriendPageTogetherWithBodyWithResponse(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameNoFriendPageTogetherResponse, error)

	PostV20GameGameNoFriendPageTogetherWithResponse(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, body PostV20GameGameNoFriendPageTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameNoFriendPageTogetherResponse, error)

	// PostV20GameGameNoFriendTogetherWithBodyWithResponse request with any body
	PostV20GameGameNoFriendTogetherWithBodyWithResponse(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameNoFriendTogetherResponse, error)

	PostV20GameGameNoFriendTogetherWithResponse(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendTogetherParams, body PostV20GameGameNoFriendTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameNoFriendTogetherResponse, error)

	// GetV20GameGameCdBlockWithResponse request
	GetV20GameGameCdBlockWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdBlockParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdBlockResponse, error)

	// GetV20GameGameCdBlockSearchKeywordWithResponse request
	GetV20GameGameCdBlockSearchKeywordWithResponse(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdBlockSearchKeywordParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdBlockSearchKeywordResponse, error)

	// DeleteV20GameGameCdBlockMemberNoWithBodyWithResponse request with any body
	DeleteV20GameGameCdBlockMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, memberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdBlockMemberNoResponse, error)

	DeleteV20GameGameCdBlockMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, body DeleteV20GameGameCdBlockMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdBlockMemberNoResponse, error)

	// PostV20GameGameCdBlockMemberNoWithBodyWithResponse request with any body
	PostV20GameGameCdBlockMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, memberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdBlockMemberNoResponse, error)

	PostV20GameGameCdBlockMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, body PostV20GameGameCdBlockMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdBlockMemberNoResponse, error)

	// GetV20GameGameCdFriendWithResponse request
	GetV20GameGameCdFriendWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdFriendParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdFriendResponse, error)

	// DeleteV20GameGameCdFriendToMemberNoWithBodyWithResponse request with any body
	DeleteV20GameGameCdFriendToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdFriendToMemberNoResponse, error)

	DeleteV20GameGameCdFriendToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdFriendToMemberNoResponse, error)

	// DeleteV20GameGameCdFriendToMemberNoBestWithBodyWithResponse request with any body
	DeleteV20GameGameCdFriendToMemberNoBestWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdFriendToMemberNoBestResponse, error)

	DeleteV20GameGameCdFriendToMemberNoBestWithResponse(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoBestJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdFriendToMemberNoBestResponse, error)

	// GetV20GameGameCdFriendToMemberNoBestWithResponse request
	GetV20GameGameCdFriendToMemberNoBestWithResponse(ctx context.Context, gameCd string, toMemberNo int, params *GetV20GameGameCdFriendToMemberNoBestParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdFriendToMemberNoBestResponse, error)

	// PostV20GameGameCdFriendToMemberNoBestWithBodyWithResponse request with any body
	PostV20GameGameCdFriendToMemberNoBestWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdFriendToMemberNoBestResponse, error)

	PostV20GameGameCdFriendToMemberNoBestWithResponse(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdFriendToMemberNoBestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdFriendToMemberNoBestResponse, error)

	// GetV20GameGameCdIncomingWithResponse request
	GetV20GameGameCdIncomingWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdIncomingParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdIncomingResponse, error)

	// PostV20GameGameCdIncomingAcceptallWithBodyWithResponse request with any body
	PostV20GameGameCdIncomingAcceptallWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingAcceptallResponse, error)

	PostV20GameGameCdIncomingAcceptallWithResponse(ctx context.Context, gameCd string, body PostV20GameGameCdIncomingAcceptallJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingAcceptallResponse, error)

	// PostV20GameGameCdIncomingAcceptlistWithBodyWithResponse request with any body
	PostV20GameGameCdIncomingAcceptlistWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingAcceptlistResponse, error)

	PostV20GameGameCdIncomingAcceptlistWithResponse(ctx context.Context, gameCd string, body PostV20GameGameCdIncomingAcceptlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingAcceptlistResponse, error)

	// DeleteV20GameGameCdIncomingRejectallWithBodyWithResponse request with any body
	DeleteV20GameGameCdIncomingRejectallWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingRejectallResponse, error)

	DeleteV20GameGameCdIncomingRejectallWithResponse(ctx context.Context, gameCd string, body DeleteV20GameGameCdIncomingRejectallJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingRejectallResponse, error)

	// DeleteV20GameGameCdIncomingRejectlistWithBodyWithResponse request with any body
	DeleteV20GameGameCdIncomingRejectlistWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingRejectlistResponse, error)

	DeleteV20GameGameCdIncomingRejectlistWithResponse(ctx context.Context, gameCd string, body DeleteV20GameGameCdIncomingRejectlistJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingRejectlistResponse, error)

	// GetV20GameGameCdIncomingSearchKeywordWithResponse request
	GetV20GameGameCdIncomingSearchKeywordWithResponse(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdIncomingSearchKeywordParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdIncomingSearchKeywordResponse, error)

	// DeleteV20GameGameCdIncomingToMemberNoWithBodyWithResponse request with any body
	DeleteV20GameGameCdIncomingToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingToMemberNoResponse, error)

	DeleteV20GameGameCdIncomingToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdIncomingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingToMemberNoResponse, error)

	// PostV20GameGameCdIncomingToMemberNoWithBodyWithResponse request with any body
	PostV20GameGameCdIncomingToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingToMemberNoResponse, error)

	PostV20GameGameCdIncomingToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdIncomingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingToMemberNoResponse, error)

	// GetV20GameGameCdOutgoingWithResponse request
	GetV20GameGameCdOutgoingWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdOutgoingParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdOutgoingResponse, error)

	// PostV20GameGameCdOutgoingCancelallWithBodyWithResponse request with any body
	PostV20GameGameCdOutgoingCancelallWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingCancelallResponse, error)

	PostV20GameGameCdOutgoingCancelallWithResponse(ctx context.Context, gameCd string, body PostV20GameGameCdOutgoingCancelallJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingCancelallResponse, error)

	// PostV20GameGameCdOutgoingCancellistWithBodyWithResponse request with any body
	PostV20GameGameCdOutgoingCancellistWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingCancellistResponse, error)

	PostV20GameGameCdOutgoingCancellistWithResponse(ctx context.Context, gameCd string, body PostV20GameGameCdOutgoingCancellistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingCancellistResponse, error)

	// GetV20GameGameCdOutgoingSearchKeywordWithResponse request
	GetV20GameGameCdOutgoingSearchKeywordWithResponse(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdOutgoingSearchKeywordParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdOutgoingSearchKeywordResponse, error)

	// DeleteV20GameGameCdOutgoingToMemberNoWithBodyWithResponse request with any body
	DeleteV20GameGameCdOutgoingToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdOutgoingToMemberNoResponse, error)

	DeleteV20GameGameCdOutgoingToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdOutgoingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdOutgoingToMemberNoResponse, error)

	// PostV20GameGameCdOutgoingToMemberNoWithBodyWithResponse request with any body
	PostV20GameGameCdOutgoingToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingToMemberNoResponse, error)

	PostV20GameGameCdOutgoingToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdOutgoingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingToMemberNoResponse, error)

	// GetV20GameGameCdPlayerListWithResponse request
	GetV20GameGameCdPlayerListWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdPlayerListParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdPlayerListResponse, error)

	// GetV20GameGameCdRelationsWithResponse request
	GetV20GameGameCdRelationsWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdRelationsParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdRelationsResponse, error)

	// GetV20GameGameCdSearchKeywordWithResponse request
	GetV20GameGameCdSearchKeywordWithResponse(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdSearchKeywordParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdSearchKeywordResponse, error)

	// GetV20ServerV20GameGameCdFriendMemberNoWithResponse request
	GetV20ServerV20GameGameCdFriendMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdFriendMemberNoParams, reqEditors ...RequestEditorFn) (*GetV20ServerV20GameGameCdFriendMemberNoResponse, error)

	// GetV20ServerV20GameGameCdPlayerListWithResponse request
	GetV20ServerV20GameGameCdPlayerListWithResponse(ctx context.Context, gameCd string, params *GetV20ServerV20GameGameCdPlayerListParams, reqEditors ...RequestEditorFn) (*GetV20ServerV20GameGameCdPlayerListResponse, error)

	// GetV20ServerV20GameGameCdRelationsMemberNoWithResponse request
	GetV20ServerV20GameGameCdRelationsMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdRelationsMemberNoParams, reqEditors ...RequestEditorFn) (*GetV20ServerV20GameGameCdRelationsMemberNoResponse, error)

	// GetV20Xk5FollowerMemberNoListWithResponse request
	GetV20Xk5FollowerMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20Xk5FollowerMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20Xk5FollowerMemberNoListResponse, error)

	// DeleteV20Xk5FollowingMemberNoWithResponse request
	DeleteV20Xk5FollowingMemberNoWithResponse(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*DeleteV20Xk5FollowingMemberNoResponse, error)

	// PostV20Xk5FollowingMemberNoWithResponse request
	PostV20Xk5FollowingMemberNoWithResponse(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*PostV20Xk5FollowingMemberNoResponse, error)

	// GetV20Xk5FollowingMemberNoListWithResponse request
	GetV20Xk5FollowingMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20Xk5FollowingMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20Xk5FollowingMemberNoListResponse, error)

	// GetV20Xk5FollowingFollowerMemberNoCountWithResponse request
	GetV20Xk5FollowingFollowerMemberNoCountWithResponse(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*GetV20Xk5FollowingFollowerMemberNoCountResponse, error)

	// GetV20Xk5RelationMemberNoWithResponse request
	GetV20Xk5RelationMemberNoWithResponse(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*GetV20Xk5RelationMemberNoResponse, error)

	// GetV20Xk5RelationMemberNoListWithResponse request
	GetV20Xk5RelationMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20Xk5RelationMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20Xk5RelationMemberNoListResponse, error)

	// PostV21GameGameNoFriendApprovalsWithResponse request
	PostV21GameGameNoFriendApprovalsWithResponse(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*PostV21GameGameNoFriendApprovalsResponse, error)

	// PostV21GameGameNoFriendApprovalsToMemberNoWithResponse request
	PostV21GameGameNoFriendApprovalsToMemberNoWithResponse(ctx context.Context, gameNo PathGameNo, toMemberNo PathToMemberNo, reqEditors ...RequestEditorFn) (*PostV21GameGameNoFriendApprovalsToMemberNoResponse, error)

	// PostV21GameGameNoFriendRequestsWithBodyWithResponse request with any body
	PostV21GameGameNoFriendRequestsWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV21GameGameNoFriendRequestsResponse, error)

	PostV21GameGameNoFriendRequestsWithResponse(ctx context.Context, gameNo PathGameNo, body PostV21GameGameNoFriendRequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV21GameGameNoFriendRequestsResponse, error)

	// GetV21ServerGameGameCdRelationsMemberNoWithResponse request
	GetV21ServerGameGameCdRelationsMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, params *GetV21ServerGameGameCdRelationsMemberNoParams, reqEditors ...RequestEditorFn) (*GetV21ServerGameGameCdRelationsMemberNoResponse, error)

	// PostV30GameGameNoFriendPageTogetherWithBodyWithResponse request with any body
	PostV30GameGameNoFriendPageTogetherWithBodyWithResponse(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV30GameGameNoFriendPageTogetherResponse, error)

	PostV30GameGameNoFriendPageTogetherWithResponse(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, body PostV30GameGameNoFriendPageTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV30GameGameNoFriendPageTogetherResponse, error)

	// PostV30GameGameNoFriendTogetherWithBodyWithResponse request with any body
	PostV30GameGameNoFriendTogetherWithBodyWithResponse(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV30GameGameNoFriendTogetherResponse, error)

	PostV30GameGameNoFriendTogetherWithResponse(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendTogetherParams, body PostV30GameGameNoFriendTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV30GameGameNoFriendTogetherResponse, error)
}

type GetV20ApiInternalXk5FollowerMemberNoListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowListResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r GetV20ApiInternalXk5FollowerMemberNoListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20ApiInternalXk5FollowerMemberNoListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20ApiInternalXk5FollowingMemberNoListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowListResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r GetV20ApiInternalXk5FollowingMemberNoListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20ApiInternalXk5FollowingMemberNoListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameNoFriendPageTogetherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TogetherFriendPageVoResponse
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameNoFriendPageTogetherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameNoFriendPageTogetherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameNoFriendTogetherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TogetherFriendListResponse
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameNoFriendTogetherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameNoFriendTogetherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameBlockListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdBlockSearchKeywordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameBlockListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdBlockSearchKeywordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdBlockSearchKeywordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV20GameGameCdBlockMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r DeleteV20GameGameCdBlockMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV20GameGameCdBlockMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameCdBlockMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameCdBlockMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameCdBlockMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdFriendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameFriendListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdFriendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdFriendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV20GameGameCdFriendToMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r DeleteV20GameGameCdFriendToMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV20GameGameCdFriendToMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV20GameGameCdFriendToMemberNoBestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r DeleteV20GameGameCdFriendToMemberNoBestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV20GameGameCdFriendToMemberNoBestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdFriendToMemberNoBestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BestStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdFriendToMemberNoBestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdFriendToMemberNoBestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameCdFriendToMemberNoBestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameCdFriendToMemberNoBestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameCdFriendToMemberNoBestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdIncomingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameRequestVOListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdIncomingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdIncomingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameCdIncomingAcceptallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameCdIncomingAcceptallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameCdIncomingAcceptallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameCdIncomingAcceptlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameCdIncomingAcceptlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameCdIncomingAcceptlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV20GameGameCdIncomingRejectallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r DeleteV20GameGameCdIncomingRejectallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV20GameGameCdIncomingRejectallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV20GameGameCdIncomingRejectlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r DeleteV20GameGameCdIncomingRejectlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV20GameGameCdIncomingRejectlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdIncomingSearchKeywordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameRequestVOListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdIncomingSearchKeywordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdIncomingSearchKeywordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV20GameGameCdIncomingToMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r DeleteV20GameGameCdIncomingToMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV20GameGameCdIncomingToMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameCdIncomingToMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameCdIncomingToMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameCdIncomingToMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdOutgoingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameRequestVOListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdOutgoingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdOutgoingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameCdOutgoingCancelallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameCdOutgoingCancelallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameCdOutgoingCancelallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameCdOutgoingCancellistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameCdOutgoingCancellistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameCdOutgoingCancellistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdOutgoingSearchKeywordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameRequestVOListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdOutgoingSearchKeywordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdOutgoingSearchKeywordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV20GameGameCdOutgoingToMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r DeleteV20GameGameCdOutgoingToMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV20GameGameCdOutgoingToMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20GameGameCdOutgoingToMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult4Str
}

// Status returns HTTPResponse.Status
func (r PostV20GameGameCdOutgoingToMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20GameGameCdOutgoingToMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdPlayerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GamePlayerVOListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdPlayerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdPlayerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GamePlayerRelationListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20GameGameCdSearchKeywordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameFriendListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20GameGameCdSearchKeywordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20GameGameCdSearchKeywordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20ServerV20GameGameCdFriendMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameFriendListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20ServerV20GameGameCdFriendMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20ServerV20GameGameCdFriendMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20ServerV20GameGameCdPlayerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GamePlayerVOListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20ServerV20GameGameCdPlayerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20ServerV20GameGameCdPlayerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20ServerV20GameGameCdRelationsMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GamePlayerRelationListResponse
}

// Status returns HTTPResponse.Status
func (r GetV20ServerV20GameGameCdRelationsMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20ServerV20GameGameCdRelationsMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20Xk5FollowerMemberNoListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowListResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r GetV20Xk5FollowerMemberNoListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20Xk5FollowerMemberNoListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV20Xk5FollowingMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r DeleteV20Xk5FollowingMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV20Xk5FollowingMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV20Xk5FollowingMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r PostV20Xk5FollowingMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV20Xk5FollowingMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20Xk5FollowingMemberNoListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowListResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r GetV20Xk5FollowingMemberNoListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20Xk5FollowingMemberNoListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20Xk5FollowingFollowerMemberNoCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowFollowerCountResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r GetV20Xk5FollowingFollowerMemberNoCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20Xk5FollowingFollowerMemberNoCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20Xk5RelationMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r GetV20Xk5RelationMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20Xk5RelationMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV20Xk5RelationMemberNoListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FollowCountAndRelationResponse
	JSON400      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r GetV20Xk5RelationMemberNoListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV20Xk5RelationMemberNoListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV21GameGameNoFriendApprovalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
	JSON400      *InvalidArgument
	JSON401      *AuthFailed
	JSON500      *ServiceError
}

// Status returns HTTPResponse.Status
func (r PostV21GameGameNoFriendApprovalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV21GameGameNoFriendApprovalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV21GameGameNoFriendApprovalsToMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
	JSON400      *InvalidArgument
	JSON401      *AuthFailed
	JSON500      *ServiceError
}

// Status returns HTTPResponse.Status
func (r PostV21GameGameNoFriendApprovalsToMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV21GameGameNoFriendApprovalsToMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV21GameGameNoFriendRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
	JSON400      *InvalidArgument
	JSON401      *AuthFailed
	JSON500      *ServiceError
}

// Status returns HTTPResponse.Status
func (r PostV21GameGameNoFriendRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV21GameGameNoFriendRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV21ServerGameGameCdRelationsMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GamePlayerRelationListResponseV21
	JSON400      *ResponseResult4Int
	JSON500      *ResponseResult4Int
}

// Status returns HTTPResponse.Status
func (r GetV21ServerGameGameCdRelationsMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV21ServerGameGameCdRelationsMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV30GameGameNoFriendPageTogetherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TogetherFriendPageVoResponse
}

// Status returns HTTPResponse.Status
func (r PostV30GameGameNoFriendPageTogetherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV30GameGameNoFriendPageTogetherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV30GameGameNoFriendTogetherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TogetherFriendListResponse
}

// Status returns HTTPResponse.Status
func (r PostV30GameGameNoFriendTogetherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV30GameGameNoFriendTogetherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV20ApiInternalXk5FollowerMemberNoListWithResponse request returning *GetV20ApiInternalXk5FollowerMemberNoListResponse
func (c *ClientWithResponses) GetV20ApiInternalXk5FollowerMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20ApiInternalXk5FollowerMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20ApiInternalXk5FollowerMemberNoListResponse, error) {
	rsp, err := c.GetV20ApiInternalXk5FollowerMemberNoList(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20ApiInternalXk5FollowerMemberNoListResponse(rsp)
}

// GetV20ApiInternalXk5FollowingMemberNoListWithResponse request returning *GetV20ApiInternalXk5FollowingMemberNoListResponse
func (c *ClientWithResponses) GetV20ApiInternalXk5FollowingMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20ApiInternalXk5FollowingMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20ApiInternalXk5FollowingMemberNoListResponse, error) {
	rsp, err := c.GetV20ApiInternalXk5FollowingMemberNoList(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20ApiInternalXk5FollowingMemberNoListResponse(rsp)
}

// PostV20GameGameNoFriendPageTogetherWithBodyWithResponse request with arbitrary body returning *PostV20GameGameNoFriendPageTogetherResponse
func (c *ClientWithResponses) PostV20GameGameNoFriendPageTogetherWithBodyWithResponse(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameNoFriendPageTogetherResponse, error) {
	rsp, err := c.PostV20GameGameNoFriendPageTogetherWithBody(ctx, gameNo, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameNoFriendPageTogetherResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameNoFriendPageTogetherWithResponse(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendPageTogetherParams, body PostV20GameGameNoFriendPageTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameNoFriendPageTogetherResponse, error) {
	rsp, err := c.PostV20GameGameNoFriendPageTogether(ctx, gameNo, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameNoFriendPageTogetherResponse(rsp)
}

// PostV20GameGameNoFriendTogetherWithBodyWithResponse request with arbitrary body returning *PostV20GameGameNoFriendTogetherResponse
func (c *ClientWithResponses) PostV20GameGameNoFriendTogetherWithBodyWithResponse(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameNoFriendTogetherResponse, error) {
	rsp, err := c.PostV20GameGameNoFriendTogetherWithBody(ctx, gameNo, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameNoFriendTogetherResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameNoFriendTogetherWithResponse(ctx context.Context, gameNo int, params *PostV20GameGameNoFriendTogetherParams, body PostV20GameGameNoFriendTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameNoFriendTogetherResponse, error) {
	rsp, err := c.PostV20GameGameNoFriendTogether(ctx, gameNo, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameNoFriendTogetherResponse(rsp)
}

// GetV20GameGameCdBlockWithResponse request returning *GetV20GameGameCdBlockResponse
func (c *ClientWithResponses) GetV20GameGameCdBlockWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdBlockParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdBlockResponse, error) {
	rsp, err := c.GetV20GameGameCdBlock(ctx, gameCd, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdBlockResponse(rsp)
}

// GetV20GameGameCdBlockSearchKeywordWithResponse request returning *GetV20GameGameCdBlockSearchKeywordResponse
func (c *ClientWithResponses) GetV20GameGameCdBlockSearchKeywordWithResponse(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdBlockSearchKeywordParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdBlockSearchKeywordResponse, error) {
	rsp, err := c.GetV20GameGameCdBlockSearchKeyword(ctx, gameCd, keyword, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdBlockSearchKeywordResponse(rsp)
}

// DeleteV20GameGameCdBlockMemberNoWithBodyWithResponse request with arbitrary body returning *DeleteV20GameGameCdBlockMemberNoResponse
func (c *ClientWithResponses) DeleteV20GameGameCdBlockMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, memberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdBlockMemberNoResponse, error) {
	rsp, err := c.DeleteV20GameGameCdBlockMemberNoWithBody(ctx, gameCd, memberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdBlockMemberNoResponse(rsp)
}

func (c *ClientWithResponses) DeleteV20GameGameCdBlockMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, body DeleteV20GameGameCdBlockMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdBlockMemberNoResponse, error) {
	rsp, err := c.DeleteV20GameGameCdBlockMemberNo(ctx, gameCd, memberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdBlockMemberNoResponse(rsp)
}

// PostV20GameGameCdBlockMemberNoWithBodyWithResponse request with arbitrary body returning *PostV20GameGameCdBlockMemberNoResponse
func (c *ClientWithResponses) PostV20GameGameCdBlockMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, memberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdBlockMemberNoResponse, error) {
	rsp, err := c.PostV20GameGameCdBlockMemberNoWithBody(ctx, gameCd, memberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdBlockMemberNoResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameCdBlockMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, body PostV20GameGameCdBlockMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdBlockMemberNoResponse, error) {
	rsp, err := c.PostV20GameGameCdBlockMemberNo(ctx, gameCd, memberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdBlockMemberNoResponse(rsp)
}

// GetV20GameGameCdFriendWithResponse request returning *GetV20GameGameCdFriendResponse
func (c *ClientWithResponses) GetV20GameGameCdFriendWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdFriendParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdFriendResponse, error) {
	rsp, err := c.GetV20GameGameCdFriend(ctx, gameCd, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdFriendResponse(rsp)
}

// DeleteV20GameGameCdFriendToMemberNoWithBodyWithResponse request with arbitrary body returning *DeleteV20GameGameCdFriendToMemberNoResponse
func (c *ClientWithResponses) DeleteV20GameGameCdFriendToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdFriendToMemberNoResponse, error) {
	rsp, err := c.DeleteV20GameGameCdFriendToMemberNoWithBody(ctx, gameCd, toMemberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdFriendToMemberNoResponse(rsp)
}

func (c *ClientWithResponses) DeleteV20GameGameCdFriendToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdFriendToMemberNoResponse, error) {
	rsp, err := c.DeleteV20GameGameCdFriendToMemberNo(ctx, gameCd, toMemberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdFriendToMemberNoResponse(rsp)
}

// DeleteV20GameGameCdFriendToMemberNoBestWithBodyWithResponse request with arbitrary body returning *DeleteV20GameGameCdFriendToMemberNoBestResponse
func (c *ClientWithResponses) DeleteV20GameGameCdFriendToMemberNoBestWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdFriendToMemberNoBestResponse, error) {
	rsp, err := c.DeleteV20GameGameCdFriendToMemberNoBestWithBody(ctx, gameCd, toMemberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdFriendToMemberNoBestResponse(rsp)
}

func (c *ClientWithResponses) DeleteV20GameGameCdFriendToMemberNoBestWithResponse(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdFriendToMemberNoBestJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdFriendToMemberNoBestResponse, error) {
	rsp, err := c.DeleteV20GameGameCdFriendToMemberNoBest(ctx, gameCd, toMemberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdFriendToMemberNoBestResponse(rsp)
}

// GetV20GameGameCdFriendToMemberNoBestWithResponse request returning *GetV20GameGameCdFriendToMemberNoBestResponse
func (c *ClientWithResponses) GetV20GameGameCdFriendToMemberNoBestWithResponse(ctx context.Context, gameCd string, toMemberNo int, params *GetV20GameGameCdFriendToMemberNoBestParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdFriendToMemberNoBestResponse, error) {
	rsp, err := c.GetV20GameGameCdFriendToMemberNoBest(ctx, gameCd, toMemberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdFriendToMemberNoBestResponse(rsp)
}

// PostV20GameGameCdFriendToMemberNoBestWithBodyWithResponse request with arbitrary body returning *PostV20GameGameCdFriendToMemberNoBestResponse
func (c *ClientWithResponses) PostV20GameGameCdFriendToMemberNoBestWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdFriendToMemberNoBestResponse, error) {
	rsp, err := c.PostV20GameGameCdFriendToMemberNoBestWithBody(ctx, gameCd, toMemberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdFriendToMemberNoBestResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameCdFriendToMemberNoBestWithResponse(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdFriendToMemberNoBestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdFriendToMemberNoBestResponse, error) {
	rsp, err := c.PostV20GameGameCdFriendToMemberNoBest(ctx, gameCd, toMemberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdFriendToMemberNoBestResponse(rsp)
}

// GetV20GameGameCdIncomingWithResponse request returning *GetV20GameGameCdIncomingResponse
func (c *ClientWithResponses) GetV20GameGameCdIncomingWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdIncomingParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdIncomingResponse, error) {
	rsp, err := c.GetV20GameGameCdIncoming(ctx, gameCd, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdIncomingResponse(rsp)
}

// PostV20GameGameCdIncomingAcceptallWithBodyWithResponse request with arbitrary body returning *PostV20GameGameCdIncomingAcceptallResponse
func (c *ClientWithResponses) PostV20GameGameCdIncomingAcceptallWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingAcceptallResponse, error) {
	rsp, err := c.PostV20GameGameCdIncomingAcceptallWithBody(ctx, gameCd, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdIncomingAcceptallResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameCdIncomingAcceptallWithResponse(ctx context.Context, gameCd string, body PostV20GameGameCdIncomingAcceptallJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingAcceptallResponse, error) {
	rsp, err := c.PostV20GameGameCdIncomingAcceptall(ctx, gameCd, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdIncomingAcceptallResponse(rsp)
}

// PostV20GameGameCdIncomingAcceptlistWithBodyWithResponse request with arbitrary body returning *PostV20GameGameCdIncomingAcceptlistResponse
func (c *ClientWithResponses) PostV20GameGameCdIncomingAcceptlistWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingAcceptlistResponse, error) {
	rsp, err := c.PostV20GameGameCdIncomingAcceptlistWithBody(ctx, gameCd, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdIncomingAcceptlistResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameCdIncomingAcceptlistWithResponse(ctx context.Context, gameCd string, body PostV20GameGameCdIncomingAcceptlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingAcceptlistResponse, error) {
	rsp, err := c.PostV20GameGameCdIncomingAcceptlist(ctx, gameCd, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdIncomingAcceptlistResponse(rsp)
}

// DeleteV20GameGameCdIncomingRejectallWithBodyWithResponse request with arbitrary body returning *DeleteV20GameGameCdIncomingRejectallResponse
func (c *ClientWithResponses) DeleteV20GameGameCdIncomingRejectallWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingRejectallResponse, error) {
	rsp, err := c.DeleteV20GameGameCdIncomingRejectallWithBody(ctx, gameCd, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdIncomingRejectallResponse(rsp)
}

func (c *ClientWithResponses) DeleteV20GameGameCdIncomingRejectallWithResponse(ctx context.Context, gameCd string, body DeleteV20GameGameCdIncomingRejectallJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingRejectallResponse, error) {
	rsp, err := c.DeleteV20GameGameCdIncomingRejectall(ctx, gameCd, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdIncomingRejectallResponse(rsp)
}

// DeleteV20GameGameCdIncomingRejectlistWithBodyWithResponse request with arbitrary body returning *DeleteV20GameGameCdIncomingRejectlistResponse
func (c *ClientWithResponses) DeleteV20GameGameCdIncomingRejectlistWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingRejectlistResponse, error) {
	rsp, err := c.DeleteV20GameGameCdIncomingRejectlistWithBody(ctx, gameCd, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdIncomingRejectlistResponse(rsp)
}

func (c *ClientWithResponses) DeleteV20GameGameCdIncomingRejectlistWithResponse(ctx context.Context, gameCd string, body DeleteV20GameGameCdIncomingRejectlistJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingRejectlistResponse, error) {
	rsp, err := c.DeleteV20GameGameCdIncomingRejectlist(ctx, gameCd, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdIncomingRejectlistResponse(rsp)
}

// GetV20GameGameCdIncomingSearchKeywordWithResponse request returning *GetV20GameGameCdIncomingSearchKeywordResponse
func (c *ClientWithResponses) GetV20GameGameCdIncomingSearchKeywordWithResponse(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdIncomingSearchKeywordParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdIncomingSearchKeywordResponse, error) {
	rsp, err := c.GetV20GameGameCdIncomingSearchKeyword(ctx, gameCd, keyword, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdIncomingSearchKeywordResponse(rsp)
}

// DeleteV20GameGameCdIncomingToMemberNoWithBodyWithResponse request with arbitrary body returning *DeleteV20GameGameCdIncomingToMemberNoResponse
func (c *ClientWithResponses) DeleteV20GameGameCdIncomingToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingToMemberNoResponse, error) {
	rsp, err := c.DeleteV20GameGameCdIncomingToMemberNoWithBody(ctx, gameCd, toMemberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdIncomingToMemberNoResponse(rsp)
}

func (c *ClientWithResponses) DeleteV20GameGameCdIncomingToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdIncomingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdIncomingToMemberNoResponse, error) {
	rsp, err := c.DeleteV20GameGameCdIncomingToMemberNo(ctx, gameCd, toMemberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdIncomingToMemberNoResponse(rsp)
}

// PostV20GameGameCdIncomingToMemberNoWithBodyWithResponse request with arbitrary body returning *PostV20GameGameCdIncomingToMemberNoResponse
func (c *ClientWithResponses) PostV20GameGameCdIncomingToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingToMemberNoResponse, error) {
	rsp, err := c.PostV20GameGameCdIncomingToMemberNoWithBody(ctx, gameCd, toMemberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdIncomingToMemberNoResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameCdIncomingToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdIncomingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdIncomingToMemberNoResponse, error) {
	rsp, err := c.PostV20GameGameCdIncomingToMemberNo(ctx, gameCd, toMemberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdIncomingToMemberNoResponse(rsp)
}

// GetV20GameGameCdOutgoingWithResponse request returning *GetV20GameGameCdOutgoingResponse
func (c *ClientWithResponses) GetV20GameGameCdOutgoingWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdOutgoingParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdOutgoingResponse, error) {
	rsp, err := c.GetV20GameGameCdOutgoing(ctx, gameCd, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdOutgoingResponse(rsp)
}

// PostV20GameGameCdOutgoingCancelallWithBodyWithResponse request with arbitrary body returning *PostV20GameGameCdOutgoingCancelallResponse
func (c *ClientWithResponses) PostV20GameGameCdOutgoingCancelallWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingCancelallResponse, error) {
	rsp, err := c.PostV20GameGameCdOutgoingCancelallWithBody(ctx, gameCd, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdOutgoingCancelallResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameCdOutgoingCancelallWithResponse(ctx context.Context, gameCd string, body PostV20GameGameCdOutgoingCancelallJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingCancelallResponse, error) {
	rsp, err := c.PostV20GameGameCdOutgoingCancelall(ctx, gameCd, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdOutgoingCancelallResponse(rsp)
}

// PostV20GameGameCdOutgoingCancellistWithBodyWithResponse request with arbitrary body returning *PostV20GameGameCdOutgoingCancellistResponse
func (c *ClientWithResponses) PostV20GameGameCdOutgoingCancellistWithBodyWithResponse(ctx context.Context, gameCd string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingCancellistResponse, error) {
	rsp, err := c.PostV20GameGameCdOutgoingCancellistWithBody(ctx, gameCd, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdOutgoingCancellistResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameCdOutgoingCancellistWithResponse(ctx context.Context, gameCd string, body PostV20GameGameCdOutgoingCancellistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingCancellistResponse, error) {
	rsp, err := c.PostV20GameGameCdOutgoingCancellist(ctx, gameCd, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdOutgoingCancellistResponse(rsp)
}

// GetV20GameGameCdOutgoingSearchKeywordWithResponse request returning *GetV20GameGameCdOutgoingSearchKeywordResponse
func (c *ClientWithResponses) GetV20GameGameCdOutgoingSearchKeywordWithResponse(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdOutgoingSearchKeywordParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdOutgoingSearchKeywordResponse, error) {
	rsp, err := c.GetV20GameGameCdOutgoingSearchKeyword(ctx, gameCd, keyword, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdOutgoingSearchKeywordResponse(rsp)
}

// DeleteV20GameGameCdOutgoingToMemberNoWithBodyWithResponse request with arbitrary body returning *DeleteV20GameGameCdOutgoingToMemberNoResponse
func (c *ClientWithResponses) DeleteV20GameGameCdOutgoingToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdOutgoingToMemberNoResponse, error) {
	rsp, err := c.DeleteV20GameGameCdOutgoingToMemberNoWithBody(ctx, gameCd, toMemberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdOutgoingToMemberNoResponse(rsp)
}

func (c *ClientWithResponses) DeleteV20GameGameCdOutgoingToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body DeleteV20GameGameCdOutgoingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV20GameGameCdOutgoingToMemberNoResponse, error) {
	rsp, err := c.DeleteV20GameGameCdOutgoingToMemberNo(ctx, gameCd, toMemberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20GameGameCdOutgoingToMemberNoResponse(rsp)
}

// PostV20GameGameCdOutgoingToMemberNoWithBodyWithResponse request with arbitrary body returning *PostV20GameGameCdOutgoingToMemberNoResponse
func (c *ClientWithResponses) PostV20GameGameCdOutgoingToMemberNoWithBodyWithResponse(ctx context.Context, gameCd string, toMemberNo int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingToMemberNoResponse, error) {
	rsp, err := c.PostV20GameGameCdOutgoingToMemberNoWithBody(ctx, gameCd, toMemberNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdOutgoingToMemberNoResponse(rsp)
}

func (c *ClientWithResponses) PostV20GameGameCdOutgoingToMemberNoWithResponse(ctx context.Context, gameCd string, toMemberNo int, body PostV20GameGameCdOutgoingToMemberNoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV20GameGameCdOutgoingToMemberNoResponse, error) {
	rsp, err := c.PostV20GameGameCdOutgoingToMemberNo(ctx, gameCd, toMemberNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20GameGameCdOutgoingToMemberNoResponse(rsp)
}

// GetV20GameGameCdPlayerListWithResponse request returning *GetV20GameGameCdPlayerListResponse
func (c *ClientWithResponses) GetV20GameGameCdPlayerListWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdPlayerListParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdPlayerListResponse, error) {
	rsp, err := c.GetV20GameGameCdPlayerList(ctx, gameCd, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdPlayerListResponse(rsp)
}

// GetV20GameGameCdRelationsWithResponse request returning *GetV20GameGameCdRelationsResponse
func (c *ClientWithResponses) GetV20GameGameCdRelationsWithResponse(ctx context.Context, gameCd string, params *GetV20GameGameCdRelationsParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdRelationsResponse, error) {
	rsp, err := c.GetV20GameGameCdRelations(ctx, gameCd, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdRelationsResponse(rsp)
}

// GetV20GameGameCdSearchKeywordWithResponse request returning *GetV20GameGameCdSearchKeywordResponse
func (c *ClientWithResponses) GetV20GameGameCdSearchKeywordWithResponse(ctx context.Context, gameCd string, keyword string, params *GetV20GameGameCdSearchKeywordParams, reqEditors ...RequestEditorFn) (*GetV20GameGameCdSearchKeywordResponse, error) {
	rsp, err := c.GetV20GameGameCdSearchKeyword(ctx, gameCd, keyword, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20GameGameCdSearchKeywordResponse(rsp)
}

// GetV20ServerV20GameGameCdFriendMemberNoWithResponse request returning *GetV20ServerV20GameGameCdFriendMemberNoResponse
func (c *ClientWithResponses) GetV20ServerV20GameGameCdFriendMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdFriendMemberNoParams, reqEditors ...RequestEditorFn) (*GetV20ServerV20GameGameCdFriendMemberNoResponse, error) {
	rsp, err := c.GetV20ServerV20GameGameCdFriendMemberNo(ctx, gameCd, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20ServerV20GameGameCdFriendMemberNoResponse(rsp)
}

// GetV20ServerV20GameGameCdPlayerListWithResponse request returning *GetV20ServerV20GameGameCdPlayerListResponse
func (c *ClientWithResponses) GetV20ServerV20GameGameCdPlayerListWithResponse(ctx context.Context, gameCd string, params *GetV20ServerV20GameGameCdPlayerListParams, reqEditors ...RequestEditorFn) (*GetV20ServerV20GameGameCdPlayerListResponse, error) {
	rsp, err := c.GetV20ServerV20GameGameCdPlayerList(ctx, gameCd, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20ServerV20GameGameCdPlayerListResponse(rsp)
}

// GetV20ServerV20GameGameCdRelationsMemberNoWithResponse request returning *GetV20ServerV20GameGameCdRelationsMemberNoResponse
func (c *ClientWithResponses) GetV20ServerV20GameGameCdRelationsMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, params *GetV20ServerV20GameGameCdRelationsMemberNoParams, reqEditors ...RequestEditorFn) (*GetV20ServerV20GameGameCdRelationsMemberNoResponse, error) {
	rsp, err := c.GetV20ServerV20GameGameCdRelationsMemberNo(ctx, gameCd, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20ServerV20GameGameCdRelationsMemberNoResponse(rsp)
}

// GetV20Xk5FollowerMemberNoListWithResponse request returning *GetV20Xk5FollowerMemberNoListResponse
func (c *ClientWithResponses) GetV20Xk5FollowerMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20Xk5FollowerMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20Xk5FollowerMemberNoListResponse, error) {
	rsp, err := c.GetV20Xk5FollowerMemberNoList(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20Xk5FollowerMemberNoListResponse(rsp)
}

// DeleteV20Xk5FollowingMemberNoWithResponse request returning *DeleteV20Xk5FollowingMemberNoResponse
func (c *ClientWithResponses) DeleteV20Xk5FollowingMemberNoWithResponse(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*DeleteV20Xk5FollowingMemberNoResponse, error) {
	rsp, err := c.DeleteV20Xk5FollowingMemberNo(ctx, memberNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV20Xk5FollowingMemberNoResponse(rsp)
}

// PostV20Xk5FollowingMemberNoWithResponse request returning *PostV20Xk5FollowingMemberNoResponse
func (c *ClientWithResponses) PostV20Xk5FollowingMemberNoWithResponse(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*PostV20Xk5FollowingMemberNoResponse, error) {
	rsp, err := c.PostV20Xk5FollowingMemberNo(ctx, memberNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV20Xk5FollowingMemberNoResponse(rsp)
}

// GetV20Xk5FollowingMemberNoListWithResponse request returning *GetV20Xk5FollowingMemberNoListResponse
func (c *ClientWithResponses) GetV20Xk5FollowingMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20Xk5FollowingMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20Xk5FollowingMemberNoListResponse, error) {
	rsp, err := c.GetV20Xk5FollowingMemberNoList(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20Xk5FollowingMemberNoListResponse(rsp)
}

// GetV20Xk5FollowingFollowerMemberNoCountWithResponse request returning *GetV20Xk5FollowingFollowerMemberNoCountResponse
func (c *ClientWithResponses) GetV20Xk5FollowingFollowerMemberNoCountWithResponse(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*GetV20Xk5FollowingFollowerMemberNoCountResponse, error) {
	rsp, err := c.GetV20Xk5FollowingFollowerMemberNoCount(ctx, memberNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20Xk5FollowingFollowerMemberNoCountResponse(rsp)
}

// GetV20Xk5RelationMemberNoWithResponse request returning *GetV20Xk5RelationMemberNoResponse
func (c *ClientWithResponses) GetV20Xk5RelationMemberNoWithResponse(ctx context.Context, memberNo string, reqEditors ...RequestEditorFn) (*GetV20Xk5RelationMemberNoResponse, error) {
	rsp, err := c.GetV20Xk5RelationMemberNo(ctx, memberNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20Xk5RelationMemberNoResponse(rsp)
}

// GetV20Xk5RelationMemberNoListWithResponse request returning *GetV20Xk5RelationMemberNoListResponse
func (c *ClientWithResponses) GetV20Xk5RelationMemberNoListWithResponse(ctx context.Context, memberNo string, params *GetV20Xk5RelationMemberNoListParams, reqEditors ...RequestEditorFn) (*GetV20Xk5RelationMemberNoListResponse, error) {
	rsp, err := c.GetV20Xk5RelationMemberNoList(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV20Xk5RelationMemberNoListResponse(rsp)
}

// PostV21GameGameNoFriendApprovalsWithResponse request returning *PostV21GameGameNoFriendApprovalsResponse
func (c *ClientWithResponses) PostV21GameGameNoFriendApprovalsWithResponse(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*PostV21GameGameNoFriendApprovalsResponse, error) {
	rsp, err := c.PostV21GameGameNoFriendApprovals(ctx, gameNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV21GameGameNoFriendApprovalsResponse(rsp)
}

// PostV21GameGameNoFriendApprovalsToMemberNoWithResponse request returning *PostV21GameGameNoFriendApprovalsToMemberNoResponse
func (c *ClientWithResponses) PostV21GameGameNoFriendApprovalsToMemberNoWithResponse(ctx context.Context, gameNo PathGameNo, toMemberNo PathToMemberNo, reqEditors ...RequestEditorFn) (*PostV21GameGameNoFriendApprovalsToMemberNoResponse, error) {
	rsp, err := c.PostV21GameGameNoFriendApprovalsToMemberNo(ctx, gameNo, toMemberNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV21GameGameNoFriendApprovalsToMemberNoResponse(rsp)
}

// PostV21GameGameNoFriendRequestsWithBodyWithResponse request with arbitrary body returning *PostV21GameGameNoFriendRequestsResponse
func (c *ClientWithResponses) PostV21GameGameNoFriendRequestsWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV21GameGameNoFriendRequestsResponse, error) {
	rsp, err := c.PostV21GameGameNoFriendRequestsWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV21GameGameNoFriendRequestsResponse(rsp)
}

func (c *ClientWithResponses) PostV21GameGameNoFriendRequestsWithResponse(ctx context.Context, gameNo PathGameNo, body PostV21GameGameNoFriendRequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV21GameGameNoFriendRequestsResponse, error) {
	rsp, err := c.PostV21GameGameNoFriendRequests(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV21GameGameNoFriendRequestsResponse(rsp)
}

// GetV21ServerGameGameCdRelationsMemberNoWithResponse request returning *GetV21ServerGameGameCdRelationsMemberNoResponse
func (c *ClientWithResponses) GetV21ServerGameGameCdRelationsMemberNoWithResponse(ctx context.Context, gameCd string, memberNo int, params *GetV21ServerGameGameCdRelationsMemberNoParams, reqEditors ...RequestEditorFn) (*GetV21ServerGameGameCdRelationsMemberNoResponse, error) {
	rsp, err := c.GetV21ServerGameGameCdRelationsMemberNo(ctx, gameCd, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV21ServerGameGameCdRelationsMemberNoResponse(rsp)
}

// PostV30GameGameNoFriendPageTogetherWithBodyWithResponse request with arbitrary body returning *PostV30GameGameNoFriendPageTogetherResponse
func (c *ClientWithResponses) PostV30GameGameNoFriendPageTogetherWithBodyWithResponse(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV30GameGameNoFriendPageTogetherResponse, error) {
	rsp, err := c.PostV30GameGameNoFriendPageTogetherWithBody(ctx, gameNo, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV30GameGameNoFriendPageTogetherResponse(rsp)
}

func (c *ClientWithResponses) PostV30GameGameNoFriendPageTogetherWithResponse(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendPageTogetherParams, body PostV30GameGameNoFriendPageTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV30GameGameNoFriendPageTogetherResponse, error) {
	rsp, err := c.PostV30GameGameNoFriendPageTogether(ctx, gameNo, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV30GameGameNoFriendPageTogetherResponse(rsp)
}

// PostV30GameGameNoFriendTogetherWithBodyWithResponse request with arbitrary body returning *PostV30GameGameNoFriendTogetherResponse
func (c *ClientWithResponses) PostV30GameGameNoFriendTogetherWithBodyWithResponse(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendTogetherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV30GameGameNoFriendTogetherResponse, error) {
	rsp, err := c.PostV30GameGameNoFriendTogetherWithBody(ctx, gameNo, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV30GameGameNoFriendTogetherResponse(rsp)
}

func (c *ClientWithResponses) PostV30GameGameNoFriendTogetherWithResponse(ctx context.Context, gameNo int, params *PostV30GameGameNoFriendTogetherParams, body PostV30GameGameNoFriendTogetherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV30GameGameNoFriendTogetherResponse, error) {
	rsp, err := c.PostV30GameGameNoFriendTogether(ctx, gameNo, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV30GameGameNoFriendTogetherResponse(rsp)
}

// ParseGetV20ApiInternalXk5FollowerMemberNoListResponse parses an HTTP response from a GetV20ApiInternalXk5FollowerMemberNoListWithResponse call
func ParseGetV20ApiInternalXk5FollowerMemberNoListResponse(rsp *http.Response) (*GetV20ApiInternalXk5FollowerMemberNoListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20ApiInternalXk5FollowerMemberNoListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV20ApiInternalXk5FollowingMemberNoListResponse parses an HTTP response from a GetV20ApiInternalXk5FollowingMemberNoListWithResponse call
func ParseGetV20ApiInternalXk5FollowingMemberNoListResponse(rsp *http.Response) (*GetV20ApiInternalXk5FollowingMemberNoListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20ApiInternalXk5FollowingMemberNoListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameNoFriendPageTogetherResponse parses an HTTP response from a PostV20GameGameNoFriendPageTogetherWithResponse call
func ParsePostV20GameGameNoFriendPageTogetherResponse(rsp *http.Response) (*PostV20GameGameNoFriendPageTogetherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameNoFriendPageTogetherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TogetherFriendPageVoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameNoFriendTogetherResponse parses an HTTP response from a PostV20GameGameNoFriendTogetherWithResponse call
func ParsePostV20GameGameNoFriendTogetherResponse(rsp *http.Response) (*PostV20GameGameNoFriendTogetherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameNoFriendTogetherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TogetherFriendListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdBlockResponse parses an HTTP response from a GetV20GameGameCdBlockWithResponse call
func ParseGetV20GameGameCdBlockResponse(rsp *http.Response) (*GetV20GameGameCdBlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameBlockListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdBlockSearchKeywordResponse parses an HTTP response from a GetV20GameGameCdBlockSearchKeywordWithResponse call
func ParseGetV20GameGameCdBlockSearchKeywordResponse(rsp *http.Response) (*GetV20GameGameCdBlockSearchKeywordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdBlockSearchKeywordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameBlockListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV20GameGameCdBlockMemberNoResponse parses an HTTP response from a DeleteV20GameGameCdBlockMemberNoWithResponse call
func ParseDeleteV20GameGameCdBlockMemberNoResponse(rsp *http.Response) (*DeleteV20GameGameCdBlockMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV20GameGameCdBlockMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameCdBlockMemberNoResponse parses an HTTP response from a PostV20GameGameCdBlockMemberNoWithResponse call
func ParsePostV20GameGameCdBlockMemberNoResponse(rsp *http.Response) (*PostV20GameGameCdBlockMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameCdBlockMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdFriendResponse parses an HTTP response from a GetV20GameGameCdFriendWithResponse call
func ParseGetV20GameGameCdFriendResponse(rsp *http.Response) (*GetV20GameGameCdFriendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdFriendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameFriendListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV20GameGameCdFriendToMemberNoResponse parses an HTTP response from a DeleteV20GameGameCdFriendToMemberNoWithResponse call
func ParseDeleteV20GameGameCdFriendToMemberNoResponse(rsp *http.Response) (*DeleteV20GameGameCdFriendToMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV20GameGameCdFriendToMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV20GameGameCdFriendToMemberNoBestResponse parses an HTTP response from a DeleteV20GameGameCdFriendToMemberNoBestWithResponse call
func ParseDeleteV20GameGameCdFriendToMemberNoBestResponse(rsp *http.Response) (*DeleteV20GameGameCdFriendToMemberNoBestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV20GameGameCdFriendToMemberNoBestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdFriendToMemberNoBestResponse parses an HTTP response from a GetV20GameGameCdFriendToMemberNoBestWithResponse call
func ParseGetV20GameGameCdFriendToMemberNoBestResponse(rsp *http.Response) (*GetV20GameGameCdFriendToMemberNoBestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdFriendToMemberNoBestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BestStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameCdFriendToMemberNoBestResponse parses an HTTP response from a PostV20GameGameCdFriendToMemberNoBestWithResponse call
func ParsePostV20GameGameCdFriendToMemberNoBestResponse(rsp *http.Response) (*PostV20GameGameCdFriendToMemberNoBestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameCdFriendToMemberNoBestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdIncomingResponse parses an HTTP response from a GetV20GameGameCdIncomingWithResponse call
func ParseGetV20GameGameCdIncomingResponse(rsp *http.Response) (*GetV20GameGameCdIncomingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdIncomingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameRequestVOListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameCdIncomingAcceptallResponse parses an HTTP response from a PostV20GameGameCdIncomingAcceptallWithResponse call
func ParsePostV20GameGameCdIncomingAcceptallResponse(rsp *http.Response) (*PostV20GameGameCdIncomingAcceptallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameCdIncomingAcceptallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameCdIncomingAcceptlistResponse parses an HTTP response from a PostV20GameGameCdIncomingAcceptlistWithResponse call
func ParsePostV20GameGameCdIncomingAcceptlistResponse(rsp *http.Response) (*PostV20GameGameCdIncomingAcceptlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameCdIncomingAcceptlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV20GameGameCdIncomingRejectallResponse parses an HTTP response from a DeleteV20GameGameCdIncomingRejectallWithResponse call
func ParseDeleteV20GameGameCdIncomingRejectallResponse(rsp *http.Response) (*DeleteV20GameGameCdIncomingRejectallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV20GameGameCdIncomingRejectallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV20GameGameCdIncomingRejectlistResponse parses an HTTP response from a DeleteV20GameGameCdIncomingRejectlistWithResponse call
func ParseDeleteV20GameGameCdIncomingRejectlistResponse(rsp *http.Response) (*DeleteV20GameGameCdIncomingRejectlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV20GameGameCdIncomingRejectlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdIncomingSearchKeywordResponse parses an HTTP response from a GetV20GameGameCdIncomingSearchKeywordWithResponse call
func ParseGetV20GameGameCdIncomingSearchKeywordResponse(rsp *http.Response) (*GetV20GameGameCdIncomingSearchKeywordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdIncomingSearchKeywordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameRequestVOListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV20GameGameCdIncomingToMemberNoResponse parses an HTTP response from a DeleteV20GameGameCdIncomingToMemberNoWithResponse call
func ParseDeleteV20GameGameCdIncomingToMemberNoResponse(rsp *http.Response) (*DeleteV20GameGameCdIncomingToMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV20GameGameCdIncomingToMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameCdIncomingToMemberNoResponse parses an HTTP response from a PostV20GameGameCdIncomingToMemberNoWithResponse call
func ParsePostV20GameGameCdIncomingToMemberNoResponse(rsp *http.Response) (*PostV20GameGameCdIncomingToMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameCdIncomingToMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdOutgoingResponse parses an HTTP response from a GetV20GameGameCdOutgoingWithResponse call
func ParseGetV20GameGameCdOutgoingResponse(rsp *http.Response) (*GetV20GameGameCdOutgoingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdOutgoingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameRequestVOListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameCdOutgoingCancelallResponse parses an HTTP response from a PostV20GameGameCdOutgoingCancelallWithResponse call
func ParsePostV20GameGameCdOutgoingCancelallResponse(rsp *http.Response) (*PostV20GameGameCdOutgoingCancelallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameCdOutgoingCancelallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameCdOutgoingCancellistResponse parses an HTTP response from a PostV20GameGameCdOutgoingCancellistWithResponse call
func ParsePostV20GameGameCdOutgoingCancellistResponse(rsp *http.Response) (*PostV20GameGameCdOutgoingCancellistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameCdOutgoingCancellistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdOutgoingSearchKeywordResponse parses an HTTP response from a GetV20GameGameCdOutgoingSearchKeywordWithResponse call
func ParseGetV20GameGameCdOutgoingSearchKeywordResponse(rsp *http.Response) (*GetV20GameGameCdOutgoingSearchKeywordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdOutgoingSearchKeywordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameRequestVOListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV20GameGameCdOutgoingToMemberNoResponse parses an HTTP response from a DeleteV20GameGameCdOutgoingToMemberNoWithResponse call
func ParseDeleteV20GameGameCdOutgoingToMemberNoResponse(rsp *http.Response) (*DeleteV20GameGameCdOutgoingToMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV20GameGameCdOutgoingToMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV20GameGameCdOutgoingToMemberNoResponse parses an HTTP response from a PostV20GameGameCdOutgoingToMemberNoWithResponse call
func ParsePostV20GameGameCdOutgoingToMemberNoResponse(rsp *http.Response) (*PostV20GameGameCdOutgoingToMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20GameGameCdOutgoingToMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult4Str
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdPlayerListResponse parses an HTTP response from a GetV20GameGameCdPlayerListWithResponse call
func ParseGetV20GameGameCdPlayerListResponse(rsp *http.Response) (*GetV20GameGameCdPlayerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdPlayerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GamePlayerVOListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdRelationsResponse parses an HTTP response from a GetV20GameGameCdRelationsWithResponse call
func ParseGetV20GameGameCdRelationsResponse(rsp *http.Response) (*GetV20GameGameCdRelationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GamePlayerRelationListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20GameGameCdSearchKeywordResponse parses an HTTP response from a GetV20GameGameCdSearchKeywordWithResponse call
func ParseGetV20GameGameCdSearchKeywordResponse(rsp *http.Response) (*GetV20GameGameCdSearchKeywordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20GameGameCdSearchKeywordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameFriendListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20ServerV20GameGameCdFriendMemberNoResponse parses an HTTP response from a GetV20ServerV20GameGameCdFriendMemberNoWithResponse call
func ParseGetV20ServerV20GameGameCdFriendMemberNoResponse(rsp *http.Response) (*GetV20ServerV20GameGameCdFriendMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20ServerV20GameGameCdFriendMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameFriendListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20ServerV20GameGameCdPlayerListResponse parses an HTTP response from a GetV20ServerV20GameGameCdPlayerListWithResponse call
func ParseGetV20ServerV20GameGameCdPlayerListResponse(rsp *http.Response) (*GetV20ServerV20GameGameCdPlayerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20ServerV20GameGameCdPlayerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GamePlayerVOListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20ServerV20GameGameCdRelationsMemberNoResponse parses an HTTP response from a GetV20ServerV20GameGameCdRelationsMemberNoWithResponse call
func ParseGetV20ServerV20GameGameCdRelationsMemberNoResponse(rsp *http.Response) (*GetV20ServerV20GameGameCdRelationsMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20ServerV20GameGameCdRelationsMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GamePlayerRelationListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV20Xk5FollowerMemberNoListResponse parses an HTTP response from a GetV20Xk5FollowerMemberNoListWithResponse call
func ParseGetV20Xk5FollowerMemberNoListResponse(rsp *http.Response) (*GetV20Xk5FollowerMemberNoListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20Xk5FollowerMemberNoListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV20Xk5FollowingMemberNoResponse parses an HTTP response from a DeleteV20Xk5FollowingMemberNoWithResponse call
func ParseDeleteV20Xk5FollowingMemberNoResponse(rsp *http.Response) (*DeleteV20Xk5FollowingMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV20Xk5FollowingMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV20Xk5FollowingMemberNoResponse parses an HTTP response from a PostV20Xk5FollowingMemberNoWithResponse call
func ParsePostV20Xk5FollowingMemberNoResponse(rsp *http.Response) (*PostV20Xk5FollowingMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV20Xk5FollowingMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV20Xk5FollowingMemberNoListResponse parses an HTTP response from a GetV20Xk5FollowingMemberNoListWithResponse call
func ParseGetV20Xk5FollowingMemberNoListResponse(rsp *http.Response) (*GetV20Xk5FollowingMemberNoListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20Xk5FollowingMemberNoListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV20Xk5FollowingFollowerMemberNoCountResponse parses an HTTP response from a GetV20Xk5FollowingFollowerMemberNoCountWithResponse call
func ParseGetV20Xk5FollowingFollowerMemberNoCountResponse(rsp *http.Response) (*GetV20Xk5FollowingFollowerMemberNoCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20Xk5FollowingFollowerMemberNoCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowFollowerCountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV20Xk5RelationMemberNoResponse parses an HTTP response from a GetV20Xk5RelationMemberNoWithResponse call
func ParseGetV20Xk5RelationMemberNoResponse(rsp *http.Response) (*GetV20Xk5RelationMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20Xk5RelationMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV20Xk5RelationMemberNoListResponse parses an HTTP response from a GetV20Xk5RelationMemberNoListWithResponse call
func ParseGetV20Xk5RelationMemberNoListResponse(rsp *http.Response) (*GetV20Xk5RelationMemberNoListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV20Xk5RelationMemberNoListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FollowCountAndRelationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV21GameGameNoFriendApprovalsResponse parses an HTTP response from a PostV21GameGameNoFriendApprovalsWithResponse call
func ParsePostV21GameGameNoFriendApprovalsResponse(rsp *http.Response) (*PostV21GameGameNoFriendApprovalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV21GameGameNoFriendApprovalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AuthFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServiceError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV21GameGameNoFriendApprovalsToMemberNoResponse parses an HTTP response from a PostV21GameGameNoFriendApprovalsToMemberNoWithResponse call
func ParsePostV21GameGameNoFriendApprovalsToMemberNoResponse(rsp *http.Response) (*PostV21GameGameNoFriendApprovalsToMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV21GameGameNoFriendApprovalsToMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AuthFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServiceError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV21GameGameNoFriendRequestsResponse parses an HTTP response from a PostV21GameGameNoFriendRequestsWithResponse call
func ParsePostV21GameGameNoFriendRequestsResponse(rsp *http.Response) (*PostV21GameGameNoFriendRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV21GameGameNoFriendRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidArgument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest AuthFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServiceError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV21ServerGameGameCdRelationsMemberNoResponse parses an HTTP response from a GetV21ServerGameGameCdRelationsMemberNoWithResponse call
func ParseGetV21ServerGameGameCdRelationsMemberNoResponse(rsp *http.Response) (*GetV21ServerGameGameCdRelationsMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV21ServerGameGameCdRelationsMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GamePlayerRelationListResponseV21
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseResult4Int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV30GameGameNoFriendPageTogetherResponse parses an HTTP response from a PostV30GameGameNoFriendPageTogetherWithResponse call
func ParsePostV30GameGameNoFriendPageTogetherResponse(rsp *http.Response) (*PostV30GameGameNoFriendPageTogetherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV30GameGameNoFriendPageTogetherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TogetherFriendPageVoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV30GameGameNoFriendTogetherResponse parses an HTTP response from a PostV30GameGameNoFriendTogetherWithResponse call
func ParsePostV30GameGameNoFriendTogetherResponse(rsp *http.Response) (*PostV30GameGameNoFriendTogetherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV30GameGameNoFriendTogetherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TogetherFriendListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
