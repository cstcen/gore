// Package clitlogsender provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package clitlogsender

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	InternalScopes = "Internal.Scopes"
)

// Defines values for AreaId.
const (
	AreaIdN1 AreaId = 1
	AreaIdN2 AreaId = 2
)

// Defines values for PlatId.
const (
	PlatIdN0 PlatId = 0
	PlatIdN1 PlatId = 1
)

// Defines values for ReportRequestDataReportScene.
const (
	ReportRequestDataReportSceneN1 ReportRequestDataReportScene = 1
	ReportRequestDataReportSceneN2 ReportRequestDataReportScene = 2
	ReportRequestDataReportSceneN3 ReportRequestDataReportScene = 3
	ReportRequestDataReportSceneN4 ReportRequestDataReportScene = 4
	ReportRequestDataReportSceneN8 ReportRequestDataReportScene = 8
)

// Defines values for UserType.
const (
	UserTypeN0 UserType = 0
	UserTypeN2 UserType = 2
	UserTypeN4 UserType = 4
	UserTypeN8 UserType = 8
)

// AreaId 举报者area:
//   - `1` - Wechat
//   - `2` - QQ
type AreaId int

// ContentId defines model for ContentId.
type ContentId struct {
	// IdList 上报的id列表
	IdList []string `json:"idList"`

	// IdType id类型，用一个字符串标识，如：roomid，personid，feedid
	IdType string `json:"idType"`
}

// DataResult defines model for DataResult.
type DataResult struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// PlatId 平台ID：
//   - `0` - iOS
//   - `1` - AOS
type PlatId int

// ReportRequest defines model for ReportRequest.
type ReportRequest struct {
	BusinessData ReportRequestData `json:"businessData"`

	// InformantArea 举报者area:
	//  * `1` - Wechat
	//  * `2` - QQ
	InformantArea *AreaId `json:"informantArea,omitempty"`

	// InformantName 举报者昵称
	InformantName string `json:"informantName"`

	// InformantPlatId 平台ID：
	//  * `0` - iOS
	//  * `1` - AOS
	InformantPlatId PlatId `json:"informantPlatId"`

	// InformantRoleId 举报者角色ID
	InformantRoleId string `json:"informantRoleId"`

	// InformantUserId 举报者账号ID，根据体系上报openId或者Gopenid
	InformantUserId string `json:"informantUserId"`

	// InformantUserType 举报者的账号类型:
	//  * `0` - 默认值无特殊
	//  * `2` - WechatOpenId
	//  * `4` - QQOpenid
	//  * `8` - Gopenid
	InformantUserType UserType `json:"informantUserType"`

	// InformantWorldId 举报者的大区号，没有则不填
	InformantWorldId *int `json:"informantWorldId,omitempty"`

	// ReportTime 举报发生时间戳（秒）
	ReportTime *int `json:"reportTime,omitempty"`

	// ReportedArea 举报者area:
	//  * `1` - Wechat
	//  * `2` - QQ
	ReportedArea *AreaId `json:"reportedArea,omitempty"`

	// ReportedName 被举报者昵称
	ReportedName string `json:"reportedName"`

	// ReportedPlatId 平台ID：
	//  * `0` - iOS
	//  * `1` - AOS
	ReportedPlatId PlatId `json:"reportedPlatId"`

	// ReportedRoleId 被举报者角色ID
	ReportedRoleId string `json:"reportedRoleId"`

	// ReportedUserId 被举报者账号ID，根据体系上报openId或者Gopenid
	ReportedUserId string `json:"reportedUserId"`

	// ReportedUserType 举报者的账号类型:
	//  * `0` - 默认值无特殊
	//  * `2` - WechatOpenId
	//  * `4` - QQOpenid
	//  * `8` - Gopenid
	ReportedUserType UserType `json:"reportedUserType"`

	// ReportedWorldId 被举报者大区号，没有则不填
	ReportedWorldId *int `json:"reportedWorldId,omitempty"`
}

// ReportRequestData defines model for ReportRequestData.
type ReportRequestData struct {
	// Callback 其他数据信息，没有则不填或者填空
	Callback  *string      `json:"callback,omitempty"`
	ContentId *[]ContentId `json:"contentId,omitempty"`

	// PicUrlArray 举报的图片url列表，单条最大长度=4096字节，列表最大长度=12
	PicUrlArray *[]string `json:"picUrlArray,omitempty"`

	// ReportBattleId 对局ID，若需要使用到这个参数，必须同时带上对局时间
	ReportBattleId *string `json:"reportBattleId,omitempty"`

	// ReportBattleTime 对局时间点，待对局时间点时必须带上对局ID
	ReportBattleTime *int `json:"reportBattleTime,omitempty"`

	// ReportCategory 举报大类，具体枚举等腾讯提供
	ReportCategory int `json:"reportCategory"`

	// ReportContent 举报的文本内容，最大长度=1024字节
	ReportContent *string `json:"reportContent,omitempty"`

	// ReportDesc 举报详细描述：用户在前端举报时，对举报者进行描述自定义填写的文本，最大长度=1024字节
	ReportDesc *string `json:"reportDesc,omitempty"`

	// ReportEntrance 举报入口表示，通常用来区分举报入口所在界面
	ReportEntrance *int `json:"reportEntrance,omitempty"`

	// ReportGroupId 被举报的工会ID
	ReportGroupId *string `json:"reportGroupId,omitempty"`

	// ReportGroupName 被举报的工会名称
	ReportGroupName *string `json:"reportGroupName,omitempty"`

	// ReportReason 举报原因类型，具体枚举等腾讯提供
	ReportReason []int `json:"reportReason"`

	// ReportScene 举报场景类型:
	//  * `1` - 会话发言场景举报
	//  * `2` - 个人基本资料举报
	//  * `3` - 对局场景举报
	//  * `4` - 文章/帖子场景举报
	//  * `8` - 自定义
	ReportScene ReportRequestDataReportScene `json:"reportScene"`

	// ReportedProfileUrl 被举报者的头像url
	ReportedProfileUrl string `json:"reportedProfileUrl"`

	// VideoUrlArray 举报的视频url列表，单条最大长度=4096字节，列表最大长度=12
	VideoUrlArray *[]string `json:"videoUrlArray,omitempty"`
}

// ReportRequestDataReportScene 举报场景类型:
//   - `1` - 会话发言场景举报
//   - `2` - 个人基本资料举报
//   - `3` - 对局场景举报
//   - `4` - 文章/帖子场景举报
//   - `8` - 自定义
type ReportRequestDataReportScene int

// ReportResponse defines model for ReportResponse.
type ReportResponse = DataResult

// UserType 举报者的账号类型:
//   - `0` - 默认值无特殊
//   - `2` - WechatOpenId
//   - `4` - QQOpenid
//   - `8` - Gopenid
type UserType int

// PostTlogsenderV10GameGameNoReportJSONRequestBody defines body for PostTlogsenderV10GameGameNoReport for application/json ContentType.
type PostTlogsenderV10GameGameNoReportJSONRequestBody = ReportRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostTlogsenderV10GameGameNoReportWithBody request with any body
	PostTlogsenderV10GameGameNoReportWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTlogsenderV10GameGameNoReport(ctx context.Context, gameNo string, body PostTlogsenderV10GameGameNoReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostTlogsenderV10GameGameNoReportWithBody(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTlogsenderV10GameGameNoReportRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTlogsenderV10GameGameNoReport(ctx context.Context, gameNo string, body PostTlogsenderV10GameGameNoReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTlogsenderV10GameGameNoReportRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostTlogsenderV10GameGameNoReportRequest calls the generic PostTlogsenderV10GameGameNoReport builder with application/json body
func NewPostTlogsenderV10GameGameNoReportRequest(server string, gameNo string, body PostTlogsenderV10GameGameNoReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTlogsenderV10GameGameNoReportRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostTlogsenderV10GameGameNoReportRequestWithBody generates requests for PostTlogsenderV10GameGameNoReport with any type of body
func NewPostTlogsenderV10GameGameNoReportRequestWithBody(server string, gameNo string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tlogsender/v1.0/game/%s/report", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostTlogsenderV10GameGameNoReportWithBodyWithResponse request with any body
	PostTlogsenderV10GameGameNoReportWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTlogsenderV10GameGameNoReportResponse, error)

	PostTlogsenderV10GameGameNoReportWithResponse(ctx context.Context, gameNo string, body PostTlogsenderV10GameGameNoReportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTlogsenderV10GameGameNoReportResponse, error)
}

type PostTlogsenderV10GameGameNoReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportResponse
}

// Status returns HTTPResponse.Status
func (r PostTlogsenderV10GameGameNoReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTlogsenderV10GameGameNoReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostTlogsenderV10GameGameNoReportWithBodyWithResponse request with arbitrary body returning *PostTlogsenderV10GameGameNoReportResponse
func (c *ClientWithResponses) PostTlogsenderV10GameGameNoReportWithBodyWithResponse(ctx context.Context, gameNo string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTlogsenderV10GameGameNoReportResponse, error) {
	rsp, err := c.PostTlogsenderV10GameGameNoReportWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTlogsenderV10GameGameNoReportResponse(rsp)
}

func (c *ClientWithResponses) PostTlogsenderV10GameGameNoReportWithResponse(ctx context.Context, gameNo string, body PostTlogsenderV10GameGameNoReportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTlogsenderV10GameGameNoReportResponse, error) {
	rsp, err := c.PostTlogsenderV10GameGameNoReport(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTlogsenderV10GameGameNoReportResponse(rsp)
}

// ParsePostTlogsenderV10GameGameNoReportResponse parses an HTTP response from a PostTlogsenderV10GameGameNoReportWithResponse call
func ParsePostTlogsenderV10GameGameNoReportResponse(rsp *http.Response) (*PostTlogsenderV10GameGameNoReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTlogsenderV10GameGameNoReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
