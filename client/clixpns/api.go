// Package clixpns provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package clixpns

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	InternalScopes = "Internal.Scopes"
)

// MobileMessageRequest defines model for MobileMessageRequest.
type MobileMessageRequest struct {
	// ClientId 客户端认证Id
	ClientId string `json:"client_id"`

	// ClientSecret 客户端认证秘钥
	ClientSecret string `json:"client_secret"`

	// Content 可选内容
	Content *string `json:"content,omitempty"`

	// NationCode 国家代码
	NationCode string `json:"nation_code"`

	// PhoneNumbers 手机号码
	PhoneNumbers []string `json:"phone_numbers"`

	// Scene 场景参数，可选值有：
	// 1、editor_login_register（编辑器登录或注册）
	// 2、develop_community_login_register（开发者社区登录或注册）
	// 3、develop_community_bind（开发者社区手机绑定）
	// 4、sgxq_app_login_register（手工星球App登录或注册）
	// 5、sgxq_app_bind（手工星球App手机绑定）
	Scene string `json:"scene"`

	// TemplateType 短信模板映射
	TemplateType string `json:"template_type"`
}

// OsType 用户设备操作系统类型
type OsType = string

// ResponseResult defines model for ResponseResult.
type ResponseResult struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// ResponseWithRequestId defines model for ResponseWithRequestId.
type ResponseWithRequestId struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`
	Data *struct {
		// RequestId 业务处理结果的唯一标识
		RequestId *string `json:"requestId,omitempty"`
	} `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// ResponseWithVerificationCodeVOList defines model for ResponseWithVerificationCodeVOList.
type ResponseWithVerificationCodeVOList struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`
	Data *struct {
		// List 验证码集合
		List *[]VerificationCodeVO `json:"list,omitempty"`

		// Total 总数
		Total *int `json:"total,omitempty"`
	} `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// ServiceType 服务类型：game | platform
type ServiceType = string

// SesMessageRequest defines model for SesMessageRequest.
type SesMessageRequest struct {
	// ClientId 客户端认证Id
	ClientId string `json:"client_id"`

	// ClientSecret 客户端认证秘钥
	ClientSecret string `json:"client_secret"`

	// Email 邮箱地址
	Email string `json:"email"`

	// Scene 场景参数，可选值有：
	// 1、editor_login_register（编辑器登录或注册）
	// 2、develop_community_login_register（开发者社区登录或注册）
	// 3、develop_community_bind（开发者社区手机绑定）
	// 4、sgxq_app_login_register（手工星球App登录或注册）
	// 5、sgxq_app_bind（手工星球App手机绑定）
	Scene string `json:"scene"`
}

// SesVerifyRequest defines model for SesVerifyRequest.
type SesVerifyRequest struct {
	// Email 邮箱地址
	Email string `json:"email"`

	// Scene 场景参数，可选值有：
	// 1、editor_login_register（编辑器登录或注册）
	// 2、develop_community_login_register（开发者社区登录或注册）
	// 3、develop_community_bind（开发者社区手机绑定）
	// 4、sgxq_app_login_register（手工星球App登录或注册）
	// 5、sgxq_app_bind（手工星球App手机绑定）
	Scene string `json:"scene"`

	// VerificationCode 验证码
	VerificationCode string `json:"verificationCode"`
}

// TagTokenDTO defines model for TagTokenDTO.
type TagTokenDTO struct {
	// Tag 标签
	Tag *string `json:"tag,omitempty"`

	// Token tpns token
	Token *string `json:"token,omitempty"`
}

// TagsBindRequest defines model for TagsBindRequest.
type TagsBindRequest struct {
	// MemberIdList member_id 列表：
	// operator_type = 1,2,3 时必填
	// 列表最大不能超过500个值
	MemberIdList *[]string `json:"member_id_list,omitempty"`

	// OperatorType 标签操作类型：
	//
	// 1 - 增加单个 tag，对单个 member_id / token 而言
	//
	// 2 - 增加多个 tag，对单个 member_id / token 而言
	//
	// 3 - 添加单个 tag，对多个 member_id / token 而言
	//
	// 4 - 批量添加标签（每次调用最多允许设置20对，每个对里面标签在前，token 在后）
	OperatorType int `json:"operator_type"`

	// TagList 标签列表：
	// operator_type = 1,2,3 时必填
	// 列表最大不能超过500个值
	// tag 字符串长度不能超过50
	TagList *[]string `json:"tag_list,omitempty"`

	// TagTokenList 标签、设备对应列表：
	// operator_type = 4 时必填
	// 每个对里面标签在前，token 在后
	// 列表最大不能超过20个值
	// tag 字符串长度不能超过50
	// token 字符串长度不能超过36
	TagTokenList *[]TagTokenDTO `json:"tag_token_list,omitempty"`

	// TokenList token 列表：
	// operator_type = 1,2,3 时必填
	// 列表最大不能超过500个值
	// token 字符串长度不能超过36
	// token_list 和 member_id_list 互斥，优先取 token_list
	TokenList *[]string `json:"token_list,omitempty"`
}

// TpnsDeviceToken TPNS 颁发的设备 token
type TpnsDeviceToken = string

// TpnsDeviceTokenBindRequest defines model for TpnsDeviceTokenBindRequest.
type TpnsDeviceTokenBindRequest struct {
	// PushId TPNS 颁发的设备 token
	PushId *TpnsDeviceToken `json:"push_id,omitempty"`

	// ServiceType 服务类型：game | platform
	ServiceType *ServiceType `json:"service_type,omitempty"`
}

// TpnsRequest defines model for TpnsRequest.
type TpnsRequest struct {
	// AccountList 推送目标，audience_type 为 account 时使用
	AccountList *[]string `json:"account_list,omitempty"`

	// AccountType 账号类型，需要与推送的账号所属类型一致，audience_type 为 account 时使用
	AccountType *int `json:"account_type,omitempty"`

	// AudienceType 推送目标：
	// all：全量推送
	// tag：标签推送
	// token：单设备推送
	// token_list：设备列表推送
	// account：单账号推送
	// account_list：账号列表推送
	// package_account_push：号码包推送
	// package_token_push：token 文件包推送
	AudienceType string `json:"audience_type"`

	// Content 推送的内容
	Content string `json:"content"`

	// CustomContent 需要序列化为 json string
	CustomContent *string `json:"custom_content,omitempty"`

	// MessageType 消息类型：
	// notify：通知
	// message：透传消息/静默消息
	MessageType string `json:"message_type"`

	// TagType 标签类型，audience_type 为 tag 时使用
	TagType *string `json:"tag_type,omitempty"`

	// Tags 具体标签值，类型：string，如 tag1，guangdong 等。audience_type 为 tag 时使用
	Tags *[]string `json:"tags,omitempty"`

	// TagsOperator tags 内标签对应的运算符。
	// - OR：或运算
	// - AND：且运算。
	// audience_type 为 tag 时使用
	TagsOperator *string `json:"tags_operator,omitempty"`

	// Title 推送的标题
	Title string `json:"title"`

	// TokenList 推送目标，audience_type 为 token_list 时使用
	TokenList *[]string `json:"token_list,omitempty"`

	// UploadId 号码包或 token 包的上传 ID（仅号码包推送\ token 文件包推送时使用）
	UploadId *int `json:"upload_id,omitempty"`
}

// VerificationCodeVO defines model for VerificationCodeVO.
type VerificationCodeVO struct {
	// CellphoneNumber 手机号码
	CellphoneNumber *int `json:"cellphone_number,omitempty"`

	// Scene 场景
	Scene *string `json:"scene,omitempty"`

	// VerificationCode 验证码
	VerificationCode *int `json:"verification_code,omitempty"`
}

// VerifyCodeRequest defines model for VerifyCodeRequest.
type VerifyCodeRequest struct {
	// ClientId 客户端认证Id
	ClientId string `json:"clientId"`

	// ClientSecret 客户端认证秘钥
	ClientSecret string `json:"clientSecret"`

	// Scene 场景参数，可选值有：
	// 1、editor_login_register（编辑器登录或注册）
	// 2、develop_community_login_register（开发者社区登录或注册）
	// 3、develop_community_bind（开发者社区手机绑定）
	// 4、sgxq_app_login_register（手工星球App登录或注册）
	// 5、sgxq_app_bind（手工星球App手机绑定）
	Scene string `json:"scene"`

	// VerificationCode 验证码
	VerificationCode string `json:"verificationCode"`
}

// HeaderOsType 用户设备操作系统类型
type HeaderOsType = OsType

// PostXpnsV10SesVerifyParams defines parameters for PostXpnsV10SesVerify.
type PostXpnsV10SesVerifyParams struct {
	// ClientId 客户端认证Id
	ClientId string `json:"clientId"`

	// ClientSecret 客户端认证秘钥
	ClientSecret string `json:"clientSecret"`
}

// GetXpnsV10SmsTestVerificationCodeParams defines parameters for GetXpnsV10SmsTestVerificationCode.
type GetXpnsV10SmsTestVerificationCodeParams struct {
	// PhoneNumber 手机号码参数，你可以传递一个或多个
	PhoneNumber []string `form:"phoneNumber" json:"phoneNumber"`

	// Scene 场景参数，可选值有：
	// 1、editor_login_register（编辑器登录或注册）
	// 2、develop_community_login_register（开发者社区登录或注册）
	// 3、develop_community_bind（开发者社区手机绑定）
	// 4、sgxq_app_login_register（手工星球App登录或注册）
	// 5、sgxq_app_bind（手工星球App手机绑定）
	Scene string `form:"scene" json:"scene"`
}

// PostXpnsV10TpnsTokenBindParams defines parameters for PostXpnsV10TpnsTokenBind.
type PostXpnsV10TpnsTokenBindParams struct {
	// OsType 用户设备操作系统类型
	OsType *HeaderOsType `json:"Os-Type,omitempty"`
}

// PostXpnsV10TpnsServiceTypeSendParams defines parameters for PostXpnsV10TpnsServiceTypeSend.
type PostXpnsV10TpnsServiceTypeSendParams struct {
	// OSType 推送的设备类型，可选值有 Android | iOS
	OSType string `json:"OS-Type"`
}

// PostXpnsV10TpnsServiceTypeTagBindParams defines parameters for PostXpnsV10TpnsServiceTypeTagBind.
type PostXpnsV10TpnsServiceTypeTagBindParams struct {
	// OSType 推送的设备类型 Android | iOS
	OSType string `json:"OS-Type"`
}

// PostXpnsV10SesVerifyJSONRequestBody defines body for PostXpnsV10SesVerify for application/json ContentType.
type PostXpnsV10SesVerifyJSONRequestBody = SesVerifyRequest

// PostXpnsV10SmsSendJSONRequestBody defines body for PostXpnsV10SmsSend for application/json ContentType.
type PostXpnsV10SmsSendJSONRequestBody = MobileMessageRequest

// PostXpnsV10SmsVerifyTelephoneNumberJSONRequestBody defines body for PostXpnsV10SmsVerifyTelephoneNumber for application/json ContentType.
type PostXpnsV10SmsVerifyTelephoneNumberJSONRequestBody = VerifyCodeRequest

// PostXpnsV10TpnsTokenBindJSONRequestBody defines body for PostXpnsV10TpnsTokenBind for application/json ContentType.
type PostXpnsV10TpnsTokenBindJSONRequestBody = TpnsDeviceTokenBindRequest

// PostXpnsV10TpnsServiceTypeSendJSONRequestBody defines body for PostXpnsV10TpnsServiceTypeSend for application/json ContentType.
type PostXpnsV10TpnsServiceTypeSendJSONRequestBody = TpnsRequest

// PostXpnsV10TpnsServiceTypeTagBindJSONRequestBody defines body for PostXpnsV10TpnsServiceTypeTagBind for application/json ContentType.
type PostXpnsV10TpnsServiceTypeTagBindJSONRequestBody = TagsBindRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostXpnsV10SesSendWithBody request with any body
	PostXpnsV10SesSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostXpnsV10SesVerifyWithBody request with any body
	PostXpnsV10SesVerifyWithBody(ctx context.Context, params *PostXpnsV10SesVerifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostXpnsV10SesVerify(ctx context.Context, params *PostXpnsV10SesVerifyParams, body PostXpnsV10SesVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostXpnsV10SmsSendWithBody request with any body
	PostXpnsV10SmsSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostXpnsV10SmsSend(ctx context.Context, body PostXpnsV10SmsSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetXpnsV10SmsTestVerificationCode request
	GetXpnsV10SmsTestVerificationCode(ctx context.Context, params *GetXpnsV10SmsTestVerificationCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostXpnsV10SmsVerifyTelephoneNumberWithBody request with any body
	PostXpnsV10SmsVerifyTelephoneNumberWithBody(ctx context.Context, telephoneNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostXpnsV10SmsVerifyTelephoneNumber(ctx context.Context, telephoneNumber string, body PostXpnsV10SmsVerifyTelephoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostXpnsV10TpnsTokenBindWithBody request with any body
	PostXpnsV10TpnsTokenBindWithBody(ctx context.Context, params *PostXpnsV10TpnsTokenBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostXpnsV10TpnsTokenBind(ctx context.Context, params *PostXpnsV10TpnsTokenBindParams, body PostXpnsV10TpnsTokenBindJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostXpnsV10TpnsServiceTypeSendWithBody request with any body
	PostXpnsV10TpnsServiceTypeSendWithBody(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostXpnsV10TpnsServiceTypeSend(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, body PostXpnsV10TpnsServiceTypeSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostXpnsV10TpnsServiceTypeTagBindWithBody request with any body
	PostXpnsV10TpnsServiceTypeTagBindWithBody(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostXpnsV10TpnsServiceTypeTagBind(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, body PostXpnsV10TpnsServiceTypeTagBindJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostXpnsV10SesSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10SesSendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10SesVerifyWithBody(ctx context.Context, params *PostXpnsV10SesVerifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10SesVerifyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10SesVerify(ctx context.Context, params *PostXpnsV10SesVerifyParams, body PostXpnsV10SesVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10SesVerifyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10SmsSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10SmsSendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10SmsSend(ctx context.Context, body PostXpnsV10SmsSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10SmsSendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetXpnsV10SmsTestVerificationCode(ctx context.Context, params *GetXpnsV10SmsTestVerificationCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetXpnsV10SmsTestVerificationCodeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10SmsVerifyTelephoneNumberWithBody(ctx context.Context, telephoneNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10SmsVerifyTelephoneNumberRequestWithBody(c.Server, telephoneNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10SmsVerifyTelephoneNumber(ctx context.Context, telephoneNumber string, body PostXpnsV10SmsVerifyTelephoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10SmsVerifyTelephoneNumberRequest(c.Server, telephoneNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10TpnsTokenBindWithBody(ctx context.Context, params *PostXpnsV10TpnsTokenBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10TpnsTokenBindRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10TpnsTokenBind(ctx context.Context, params *PostXpnsV10TpnsTokenBindParams, body PostXpnsV10TpnsTokenBindJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10TpnsTokenBindRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10TpnsServiceTypeSendWithBody(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10TpnsServiceTypeSendRequestWithBody(c.Server, serviceType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10TpnsServiceTypeSend(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, body PostXpnsV10TpnsServiceTypeSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10TpnsServiceTypeSendRequest(c.Server, serviceType, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10TpnsServiceTypeTagBindWithBody(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10TpnsServiceTypeTagBindRequestWithBody(c.Server, serviceType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostXpnsV10TpnsServiceTypeTagBind(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, body PostXpnsV10TpnsServiceTypeTagBindJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostXpnsV10TpnsServiceTypeTagBindRequest(c.Server, serviceType, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostXpnsV10SesSendRequestWithBody generates requests for PostXpnsV10SesSend with any type of body
func NewPostXpnsV10SesSendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpns/v1.0/ses/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostXpnsV10SesVerifyRequest calls the generic PostXpnsV10SesVerify builder with application/json body
func NewPostXpnsV10SesVerifyRequest(server string, params *PostXpnsV10SesVerifyParams, body PostXpnsV10SesVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostXpnsV10SesVerifyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostXpnsV10SesVerifyRequestWithBody generates requests for PostXpnsV10SesVerify with any type of body
func NewPostXpnsV10SesVerifyRequestWithBody(server string, params *PostXpnsV10SesVerifyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpns/v1.0/ses/verify/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationHeader, params.ClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("clientId", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "clientSecret", runtime.ParamLocationHeader, params.ClientSecret)
		if err != nil {
			return nil, err
		}

		req.Header.Set("clientSecret", headerParam1)

	}

	return req, nil
}

// NewPostXpnsV10SmsSendRequest calls the generic PostXpnsV10SmsSend builder with application/json body
func NewPostXpnsV10SmsSendRequest(server string, body PostXpnsV10SmsSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostXpnsV10SmsSendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostXpnsV10SmsSendRequestWithBody generates requests for PostXpnsV10SmsSend with any type of body
func NewPostXpnsV10SmsSendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpns/v1.0/sms/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetXpnsV10SmsTestVerificationCodeRequest generates requests for GetXpnsV10SmsTestVerificationCode
func NewGetXpnsV10SmsTestVerificationCodeRequest(server string, params *GetXpnsV10SmsTestVerificationCodeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpns/v1.0/sms/test/verification_code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "phoneNumber", runtime.ParamLocationQuery, params.PhoneNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scene", runtime.ParamLocationQuery, params.Scene); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostXpnsV10SmsVerifyTelephoneNumberRequest calls the generic PostXpnsV10SmsVerifyTelephoneNumber builder with application/json body
func NewPostXpnsV10SmsVerifyTelephoneNumberRequest(server string, telephoneNumber string, body PostXpnsV10SmsVerifyTelephoneNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostXpnsV10SmsVerifyTelephoneNumberRequestWithBody(server, telephoneNumber, "application/json", bodyReader)
}

// NewPostXpnsV10SmsVerifyTelephoneNumberRequestWithBody generates requests for PostXpnsV10SmsVerifyTelephoneNumber with any type of body
func NewPostXpnsV10SmsVerifyTelephoneNumberRequestWithBody(server string, telephoneNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telephoneNumber", runtime.ParamLocationPath, telephoneNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpns/v1.0/sms/verify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostXpnsV10TpnsTokenBindRequest calls the generic PostXpnsV10TpnsTokenBind builder with application/json body
func NewPostXpnsV10TpnsTokenBindRequest(server string, params *PostXpnsV10TpnsTokenBindParams, body PostXpnsV10TpnsTokenBindJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostXpnsV10TpnsTokenBindRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostXpnsV10TpnsTokenBindRequestWithBody generates requests for PostXpnsV10TpnsTokenBind with any type of body
func NewPostXpnsV10TpnsTokenBindRequestWithBody(server string, params *PostXpnsV10TpnsTokenBindParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpns/v1.0/tpns/token/bind")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.OsType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Os-Type", runtime.ParamLocationHeader, *params.OsType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Os-Type", headerParam0)
		}

	}

	return req, nil
}

// NewPostXpnsV10TpnsServiceTypeSendRequest calls the generic PostXpnsV10TpnsServiceTypeSend builder with application/json body
func NewPostXpnsV10TpnsServiceTypeSendRequest(server string, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, body PostXpnsV10TpnsServiceTypeSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostXpnsV10TpnsServiceTypeSendRequestWithBody(server, serviceType, params, "application/json", bodyReader)
}

// NewPostXpnsV10TpnsServiceTypeSendRequestWithBody generates requests for PostXpnsV10TpnsServiceTypeSend with any type of body
func NewPostXpnsV10TpnsServiceTypeSendRequestWithBody(server string, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_type", runtime.ParamLocationPath, serviceType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpns/v1.0/tpns/%s/send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "OS-Type", runtime.ParamLocationHeader, params.OSType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("OS-Type", headerParam0)

	}

	return req, nil
}

// NewPostXpnsV10TpnsServiceTypeTagBindRequest calls the generic PostXpnsV10TpnsServiceTypeTagBind builder with application/json body
func NewPostXpnsV10TpnsServiceTypeTagBindRequest(server string, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, body PostXpnsV10TpnsServiceTypeTagBindJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostXpnsV10TpnsServiceTypeTagBindRequestWithBody(server, serviceType, params, "application/json", bodyReader)
}

// NewPostXpnsV10TpnsServiceTypeTagBindRequestWithBody generates requests for PostXpnsV10TpnsServiceTypeTagBind with any type of body
func NewPostXpnsV10TpnsServiceTypeTagBindRequestWithBody(server string, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_type", runtime.ParamLocationPath, serviceType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpns/v1.0/tpns/%s/tag/bind", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "OS-Type", runtime.ParamLocationHeader, params.OSType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("OS-Type", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostXpnsV10SesSendWithBodyWithResponse request with any body
	PostXpnsV10SesSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10SesSendResponse, error)

	// PostXpnsV10SesVerifyWithBodyWithResponse request with any body
	PostXpnsV10SesVerifyWithBodyWithResponse(ctx context.Context, params *PostXpnsV10SesVerifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10SesVerifyResponse, error)

	PostXpnsV10SesVerifyWithResponse(ctx context.Context, params *PostXpnsV10SesVerifyParams, body PostXpnsV10SesVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10SesVerifyResponse, error)

	// PostXpnsV10SmsSendWithBodyWithResponse request with any body
	PostXpnsV10SmsSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10SmsSendResponse, error)

	PostXpnsV10SmsSendWithResponse(ctx context.Context, body PostXpnsV10SmsSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10SmsSendResponse, error)

	// GetXpnsV10SmsTestVerificationCodeWithResponse request
	GetXpnsV10SmsTestVerificationCodeWithResponse(ctx context.Context, params *GetXpnsV10SmsTestVerificationCodeParams, reqEditors ...RequestEditorFn) (*GetXpnsV10SmsTestVerificationCodeResponse, error)

	// PostXpnsV10SmsVerifyTelephoneNumberWithBodyWithResponse request with any body
	PostXpnsV10SmsVerifyTelephoneNumberWithBodyWithResponse(ctx context.Context, telephoneNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10SmsVerifyTelephoneNumberResponse, error)

	PostXpnsV10SmsVerifyTelephoneNumberWithResponse(ctx context.Context, telephoneNumber string, body PostXpnsV10SmsVerifyTelephoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10SmsVerifyTelephoneNumberResponse, error)

	// PostXpnsV10TpnsTokenBindWithBodyWithResponse request with any body
	PostXpnsV10TpnsTokenBindWithBodyWithResponse(ctx context.Context, params *PostXpnsV10TpnsTokenBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsTokenBindResponse, error)

	PostXpnsV10TpnsTokenBindWithResponse(ctx context.Context, params *PostXpnsV10TpnsTokenBindParams, body PostXpnsV10TpnsTokenBindJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsTokenBindResponse, error)

	// PostXpnsV10TpnsServiceTypeSendWithBodyWithResponse request with any body
	PostXpnsV10TpnsServiceTypeSendWithBodyWithResponse(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsServiceTypeSendResponse, error)

	PostXpnsV10TpnsServiceTypeSendWithResponse(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, body PostXpnsV10TpnsServiceTypeSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsServiceTypeSendResponse, error)

	// PostXpnsV10TpnsServiceTypeTagBindWithBodyWithResponse request with any body
	PostXpnsV10TpnsServiceTypeTagBindWithBodyWithResponse(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsServiceTypeTagBindResponse, error)

	PostXpnsV10TpnsServiceTypeTagBindWithResponse(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, body PostXpnsV10TpnsServiceTypeTagBindJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsServiceTypeTagBindResponse, error)
}

type PostXpnsV10SesSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseWithRequestId
	JSON400      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostXpnsV10SesSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostXpnsV10SesSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostXpnsV10SesVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
	JSON400      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostXpnsV10SesVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostXpnsV10SesVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostXpnsV10SmsSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseWithRequestId
	JSON400      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostXpnsV10SmsSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostXpnsV10SmsSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetXpnsV10SmsTestVerificationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseWithVerificationCodeVOList
}

// Status returns HTTPResponse.Status
func (r GetXpnsV10SmsTestVerificationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetXpnsV10SmsTestVerificationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostXpnsV10SmsVerifyTelephoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r PostXpnsV10SmsVerifyTelephoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostXpnsV10SmsVerifyTelephoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostXpnsV10TpnsTokenBindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseResult
	JSON400      *ResponseResult
	JSON401      *ResponseResult
	JSON500      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r PostXpnsV10TpnsTokenBindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostXpnsV10TpnsTokenBindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostXpnsV10TpnsServiceTypeSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseWithRequestId
	JSON400      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r PostXpnsV10TpnsServiceTypeSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostXpnsV10TpnsServiceTypeSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostXpnsV10TpnsServiceTypeTagBindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseWithRequestId
	JSON400      *ResponseResult
}

// Status returns HTTPResponse.Status
func (r PostXpnsV10TpnsServiceTypeTagBindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostXpnsV10TpnsServiceTypeTagBindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostXpnsV10SesSendWithBodyWithResponse request with arbitrary body returning *PostXpnsV10SesSendResponse
func (c *ClientWithResponses) PostXpnsV10SesSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10SesSendResponse, error) {
	rsp, err := c.PostXpnsV10SesSendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10SesSendResponse(rsp)
}

// PostXpnsV10SesVerifyWithBodyWithResponse request with arbitrary body returning *PostXpnsV10SesVerifyResponse
func (c *ClientWithResponses) PostXpnsV10SesVerifyWithBodyWithResponse(ctx context.Context, params *PostXpnsV10SesVerifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10SesVerifyResponse, error) {
	rsp, err := c.PostXpnsV10SesVerifyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10SesVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostXpnsV10SesVerifyWithResponse(ctx context.Context, params *PostXpnsV10SesVerifyParams, body PostXpnsV10SesVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10SesVerifyResponse, error) {
	rsp, err := c.PostXpnsV10SesVerify(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10SesVerifyResponse(rsp)
}

// PostXpnsV10SmsSendWithBodyWithResponse request with arbitrary body returning *PostXpnsV10SmsSendResponse
func (c *ClientWithResponses) PostXpnsV10SmsSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10SmsSendResponse, error) {
	rsp, err := c.PostXpnsV10SmsSendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10SmsSendResponse(rsp)
}

func (c *ClientWithResponses) PostXpnsV10SmsSendWithResponse(ctx context.Context, body PostXpnsV10SmsSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10SmsSendResponse, error) {
	rsp, err := c.PostXpnsV10SmsSend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10SmsSendResponse(rsp)
}

// GetXpnsV10SmsTestVerificationCodeWithResponse request returning *GetXpnsV10SmsTestVerificationCodeResponse
func (c *ClientWithResponses) GetXpnsV10SmsTestVerificationCodeWithResponse(ctx context.Context, params *GetXpnsV10SmsTestVerificationCodeParams, reqEditors ...RequestEditorFn) (*GetXpnsV10SmsTestVerificationCodeResponse, error) {
	rsp, err := c.GetXpnsV10SmsTestVerificationCode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetXpnsV10SmsTestVerificationCodeResponse(rsp)
}

// PostXpnsV10SmsVerifyTelephoneNumberWithBodyWithResponse request with arbitrary body returning *PostXpnsV10SmsVerifyTelephoneNumberResponse
func (c *ClientWithResponses) PostXpnsV10SmsVerifyTelephoneNumberWithBodyWithResponse(ctx context.Context, telephoneNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10SmsVerifyTelephoneNumberResponse, error) {
	rsp, err := c.PostXpnsV10SmsVerifyTelephoneNumberWithBody(ctx, telephoneNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10SmsVerifyTelephoneNumberResponse(rsp)
}

func (c *ClientWithResponses) PostXpnsV10SmsVerifyTelephoneNumberWithResponse(ctx context.Context, telephoneNumber string, body PostXpnsV10SmsVerifyTelephoneNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10SmsVerifyTelephoneNumberResponse, error) {
	rsp, err := c.PostXpnsV10SmsVerifyTelephoneNumber(ctx, telephoneNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10SmsVerifyTelephoneNumberResponse(rsp)
}

// PostXpnsV10TpnsTokenBindWithBodyWithResponse request with arbitrary body returning *PostXpnsV10TpnsTokenBindResponse
func (c *ClientWithResponses) PostXpnsV10TpnsTokenBindWithBodyWithResponse(ctx context.Context, params *PostXpnsV10TpnsTokenBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsTokenBindResponse, error) {
	rsp, err := c.PostXpnsV10TpnsTokenBindWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10TpnsTokenBindResponse(rsp)
}

func (c *ClientWithResponses) PostXpnsV10TpnsTokenBindWithResponse(ctx context.Context, params *PostXpnsV10TpnsTokenBindParams, body PostXpnsV10TpnsTokenBindJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsTokenBindResponse, error) {
	rsp, err := c.PostXpnsV10TpnsTokenBind(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10TpnsTokenBindResponse(rsp)
}

// PostXpnsV10TpnsServiceTypeSendWithBodyWithResponse request with arbitrary body returning *PostXpnsV10TpnsServiceTypeSendResponse
func (c *ClientWithResponses) PostXpnsV10TpnsServiceTypeSendWithBodyWithResponse(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsServiceTypeSendResponse, error) {
	rsp, err := c.PostXpnsV10TpnsServiceTypeSendWithBody(ctx, serviceType, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10TpnsServiceTypeSendResponse(rsp)
}

func (c *ClientWithResponses) PostXpnsV10TpnsServiceTypeSendWithResponse(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeSendParams, body PostXpnsV10TpnsServiceTypeSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsServiceTypeSendResponse, error) {
	rsp, err := c.PostXpnsV10TpnsServiceTypeSend(ctx, serviceType, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10TpnsServiceTypeSendResponse(rsp)
}

// PostXpnsV10TpnsServiceTypeTagBindWithBodyWithResponse request with arbitrary body returning *PostXpnsV10TpnsServiceTypeTagBindResponse
func (c *ClientWithResponses) PostXpnsV10TpnsServiceTypeTagBindWithBodyWithResponse(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsServiceTypeTagBindResponse, error) {
	rsp, err := c.PostXpnsV10TpnsServiceTypeTagBindWithBody(ctx, serviceType, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10TpnsServiceTypeTagBindResponse(rsp)
}

func (c *ClientWithResponses) PostXpnsV10TpnsServiceTypeTagBindWithResponse(ctx context.Context, serviceType string, params *PostXpnsV10TpnsServiceTypeTagBindParams, body PostXpnsV10TpnsServiceTypeTagBindJSONRequestBody, reqEditors ...RequestEditorFn) (*PostXpnsV10TpnsServiceTypeTagBindResponse, error) {
	rsp, err := c.PostXpnsV10TpnsServiceTypeTagBind(ctx, serviceType, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostXpnsV10TpnsServiceTypeTagBindResponse(rsp)
}

// ParsePostXpnsV10SesSendResponse parses an HTTP response from a PostXpnsV10SesSendWithResponse call
func ParsePostXpnsV10SesSendResponse(rsp *http.Response) (*PostXpnsV10SesSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostXpnsV10SesSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseWithRequestId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostXpnsV10SesVerifyResponse parses an HTTP response from a PostXpnsV10SesVerifyWithResponse call
func ParsePostXpnsV10SesVerifyResponse(rsp *http.Response) (*PostXpnsV10SesVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostXpnsV10SesVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostXpnsV10SmsSendResponse parses an HTTP response from a PostXpnsV10SmsSendWithResponse call
func ParsePostXpnsV10SmsSendResponse(rsp *http.Response) (*PostXpnsV10SmsSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostXpnsV10SmsSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseWithRequestId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetXpnsV10SmsTestVerificationCodeResponse parses an HTTP response from a GetXpnsV10SmsTestVerificationCodeWithResponse call
func ParseGetXpnsV10SmsTestVerificationCodeResponse(rsp *http.Response) (*GetXpnsV10SmsTestVerificationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetXpnsV10SmsTestVerificationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseWithVerificationCodeVOList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostXpnsV10SmsVerifyTelephoneNumberResponse parses an HTTP response from a PostXpnsV10SmsVerifyTelephoneNumberWithResponse call
func ParsePostXpnsV10SmsVerifyTelephoneNumberResponse(rsp *http.Response) (*PostXpnsV10SmsVerifyTelephoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostXpnsV10SmsVerifyTelephoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostXpnsV10TpnsTokenBindResponse parses an HTTP response from a PostXpnsV10TpnsTokenBindWithResponse call
func ParsePostXpnsV10TpnsTokenBindResponse(rsp *http.Response) (*PostXpnsV10TpnsTokenBindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostXpnsV10TpnsTokenBindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostXpnsV10TpnsServiceTypeSendResponse parses an HTTP response from a PostXpnsV10TpnsServiceTypeSendWithResponse call
func ParsePostXpnsV10TpnsServiceTypeSendResponse(rsp *http.Response) (*PostXpnsV10TpnsServiceTypeSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostXpnsV10TpnsServiceTypeSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseWithRequestId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostXpnsV10TpnsServiceTypeTagBindResponse parses an HTTP response from a PostXpnsV10TpnsServiceTypeTagBindWithResponse call
func ParsePostXpnsV10TpnsServiceTypeTagBindResponse(rsp *http.Response) (*PostXpnsV10TpnsServiceTypeTagBindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostXpnsV10TpnsServiceTypeTagBindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseWithRequestId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
