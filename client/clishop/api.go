// Package clishop provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package clishop

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ServerTokenScopes = "ServerToken.Scopes"
	UserTokenScopes   = "UserToken.Scopes"
)

// Defines values for FirstRecharge.
const (
	False FirstRecharge = false
	True  FirstRecharge = true
)

// Defines values for Gender.
const (
	Minus1 Gender = -1
	N0     Gender = 0
	N1     Gender = 1
)

// Defines values for Os.
const (
	Android Os = "Android"
	IOS     Os = "IOS"
	PC      Os = "PC"
	Web     Os = "Web"
)

// Defines values for RefreshCycleUnit.
const (
	DAILY   RefreshCycleUnit = "DAILY"
	MONTHLY RefreshCycleUnit = "MONTHLY"
	NONE    RefreshCycleUnit = "NONE"
	WEEKLY  RefreshCycleUnit = "WEEKLY"
	YEARLY  RefreshCycleUnit = "YEARLY"
)

// Defines values for Sorting.
const (
	CASHASC  Sorting = "CASH_ASC"
	CASHDESC Sorting = "CASH_DESC"
	DEFAULT  Sorting = "DEFAULT"
)

// AllowDiscountPurchase 是否允许当前用户优惠购买
type AllowDiscountPurchase = bool

// AllowPurchase 是否允许当前用户购买
type AllowPurchase = bool

// Balance 货币余额（包含赠送余额）
type Balance = int64

// BalanceData defines model for balanceData.
type BalanceData struct {
	// Balance 货币余额（包含赠送余额）
	Balance *Balance `json:"balance,omitempty"`

	// FirstRecharge 是否满足首次充值 true: 是 false:不是
	FirstRecharge *FirstRecharge `json:"firstRecharge,omitempty"`

	// PresentBalance 当前赠送余额
	PresentBalance *PresentBalance `json:"presentBalance,omitempty"`
}

// BalanceRequest defines model for balanceRequest.
type BalanceRequest struct {
	// OpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	OpenKey OpenKey `json:"openKey"`

	// Os 操作系统：IOS/Android/PC/Web
	Os Os `json:"os"`

	// Pf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	Pf Pf `json:"pf"`

	// UserIp 用户ip
	UserIp *UserIp `json:"userIp"`
}

// BalanceResponse defines model for balanceResponse.
type BalanceResponse struct {
	// Code 状态码
	Code int          `json:"code"`
	Data *BalanceData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// BannerData defines model for bannerData.
type BannerData struct {
	// BannerDesc banner description
	BannerDesc *BannerDesc `json:"bannerDesc,omitempty"`

	// BannerName banner name
	BannerName *BannerName `json:"bannerName,omitempty"`

	// BannerUrl banner url address
	BannerUrl *BannerUrl `json:"bannerUrl,omitempty"`

	// ExhibitionCode 展示页code
	ExhibitionCode *ExhibitionCode `json:"exhibitionCode,omitempty"`

	// GameNo game number
	GameNo *GameNo `json:"gameNo,omitempty"`

	// Id banner unique identifier
	Id *BannerId `json:"id,omitempty"`

	// ProductId 商品ID
	ProductId *ProductId `json:"productId,omitempty"`

	// Sort 排序顺序
	Sort *Sort `json:"sort,omitempty"`
}

// BannerDesc banner description
type BannerDesc = string

// BannerId banner unique identifier
type BannerId = int64

// BannerName banner name
type BannerName = string

// BannerResponse defines model for bannerResponse.
type BannerResponse struct {
	// Code 状态码
	Code int           `json:"code"`
	Data *[]BannerData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// BannerUrl banner url address
type BannerUrl = string

// BulkBuyRequest defines model for bulkBuyRequest.
type BulkBuyRequest struct {
	// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
	ChannelCode ChannelCode `json:"channelCode"`

	// OpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	OpenKey *OpenKey `json:"openKey,omitempty"`

	// Orders 购买的订单信息, 限制1-20
	Orders []Order `json:"orders"`

	// Os 操作系统：IOS/Android/PC/Web
	Os Os `json:"os"`

	// Pf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	Pf *Pf `json:"pf,omitempty"`

	// UserIp 用户ip
	UserIp *UserIp `json:"userIp"`
}

// BulkBuyResponse defines model for bulkBuyResponse.
type BulkBuyResponse struct {
	// Code 状态码
	Code int                  `json:"code"`
	Data *BulkBuyResponseData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// BulkBuyResponseData defines model for bulkBuyResponseData.
type BulkBuyResponseData struct {
	Orders *ResponseOrders `json:"orders,omitempty"`

	// PackSendItemCnt 发送到背包的道具数量
	PackSendItemCnt *PackSendItemCnt `json:"packSendItemCnt,omitempty"`

	// PostSendItemCnt 发送到邮箱的道具数量
	PostSendItemCnt *PostSendItemCnt `json:"postSendItemCnt,omitempty"`

	// SendCode <pre>道具发送结果<br/>-1->发送失败<br/>0->所有商品发送到背包<br/>1->部分发放至背包，部分用邮件发送<br/>2->全部邮件发送<br/> 3 不需要发送道具</pre>
	SendCode *SendCode `json:"sendCode,omitempty"`
}

// BuyRequest defines model for buyRequest.
type BuyRequest struct {
	// CashType 货币类型
	CashType CashType `json:"cashType"`

	// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
	ChannelCode ChannelCode `json:"channelCode"`

	// ExhibitionCode 展示页code
	ExhibitionCode ExhibitionCode `json:"exhibitionCode"`

	// OpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	OpenKey *OpenKey `json:"openKey,omitempty"`

	// Os 操作系统：IOS/Android/PC/Web
	Os Os `json:"os"`

	// Pf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	Pf *Pf `json:"pf,omitempty"`

	// Quantity 购买数量
	Quantity PurchasedQuantity `json:"quantity"`

	// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
	ThirdOrderNo ThirdOrderNo `json:"thirdOrderNo"`

	// UserIp 用户ip
	UserIp *UserIp `json:"userIp"`
}

// BuyResponseData defines model for buyResponseData.
type BuyResponseData struct {
	// Balance 货币余额（包含赠送余额）
	Balance *Balance `json:"balance,omitempty"`

	// CashType 货币类型
	CashType *CashType `json:"cashType,omitempty"`

	// DeductBalance 扣除的游戏币数量
	DeductBalance *DeductBalance `json:"deductBalance,omitempty"`

	// OrderNo 星空屋平台订单号
	OrderNo *OrderNo `json:"orderNo,omitempty"`

	// PackSendItemCnt 发送到背包的道具数量
	PackSendItemCnt *PackSendItemCnt `json:"packSendItemCnt,omitempty"`

	// PostSendItemCnt 发送到邮箱的道具数量
	PostSendItemCnt *PostSendItemCnt `json:"postSendItemCnt,omitempty"`

	// PresentBalance 当前赠送余额
	PresentBalance *PresentBalance `json:"presentBalance,omitempty"`

	// SendCode <pre>道具发送结果<br/>-1->发送失败<br/>0->所有商品发送到背包<br/>1->部分发放至背包，部分用邮件发送<br/>2->全部邮件发送<br/> 3 不需要发送道具</pre>
	SendCode *SendCode `json:"sendCode,omitempty"`

	// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
	ThirdOrderNo *ThirdOrderNo `json:"thirdOrderNo,omitempty"`
}

// CashSort 商品根据货币排序的序号
type CashSort = int64

// CashType 货币类型
type CashType = int32

// CategoryCode 商品类别code
type CategoryCode = string

// CategoryDesc 商品类别描述
type CategoryDesc = string

// CategoryName 商品类别名称
type CategoryName = string

// Change 更新内容
type Change = string

// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
type ChannelCode = string

// CharacterNo character no
type CharacterNo = int64

// CreatedAt 创建时间
type CreatedAt = time.Time

// CycleEndAt 当前销售周期结束时间，当cycleUse=false时，cycleEndAt = saleEndAt
type CycleEndAt = time.Time

// CycleStartAt 当前销售周期开始时间，当cycleUse=false时，cycleStartAt = saleStartAt
type CycleStartAt = time.Time

// DataResult defines model for dataResult.
type DataResult struct {
	// Code 状态码
	Code int `json:"code"`

	// Message 状态码描述
	Message string `json:"message"`
}

// DeductBalance 扣除的游戏币数量
type DeductBalance = int64

// DiscountLimitCount 限制优惠购买的次数，discountLimitUse=false时, 值为-1
type DiscountLimitCount = int64

// DiscountLimitUse 是否限制优惠购买次数
type DiscountLimitUse = bool

// DiscountPrice 优惠价格(当前销售价格),显示这个价格给玩家
type DiscountPrice = int64

// DiscountPurchasedCount 当前用户已经优惠购买当前商品的次数，非限制购买次数商品返回默认值0
type DiscountPurchasedCount = int64

// DiscountRate 优惠率（单位%）
type DiscountRate = int32

// DiscountRateUse 是否启用优惠
type DiscountRateUse = bool

// ExhibitionCode 展示页code
type ExhibitionCode = string

// ExhibitionData defines model for exhibitionData.
type ExhibitionData struct {
	// Children 展示页子节点,当不存在子节点时，该字段不返回
	Children *[]ExhibitionData `json:"children,omitempty"`

	// ExhibitionCode 展示页code
	ExhibitionCode *ExhibitionCode `json:"exhibitionCode,omitempty"`

	// ExhibitionDesc 展示页描述
	ExhibitionDesc *ExhibitionDesc `json:"exhibitionDesc,omitempty"`

	// ExhibitionName 展示页名称
	ExhibitionName *ExhibitionName `json:"exhibitionName,omitempty"`

	// ExistChildNode 是否存在子节点
	ExistChildNode *ExistChildNode `json:"existChildNode,omitempty"`

	// Id 唯一id
	Id *TreeId `json:"id,omitempty"`

	// ParentId 父节点id
	ParentId *TreeParentId `json:"parentId,omitempty"`

	// Sort 排序顺序
	Sort *Sort `json:"sort,omitempty"`
}

// ExhibitionDesc 展示页描述
type ExhibitionDesc = string

// ExhibitionName 展示页名称
type ExhibitionName = string

// ExhibitionResponse defines model for exhibitionResponse.
type ExhibitionResponse struct {
	// Code 状态码
	Code int               `json:"code"`
	Data *[]ExhibitionData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// ExistChildNode 是否存在子节点
type ExistChildNode = bool

// FirstRecharge 是否满足首次充值 true: 是 false:不是
type FirstRecharge bool

// ForceUpdate 是否强制更新
type ForceUpdate = bool

// GameNo game number
type GameNo = int64

// Gender <pre>商品性别<br/> 0-> female <br/> 1->male <br/> -1->general</pre>
type Gender int32

// GenderType 道具限制性别->Male/Female/Both
type GenderType = string

// Genders 商品性别
type Genders = []Gender

// GiftPossible 是否允许做为礼物赠送
type GiftPossible = bool

// ItemCategory 道具类别code
type ItemCategory = string

// ItemData defines model for itemData.
type ItemData struct {
	// GenderType 道具限制性别->Male/Female/Both
	GenderType *GenderType `json:"genderType,omitempty"`

	// Image 道具图片名称
	Image *ItemImage `json:"image,omitempty"`

	// ItemCategory 道具类别code
	ItemCategory *ItemCategory `json:"itemCategory,omitempty"`

	// ItemDesc 道具描述
	ItemDesc *ItemDesc `json:"itemDesc,omitempty"`

	// ItemGrade 道具等级
	ItemGrade *ItemGrade `json:"itemGrade,omitempty"`

	// ItemIcon 道具icon url
	ItemIcon *ItemIcon `json:"itemIcon,omitempty"`

	// ItemId 游戏侧道具id
	ItemId *ItemId `json:"itemId,omitempty"`

	// ItemName 道具名称
	ItemName *ItemName `json:"itemName,omitempty"`

	// ItemQuantity 道具数量
	ItemQuantity *ItemQuantity `json:"itemQuantity,omitempty"`

	// ItemType 道具类型
	ItemType *ItemType `json:"itemType,omitempty"`

	// Source 道具来源:arcade/sandbox
	Source *Source `json:"source,omitempty"`
}

// ItemDesc 道具描述
type ItemDesc = string

// ItemGrade 道具等级
type ItemGrade = string

// ItemIcon 道具icon url
type ItemIcon = string

// ItemId 游戏侧道具id
type ItemId = string

// ItemImage 道具图片名称
type ItemImage = string

// ItemInfo defines model for itemInfo.
type ItemInfo struct {
	// GenderType 道具限制性别->Male/Female/Both
	GenderType *GenderType `json:"genderType,omitempty"`

	// Id 星空屋平台itemId
	Id *Xk5ItemId `json:"id,omitempty"`

	// Image 道具图片名称
	Image *ItemImage `json:"image,omitempty"`

	// ItemCategory 道具类别code
	ItemCategory *ItemCategory `json:"itemCategory,omitempty"`

	// ItemDesc 道具描述
	ItemDesc *ItemDesc `json:"itemDesc,omitempty"`

	// ItemGrade 道具等级
	ItemGrade *ItemGrade `json:"itemGrade,omitempty"`

	// ItemIcon 道具icon url
	ItemIcon *ItemIcon `json:"itemIcon,omitempty"`

	// ItemId 游戏侧道具id
	ItemId *ItemId `json:"itemId,omitempty"`

	// ItemName 道具名称
	ItemName *ItemName `json:"itemName,omitempty"`

	// ItemTag item tag
	ItemTag *ItemTag `json:"itemTag,omitempty"`

	// ItemType 道具类型
	ItemType *ItemType `json:"itemType,omitempty"`

	// Source 道具来源:arcade/sandbox
	Source *Source `json:"source,omitempty"`
}

// ItemList 商品包含的道具列表信息
type ItemList = []ItemData

// ItemListResponse defines model for itemListResponse.
type ItemListResponse struct {
	// Code 状态码
	Code int `json:"code"`
	Data *struct {
		List *[]ItemInfo `json:"list,omitempty"`
	} `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// ItemName 道具名称
type ItemName = string

// ItemQuantity 道具数量
type ItemQuantity = int64

// ItemTag item tag
type ItemTag = int

// ItemType 道具类型
type ItemType = int32

// Limit 商品限制信息
type Limit struct {
	// AllowDiscountPurchase 是否允许当前用户优惠购买
	AllowDiscountPurchase *AllowDiscountPurchase `json:"allowDiscountPurchase,omitempty"`

	// AllowPurchase 是否允许当前用户购买
	AllowPurchase *AllowPurchase `json:"allowPurchase,omitempty"`

	// CycleEndAt 当前销售周期结束时间，当cycleUse=false时，cycleEndAt = saleEndAt
	CycleEndAt *CycleEndAt `json:"cycleEndAt,omitempty"`

	// CycleStartAt 当前销售周期开始时间，当cycleUse=false时，cycleStartAt = saleStartAt
	CycleStartAt *CycleStartAt `json:"cycleStartAt,omitempty"`

	// DiscountLimitCount 限制优惠购买的次数，discountLimitUse=false时, 值为-1
	DiscountLimitCount *DiscountLimitCount `json:"discountLimitCount,omitempty"`

	// DiscountLimitUse 是否限制优惠购买次数
	DiscountLimitUse *DiscountLimitUse `json:"discountLimitUse,omitempty"`

	// DiscountPurchasedCount 当前用户已经优惠购买当前商品的次数，非限制购买次数商品返回默认值0
	DiscountPurchasedCount *DiscountPurchasedCount `json:"discountPurchasedCount,omitempty"`

	// LimitGender <pre>限制购买性别<br/> 0-> female <br/> 1->male <br/> -1->general</pre>
	LimitGender *LimitGender `json:"limitGender,omitempty"`

	// LimitId 限制id
	LimitId *LimitId `json:"limitId,omitempty"`

	// PurchaseLimitCount 限制购买的次数，当purchaseLimitUse=false时, 值为-1
	PurchaseLimitCount *PurchaseLimitCount `json:"purchaseLimitCount,omitempty"`

	// PurchaseLimitUse 是否限制购买次数
	PurchaseLimitUse *PurchaseLimitUse `json:"purchaseLimitUse,omitempty"`

	// PurchasedCount 当前用户已经购买当前商品的次数, 非限制优惠购买次数商品返回默认值0
	PurchasedCount *PurchasedCount `json:"purchasedCount,omitempty"`

	// RechargeLimit 是否限制首充完成才允许购买
	RechargeLimit *RechargeLimit `json:"rechargeLimit,omitempty"`

	// RefreshCycleLength 刷新限制次数的周期长度
	RefreshCycleLength *RefreshCycleLength `json:"refreshCycleLength,omitempty"`

	// RefreshCycleUnit 刷新限制次数的周期单位
	RefreshCycleUnit *RefreshCycleUnit `json:"refreshCycleUnit,omitempty"`

	// RefreshLimitUse 是否刷新限制次数(包含购买次数，优惠次数)
	RefreshLimitUse *RefreshLimitUse `json:"refreshLimitUse,omitempty"`

	// SaleEndAt 销售结束时间，当sateTimeLimit=false时，值为null
	SaleEndAt *SaleEndAt `json:"saleEndAt,omitempty"`

	// SaleStartAt 销售开始时间，当sateTimeLimit=false时，值为null
	SaleStartAt *SaleStartAt `json:"saleStartAt,omitempty"`

	// SaleTagList 销售标签列表
	SaleTagList *SaleTagList `json:"saleTagList,omitempty"`

	// SaleTimeLimit 是否限制销售时间
	SaleTimeLimit *SaleTimeLimit `json:"saleTimeLimit,omitempty"`
}

// LimitGender <pre>限制购买性别<br/> 0-> female <br/> 1->male <br/> -1->general</pre>
type LimitGender = int32

// LimitId 限制id
type LimitId = int64

// LimitPurchasedData defines model for limitPurchasedData.
type LimitPurchasedData struct {
	// AllowDiscountPurchase 是否允许当前用户优惠购买
	AllowDiscountPurchase *AllowDiscountPurchase `json:"allowDiscountPurchase,omitempty"`

	// AllowPurchase 是否允许当前用户购买
	AllowPurchase *AllowPurchase `json:"allowPurchase,omitempty"`

	// DiscountLimitCount 限制优惠购买的次数，discountLimitUse=false时, 值为-1
	DiscountLimitCount *DiscountLimitCount `json:"discountLimitCount,omitempty"`

	// DiscountLimitUse 是否限制优惠购买次数
	DiscountLimitUse *DiscountLimitUse `json:"discountLimitUse,omitempty"`

	// DiscountPurchasedCount 当前用户已经优惠购买当前商品的次数，非限制购买次数商品返回默认值0
	DiscountPurchasedCount *DiscountPurchasedCount `json:"discountPurchasedCount,omitempty"`

	// ProductId 商品ID
	ProductId *ProductId `json:"productId,omitempty"`

	// PurchaseLimitCount 限制购买的次数，当purchaseLimitUse=false时, 值为-1
	PurchaseLimitCount *PurchaseLimitCount `json:"purchaseLimitCount,omitempty"`

	// PurchaseLimitUse 是否限制购买次数
	PurchaseLimitUse *PurchaseLimitUse `json:"purchaseLimitUse,omitempty"`

	// PurchasedCount 当前用户已经购买当前商品的次数, 非限制优惠购买次数商品返回默认值0
	PurchasedCount *PurchasedCount `json:"purchasedCount,omitempty"`
}

// LimitPurchasedResponse defines model for limitPurchasedResponse.
type LimitPurchasedResponse struct {
	// Code 状态码
	Code int                 `json:"code"`
	Data *LimitPurchasedData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// MemberNo member no
type MemberNo = int64

// MidasBuyData defines model for midasBuyData.
type MidasBuyData struct {
	// OrderNo 星空屋平台订单号
	OrderNo *OrderNo `json:"orderNo,omitempty"`

	// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
	ThirdOrderNo *ThirdOrderNo `json:"thirdOrderNo,omitempty"`

	// UrlParams 购买物品的url的参数，开发者需要把该参数传给sdk支付接口使用户完成真正的购买动作。 交易的token有效期为5分钟，必须在5分钟内将token传给应用来调用发货接口。 这里token有效期指的是下单到支付的时间
	UrlParams *UrlParams `json:"urlParams,omitempty"`
}

// MidasBuyResponse defines model for midasBuyResponse.
type MidasBuyResponse struct {
	// Code 状态码
	Code int           `json:"code"`
	Data *MidasBuyData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// OpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
type OpenKey = string

// Order 订单信息
type Order struct {
	// CashType 货币类型
	CashType CashType `json:"cashType"`

	// ExhibitionCode 展示页code
	ExhibitionCode ExhibitionCode `json:"exhibitionCode"`

	// ProductId 商品ID
	ProductId ProductId `json:"productId"`

	// Quantity 购买数量
	Quantity PurchasedQuantity `json:"quantity"`

	// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
	ThirdOrderNo ThirdOrderNo `json:"thirdOrderNo"`
}

// OrderNo 星空屋平台订单号
type OrderNo = string

// OriginalPayPrice 原价（折扣前），商品原价*商品数量
type OriginalPayPrice = int64

// Os 操作系统：IOS/Android/PC/Web
type Os string

// PackSendItemCnt 发送到背包的道具数量
type PackSendItemCnt = int64

// PageNo 页码
type PageNo = int

// PageResult defines model for pageResult.
type PageResult struct {
	// PageNo 页码
	PageNo *PageNo `json:"pageNo,omitempty"`

	// PageSize 分页大小
	PageSize *PageSize `json:"pageSize,omitempty"`

	// Total 总记录数据
	Total *Total `json:"total,omitempty"`

	// TotalPages 页数
	TotalPages *TotalPages `json:"totalPages,omitempty"`
}

// PageSize 分页大小
type PageSize = int

// PayMsg 支付描述成功：Success</br>其他：返回具体的内容，没有则填空
type PayMsg = string

// PayPrice 实际支付游戏币，商品原价*商品数量*折扣率
type PayPrice = int64

// PayStatus 支付状态 </br>-1:未知状态</br> 0：取消支付/未支付</br> 1：支付成功 </br>2：支付失败/出错 </br>
type PayStatus = int32

// Pf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
type Pf = string

// PostSendItemCnt 发送到邮箱的道具数量
type PostSendItemCnt = int64

// PresentBalance 当前赠送余额
type PresentBalance = int64

// Price 原价
type Price = int64

// PriceData 商品价格信息
type PriceData struct {
	// CashType 货币类型
	CashType *CashType `json:"cashType,omitempty"`

	// DiscountPrice 优惠价格(当前销售价格),显示这个价格给玩家
	DiscountPrice *DiscountPrice `json:"discountPrice,omitempty"`

	// DiscountRate 优惠率（单位%）
	DiscountRate *DiscountRate `json:"discountRate,omitempty"`

	// DiscountRateUse 是否启用优惠
	DiscountRateUse *DiscountRateUse `json:"discountRateUse,omitempty"`

	// Price 原价
	Price *Price `json:"price,omitempty"`
}

// PriceList 商品价格信息列表
type PriceList = []PriceData

// Product defines model for product.
type Product struct {
	// Gender <pre>商品性别<br/> 0-> female <br/> 1->male <br/> -1->general</pre>
	Gender *Gender `json:"gender,omitempty"`

	// GiftPossible 是否允许做为礼物赠送
	GiftPossible *GiftPossible `json:"giftPossible,omitempty"`

	// ProductCategory 商品类别code
	ProductCategory *CategoryCode `json:"productCategory,omitempty"`

	// ProductDesc 商品描述信息
	ProductDesc *ProductDesc `json:"productDesc,omitempty"`

	// ProductIcon 商品icon url
	ProductIcon *ProductIcon `json:"productIcon,omitempty"`

	// ProductIconId 商品iconId
	ProductIconId *ProductIconId `json:"productIconId,omitempty"`

	// ProductId 商品ID
	ProductId *ProductId `json:"productId,omitempty"`

	// ProductName 商品名称
	ProductName *ProductName `json:"productName,omitempty"`

	// ProductType 商品类型 1:消耗 2:永久 3::期限
	ProductType *ProductType `json:"productType,omitempty"`
}

// ProductBuyResponse defines model for productBuyResponse.
type ProductBuyResponse struct {
	// Code 状态码
	Code int              `json:"code"`
	Data *BuyResponseData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// ProductCategoryData defines model for productCategoryData.
type ProductCategoryData struct {
	// CategoryCode 商品类别code
	CategoryCode *CategoryCode `json:"categoryCode,omitempty"`

	// CategoryDesc 商品类别描述
	CategoryDesc *CategoryDesc `json:"categoryDesc,omitempty"`

	// CategoryName 商品类别名称
	CategoryName *CategoryName `json:"categoryName,omitempty"`

	// Children 商品类别子节点, 当不存在子类别时，该字段不返回
	Children *[]ProductCategoryData `json:"children,omitempty"`

	// ExistChildNode 是否存在子节点
	ExistChildNode *ExistChildNode `json:"existChildNode,omitempty"`

	// Id 唯一id
	Id *TreeId `json:"id,omitempty"`

	// ParentId 父节点id
	ParentId *TreeParentId `json:"parentId,omitempty"`

	// Sort 排序顺序
	Sort *Sort `json:"sort,omitempty"`
}

// ProductCategoryResponse defines model for productCategoryResponse.
type ProductCategoryResponse struct {
	// Code 状态码
	Code int                    `json:"code"`
	Data *[]ProductCategoryData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// ProductCount 展示页商品数量
type ProductCount = int64

// ProductData defines model for productData.
type ProductData struct {
	// CashSort 商品根据货币排序的序号
	CashSort *CashSort `json:"cashSort,omitempty"`

	// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
	ChannelCode *ChannelCode `json:"channelCode,omitempty"`

	// ExhibitionCode 展示页code
	ExhibitionCode *ExhibitionCode `json:"exhibitionCode,omitempty"`

	// Gender <pre>商品性别<br/> 0-> female <br/> 1->male <br/> -1->general</pre>
	Gender *Gender `json:"gender,omitempty"`

	// GiftPossible 是否允许做为礼物赠送
	GiftPossible *GiftPossible `json:"giftPossible,omitempty"`

	// Limit 商品限制信息
	Limit *Limit `json:"limit,omitempty"`

	// PriceList 商品价格信息列表
	PriceList *PriceList `json:"priceList,omitempty"`

	// ProductCategory 商品类别code
	ProductCategory *CategoryCode `json:"productCategory,omitempty"`

	// ProductDesc 商品描述信息
	ProductDesc *ProductDesc `json:"productDesc,omitempty"`

	// ProductIcon 商品icon url
	ProductIcon *ProductIcon `json:"productIcon,omitempty"`

	// ProductIconId 商品iconId
	ProductIconId *ProductIconId `json:"productIconId,omitempty"`

	// ProductId 商品ID
	ProductId *ProductId `json:"productId,omitempty"`

	// ProductName 商品名称
	ProductName *ProductName `json:"productName,omitempty"`

	// ProductType 商品类型 1:消耗 2:永久 3::期限
	ProductType *ProductType `json:"productType,omitempty"`

	// Sort 排序顺序
	Sort *Sort `json:"sort,omitempty"`
}

// ProductDesc 商品描述信息
type ProductDesc = string

// ProductDetailData defines model for productDetailData.
type ProductDetailData struct {
	// CashSort 商品根据货币排序的序号
	CashSort *CashSort `json:"cashSort,omitempty"`

	// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
	ChannelCode *ChannelCode `json:"channelCode,omitempty"`

	// ExhibitionCode 展示页code
	ExhibitionCode *ExhibitionCode `json:"exhibitionCode,omitempty"`

	// Gender <pre>商品性别<br/> 0-> female <br/> 1->male <br/> -1->general</pre>
	Gender *Gender `json:"gender,omitempty"`

	// GiftPossible 是否允许做为礼物赠送
	GiftPossible *GiftPossible `json:"giftPossible,omitempty"`

	// ItemList 商品包含的道具列表信息
	ItemList *ItemList `json:"itemList,omitempty"`

	// Limit 商品限制信息
	Limit *Limit `json:"limit,omitempty"`

	// PriceList 商品价格信息列表
	PriceList *PriceList `json:"priceList,omitempty"`

	// ProductCategory 商品类别code
	ProductCategory *CategoryCode `json:"productCategory,omitempty"`

	// ProductDesc 商品描述信息
	ProductDesc *ProductDesc `json:"productDesc,omitempty"`

	// ProductIcon 商品icon url
	ProductIcon *ProductIcon `json:"productIcon,omitempty"`

	// ProductIconId 商品iconId
	ProductIconId *ProductIconId `json:"productIconId,omitempty"`

	// ProductId 商品ID
	ProductId *ProductId `json:"productId,omitempty"`

	// ProductName 商品名称
	ProductName *ProductName `json:"productName,omitempty"`

	// ProductType 商品类型 1:消耗 2:永久 3::期限
	ProductType *ProductType `json:"productType,omitempty"`

	// Sort 排序顺序
	Sort *Sort `json:"sort,omitempty"`
}

// ProductDetailResponse defines model for productDetailResponse.
type ProductDetailResponse struct {
	// Code 状态码
	Code int                `json:"code"`
	Data *ProductDetailData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// ProductIcon 商品icon url
type ProductIcon = string

// ProductIconId 商品iconId
type ProductIconId = string

// ProductId 商品ID
type ProductId = string

// ProductName 商品名称
type ProductName = string

// ProductResponse defines model for productResponse.
type ProductResponse struct {
	// Code 状态码
	Code int `json:"code"`
	Data *struct {
		// Count 展示页商品数量
		Count *ProductCount `json:"count,omitempty"`

		// FirstRecharge 是否满足首次充值 true: 是 false:不是
		FirstRecharge *FirstRecharge `json:"firstRecharge,omitempty"`
		List          *[]ProductData `json:"list,omitempty"`
	} `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// ProductType 商品类型 1:消耗 2:永久 3::期限
type ProductType = int32

// ProvideAt 发货时间
type ProvideAt = time.Time

// ProvideMsg 发货描述 </br>成功：Success </br>其他：返回其他的内容，没有则填空
type ProvideMsg = string

// ProvideStatus 发货状态 </br>-1:未知状态</br> 0：未发货</br> 1：发货成功 </br> 2：发货失败</br>
type ProvideStatus = int32

// PurchaseLimitCount 限制购买的次数，当purchaseLimitUse=false时, 值为-1
type PurchaseLimitCount = int64

// PurchaseLimitUse 是否限制购买次数
type PurchaseLimitUse = bool

// PurchasedCount 当前用户已经购买当前商品的次数, 非限制优惠购买次数商品返回默认值0
type PurchasedCount = int64

// PurchasedData defines model for purchasedData.
type PurchasedData struct {
	// CashType 货币类型
	CashType *CashType `json:"cashType,omitempty"`

	// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
	ChannelCode *ChannelCode `json:"channelCode,omitempty"`

	// CreatedAt 创建时间
	CreatedAt *CreatedAt `json:"createdAt,omitempty"`

	// DiscountStatus 是否启用优惠
	DiscountStatus *DiscountRateUse `json:"discountStatus,omitempty"`

	// ExhibitionCode 展示页code
	ExhibitionCode *ExhibitionCode `json:"exhibitionCode,omitempty"`

	// OrderNo 星空屋平台订单号
	OrderNo *OrderNo `json:"orderNo,omitempty"`

	// OriginalPayPrice 原价（折扣前），商品原价*商品数量
	OriginalPayPrice *OriginalPayPrice `json:"originalPayPrice,omitempty"`

	// PayMsg 支付描述成功：Success</br>其他：返回具体的内容，没有则填空
	PayMsg *PayMsg `json:"payMsg,omitempty"`

	// PayPrice 实际支付游戏币，商品原价*商品数量*折扣率
	PayPrice *PayPrice `json:"payPrice,omitempty"`

	// PayStatus 支付状态 </br>-1:未知状态</br> 0：取消支付/未支付</br> 1：支付成功 </br>2：支付失败/出错 </br>
	PayStatus *PayStatus `json:"payStatus,omitempty"`
	Product   *Product   `json:"product,omitempty"`

	// ProvideAt 发货时间
	ProvideAt *ProvideAt `json:"provideAt,omitempty"`

	// ProvideMsg 发货描述 </br>成功：Success </br>其他：返回其他的内容，没有则填空
	ProvideMsg *ProvideMsg `json:"provideMsg,omitempty"`

	// ProvideStatus 发货状态 </br>-1:未知状态</br> 0：未发货</br> 1：发货成功 </br> 2：发货失败</br>
	ProvideStatus *ProvideStatus `json:"provideStatus,omitempty"`

	// PurchaseQuantity 购买数量
	PurchaseQuantity *PurchasedQuantity `json:"purchaseQuantity,omitempty"`

	// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
	ThirdOrderNo *ThirdOrderNo `json:"thirdOrderNo,omitempty"`

	// UnitPrice 单价
	UnitPrice *UnitPrice `json:"unitPrice,omitempty"`
}

// PurchasedDetailResponse defines model for purchasedDetailResponse.
type PurchasedDetailResponse struct {
	// Code 状态码
	Code int `json:"code"`
	Data *struct {
		// CashType 货币类型
		CashType *CashType `json:"cashType,omitempty"`

		// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
		ChannelCode *ChannelCode `json:"channelCode,omitempty"`

		// CreatedAt 创建时间
		CreatedAt *CreatedAt `json:"createdAt,omitempty"`

		// DiscountStatus 是否启用优惠
		DiscountStatus *DiscountRateUse `json:"discountStatus,omitempty"`

		// ExhibitionCode 展示页code
		ExhibitionCode *ExhibitionCode `json:"exhibitionCode,omitempty"`

		// ItemList 商品包含的道具列表信息
		ItemList *ItemList `json:"itemList,omitempty"`

		// OrderNo 星空屋平台订单号
		OrderNo *OrderNo `json:"orderNo,omitempty"`

		// OriginalPayPrice 原价（折扣前），商品原价*商品数量
		OriginalPayPrice *OriginalPayPrice `json:"originalPayPrice,omitempty"`

		// PayMsg 支付描述成功：Success</br>其他：返回具体的内容，没有则填空
		PayMsg *PayMsg `json:"payMsg,omitempty"`

		// PayPrice 实际支付游戏币，商品原价*商品数量*折扣率
		PayPrice *PayPrice `json:"payPrice,omitempty"`

		// PayStatus 支付状态 </br>-1:未知状态</br> 0：取消支付/未支付</br> 1：支付成功 </br>2：支付失败/出错 </br>
		PayStatus *PayStatus `json:"payStatus,omitempty"`
		Product   *Product   `json:"product,omitempty"`

		// ProvideAt 发货时间
		ProvideAt *ProvideAt `json:"provideAt,omitempty"`

		// ProvideMsg 发货描述 </br>成功：Success </br>其他：返回其他的内容，没有则填空
		ProvideMsg *ProvideMsg `json:"provideMsg,omitempty"`

		// ProvideStatus 发货状态 </br>-1:未知状态</br> 0：未发货</br> 1：发货成功 </br> 2：发货失败</br>
		ProvideStatus *ProvideStatus `json:"provideStatus,omitempty"`

		// PurchaseQuantity 购买数量
		PurchaseQuantity *PurchasedQuantity `json:"purchaseQuantity,omitempty"`

		// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
		ThirdOrderNo *ThirdOrderNo `json:"thirdOrderNo,omitempty"`

		// UnitPrice 单价
		UnitPrice *UnitPrice `json:"unitPrice,omitempty"`
	} `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// PurchasedQuantity 购买数量
type PurchasedQuantity = int64

// PurchasedResponse defines model for purchasedResponse.
type PurchasedResponse struct {
	// Code 状态码
	Code int `json:"code"`
	Data *struct {
		List *[]PurchasedData `json:"list,omitempty"`

		// PageNo 页码
		PageNo *PageNo `json:"pageNo,omitempty"`

		// PageSize 分页大小
		PageSize *PageSize `json:"pageSize,omitempty"`

		// Total 总记录数据
		Total *Total `json:"total,omitempty"`

		// TotalPages 页数
		TotalPages *TotalPages `json:"totalPages,omitempty"`
	} `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// Reason 操作的原因
type Reason = string

// RechargeLimit 是否限制首充完成才允许购买
type RechargeLimit = bool

// RefreshCycleLength 刷新限制次数的周期长度
type RefreshCycleLength = int64

// RefreshCycleUnit 刷新限制次数的周期单位
type RefreshCycleUnit string

// RefreshLimitUse 是否刷新限制次数(包含购买次数，优惠次数)
type RefreshLimitUse = bool

// ReleaseDate 发布时间
type ReleaseDate = time.Time

// ResetRechargeRequest defines model for resetRechargeRequest.
type ResetRechargeRequest struct {
	// CashType 货币类型
	CashType CashType `json:"cashType"`

	// FirstRecharge 是否满足首次充值 true: 是 false:不是
	FirstRecharge FirstRecharge `json:"firstRecharge"`

	// Os 操作系统：IOS/Android/PC/Web
	Os Os `json:"os"`

	// Reason 操作的原因
	Reason   *Reason  `json:"reason"`
	UserInfo UserInfo `json:"userInfo"`
}

// ResponseOrders defines model for responseOrders.
type ResponseOrders = []struct {
	// CashType 货币类型
	CashType *CashType `json:"cashType,omitempty"`

	// DeductBalance 扣除的游戏币数量
	DeductBalance *DeductBalance `json:"deductBalance,omitempty"`

	// OrderNo 星空屋平台订单号
	OrderNo *OrderNo `json:"orderNo,omitempty"`

	// PackSendItemCnt 发送到背包的道具数量
	PackSendItemCnt *PackSendItemCnt `json:"packSendItemCnt,omitempty"`

	// PostSendItemCnt 发送到邮箱的道具数量
	PostSendItemCnt *PostSendItemCnt `json:"postSendItemCnt,omitempty"`

	// SendCode <pre>道具发送结果<br/>-1->发送失败<br/>0->所有商品发送到背包<br/>1->部分发放至背包，部分用邮件发送<br/>2->全部邮件发送<br/> 3 不需要发送道具</pre>
	SendCode *SendCode `json:"sendCode,omitempty"`

	// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
	ThirdOrderNo *ThirdOrderNo `json:"thirdOrderNo,omitempty"`
}

// SaleEndAt 销售结束时间，当sateTimeLimit=false时，值为null
type SaleEndAt = time.Time

// SaleStartAt 销售开始时间，当sateTimeLimit=false时，值为null
type SaleStartAt = time.Time

// SaleTagList 销售标签列表
type SaleTagList = []struct {
	// TagCode 标签code
	TagCode *TagCode `json:"tagCode,omitempty"`

	// TagName 标签名称
	TagName *TagName `json:"tagName,omitempty"`
}

// SaleTimeLimit 是否限制销售时间
type SaleTimeLimit = bool

// SendCode <pre>道具发送结果<br/>-1->发送失败<br/>0->所有商品发送到背包<br/>1->部分发放至背包，部分用邮件发送<br/>2->全部邮件发送<br/> 3 不需要发送道具</pre>
type SendCode = int32

// ServerBulkBuyRequest defines model for serverBulkBuyRequest.
type ServerBulkBuyRequest struct {
	// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
	ChannelCode ChannelCode `json:"channelCode"`

	// OpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	OpenKey *OpenKey `json:"openKey,omitempty"`

	// Orders 购买的订单信息, 限制1-20
	Orders []Order `json:"orders"`

	// Os 操作系统：IOS/Android/PC/Web
	Os Os `json:"os"`

	// Pf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	Pf       *Pf       `json:"pf,omitempty"`
	UserInfo *UserInfo `json:"userInfo,omitempty"`

	// UserIp 用户ip
	UserIp *UserIp `json:"userIp"`
}

// ServerBuyRequest defines model for serverBuyRequest.
type ServerBuyRequest struct {
	// CashType 货币类型
	CashType CashType `json:"cashType"`

	// ChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
	ChannelCode ChannelCode `json:"channelCode"`

	// ExhibitionCode 展示页code
	ExhibitionCode ExhibitionCode `json:"exhibitionCode"`

	// OpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	OpenKey *OpenKey `json:"openKey,omitempty"`

	// Os 操作系统：IOS/Android/PC/Web
	Os Os `json:"os"`

	// Pf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	Pf *Pf `json:"pf,omitempty"`

	// Quantity 购买数量
	Quantity PurchasedQuantity `json:"quantity"`

	// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
	ThirdOrderNo ThirdOrderNo `json:"thirdOrderNo"`
	UserInfo     UserInfo     `json:"userInfo"`

	// UserIp 用户ip
	UserIp *UserIp `json:"userIp"`
}

// Sort 排序顺序
type Sort = int32

// Sorting 排序规则<pre>DEFAULT-> default sort, 按照商品设定的排序值 <br/> CASH_DESC-> cash desc<br/> CASH_ASC ->cash asc<br/></pre>
type Sorting string

// Source 道具来源:arcade/sandbox
type Source = string

// TagCode 标签code
type TagCode = string

// TagName 标签名称
type TagName = string

// ThirdOrderNo 接入方自定义唯一订单号，需保证全局唯一，长度最小10位，最大32位
type ThirdOrderNo = string

// Total 总记录数据
type Total = int32

// TotalPages 页数
type TotalPages = int32

// TreeId 唯一id
type TreeId = int64

// TreeParentId 父节点id
type TreeParentId = int64

// UnitPrice 单价
type UnitPrice = int64

// UrlParams 购买物品的url的参数，开发者需要把该参数传给sdk支付接口使用户完成真正的购买动作。 交易的token有效期为5分钟，必须在5分钟内将token传给应用来调用发货接口。 这里token有效期指的是下单到支付的时间
type UrlParams = string

// UserInfo defines model for userInfo.
type UserInfo struct {
	// CharacterNo character no
	CharacterNo CharacterNo `json:"characterNo"`

	// MemberNo member no
	MemberNo MemberNo `json:"memberNo"`
}

// UserIp 用户ip
type UserIp = string

// Version 版本
type Version = string

// VersionResponse defines model for versionResponse.
type VersionResponse struct {
	// Code 状态码
	Code int                  `json:"code"`
	Data *VersionResponseData `json:"data,omitempty"`

	// Message 状态码描述
	Message string `json:"message"`
}

// VersionResponseData defines model for versionResponseData.
type VersionResponseData struct {
	// Change 更新内容
	Change *Change `json:"change,omitempty"`

	// ForceUpdate 是否强制更新
	ForceUpdate *ForceUpdate `json:"forceUpdate,omitempty"`

	// ReleaseDate 发布时间
	ReleaseDate *ReleaseDate `json:"releaseDate,omitempty"`

	// Version 版本
	Version *Version `json:"version,omitempty"`
}

// Xk5ItemId 星空屋平台itemId
type Xk5ItemId = string

// PathCategoryCode 商品类别code
type PathCategoryCode = CategoryCode

// PathChannelCode <pre>使用腾讯渠道号，如何获取？<br/> 客户端通过腾讯MSDK -> MSDKTools.GetConfigChannel()可获取<br/> </pre>
type PathChannelCode = ChannelCode

// PathExhibitionCode 展示页code
type PathExhibitionCode = ExhibitionCode

// PathGameNo game number
type PathGameNo = GameNo

// PathOrderNo 星空屋平台订单号
type PathOrderNo = OrderNo

// PathProductId 商品ID
type PathProductId = ProductId

// QueryCashType 货币类型
type QueryCashType = CashType

// QueryGenders 商品性别
type QueryGenders = Genders

// QueryItemIds defines model for queryItemIds.
type QueryItemIds = []Xk5ItemId

// QueryOpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
type QueryOpenKey = OpenKey

// QueryOs 操作系统：IOS/Android/PC/Web
type QueryOs = Os

// QueryParam 分页大小
type QueryParam = PageSize

// QueryParamNo 页码
type QueryParamNo = PageNo

// QueryPf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
type QueryPf = Pf

// QueryProductCategory 商品类别code
type QueryProductCategory = CategoryCode

// QuerySorting 排序规则<pre>DEFAULT-> default sort, 按照商品设定的排序值 <br/> CASH_DESC-> cash desc<br/> CASH_ASC ->cash asc<br/></pre>
type QuerySorting = Sorting

// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdParams defines parameters for GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductId.
type GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdParams struct {
	// Os 操作系统：IOS/Android/PC/Web
	Os QueryOs `form:"os" json:"os"`

	// OpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	OpenKey *QueryOpenKey `form:"openKey,omitempty" json:"openKey,omitempty"`

	// Pf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	Pf *QueryPf `form:"pf,omitempty" json:"pf,omitempty"`
}

// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsParams defines parameters for GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProducts.
type GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsParams struct {
	// Genders 商品性别
	Genders *QueryGenders `form:"genders,omitempty" json:"genders,omitempty"`

	// ProductCategory 商品类别code
	ProductCategory *QueryProductCategory `form:"productCategory,omitempty" json:"productCategory,omitempty"`

	// CashType 货币类型
	CashType *QueryCashType `form:"cashType,omitempty" json:"cashType,omitempty"`

	// Sorting 排序规则<pre>DEFAULT-> default sort, 按照商品设定的排序值 <br/> CASH_DESC-> cash desc<br/> CASH_ASC ->cash asc<br/></pre>
	Sorting *QuerySorting `form:"sorting,omitempty" json:"sorting,omitempty"`

	// Os 操作系统：IOS/Android/PC/Web
	Os QueryOs `form:"os" json:"os"`

	// OpenKey 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取openKey值,查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	OpenKey *QueryOpenKey `form:"openKey,omitempty" json:"openKey,omitempty"`

	// Pf 可通过TVSDK XK5SDKManager.Instance.Pay.XK5SDK_GET_MIDAS_INFO()获取pf值, 查询首充状态/点券余额/购买点券商品/midas购买商品时必填
	Pf *QueryPf `form:"pf,omitempty" json:"pf,omitempty"`
}

// GetShopV31GameGameNoItemsParams defines parameters for GetShopV31GameGameNoItems.
type GetShopV31GameGameNoItemsParams struct {
	// Ids xk5平台的item id
	Ids QueryItemIds `form:"ids" json:"ids"`
}

// GetShopV31GameGameNoPurchasedParams defines parameters for GetShopV31GameGameNoPurchased.
type GetShopV31GameGameNoPurchasedParams struct {
	// PageNo page no at least 1, default:1
	PageNo *QueryParamNo `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize page size at least 1, default:20, max: 200
	PageSize *QueryParam `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// PostShopV31GameGameNoBulkBuyJSONRequestBody defines body for PostShopV31GameGameNoBulkBuy for application/json ContentType.
type PostShopV31GameGameNoBulkBuyJSONRequestBody = BulkBuyRequest

// PostShopV31GameGameNoCashBalanceJSONRequestBody defines body for PostShopV31GameGameNoCashBalance for application/json ContentType.
type PostShopV31GameGameNoCashBalanceJSONRequestBody = BalanceRequest

// PostShopV31GameGameNoProductProductIdBuyJSONRequestBody defines body for PostShopV31GameGameNoProductProductIdBuy for application/json ContentType.
type PostShopV31GameGameNoProductProductIdBuyJSONRequestBody = BuyRequest

// PutShopV31GameGameNoProductProductIdMidasBuyJSONRequestBody defines body for PutShopV31GameGameNoProductProductIdMidasBuy for application/json ContentType.
type PutShopV31GameGameNoProductProductIdMidasBuyJSONRequestBody = BuyRequest

// PostShopV31GameserverGameGameNoBulkBuyJSONRequestBody defines body for PostShopV31GameserverGameGameNoBulkBuy for application/json ContentType.
type PostShopV31GameserverGameGameNoBulkBuyJSONRequestBody = ServerBulkBuyRequest

// PostShopV31GameserverGameGameNoProductProductIdBuyJSONRequestBody defines body for PostShopV31GameserverGameGameNoProductProductIdBuy for application/json ContentType.
type PostShopV31GameserverGameGameNoProductProductIdBuyJSONRequestBody = ServerBuyRequest

// PutShopV31GameserverGameGameNoProductProductIdMidasBuyJSONRequestBody defines body for PutShopV31GameserverGameGameNoProductProductIdMidasBuy for application/json ContentType.
type PutShopV31GameserverGameGameNoProductProductIdMidasBuyJSONRequestBody = ServerBuyRequest

// PutShopV31GameserverGameGameNoResetRechargeJSONRequestBody defines body for PutShopV31GameserverGameGameNoResetRecharge for application/json ContentType.
type PutShopV31GameserverGameGameNoResetRechargeJSONRequestBody = ResetRechargeRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetShopV31GameGameNoBanners request
	GetShopV31GameGameNoBanners(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShopV31GameGameNoBulkBuyWithBody request with any body
	PostShopV31GameGameNoBulkBuyWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShopV31GameGameNoBulkBuy(ctx context.Context, gameNo PathGameNo, body PostShopV31GameGameNoBulkBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShopV31GameGameNoCashBalanceWithBody request with any body
	PostShopV31GameGameNoCashBalanceWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShopV31GameGameNoCashBalance(ctx context.Context, gameNo PathGameNo, body PostShopV31GameGameNoCashBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoCategoryCategoryCode request
	GetShopV31GameGameNoCategoryCategoryCode(ctx context.Context, gameNo PathGameNo, categoryCode PathCategoryCode, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoCategorys request
	GetShopV31GameGameNoCategorys(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoExhibitionExhibitionCode request
	GetShopV31GameGameNoExhibitionExhibitionCode(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchased request
	GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchased(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductId request
	GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductId(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, productId PathProductId, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProducts request
	GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProducts(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoExhibitions request
	GetShopV31GameGameNoExhibitions(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoItems request
	GetShopV31GameGameNoItems(ctx context.Context, gameNo PathGameNo, params *GetShopV31GameGameNoItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShopV31GameGameNoProductProductIdBuyWithBody request with any body
	PostShopV31GameGameNoProductProductIdBuyWithBody(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShopV31GameGameNoProductProductIdBuy(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PostShopV31GameGameNoProductProductIdBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutShopV31GameGameNoProductProductIdMidasBuyWithBody request with any body
	PutShopV31GameGameNoProductProductIdMidasBuyWithBody(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutShopV31GameGameNoProductProductIdMidasBuy(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PutShopV31GameGameNoProductProductIdMidasBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoPurchased request
	GetShopV31GameGameNoPurchased(ctx context.Context, gameNo PathGameNo, params *GetShopV31GameGameNoPurchasedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoPurchasedOrderOrderNo request
	GetShopV31GameGameNoPurchasedOrderOrderNo(ctx context.Context, gameNo PathGameNo, orderNo PathOrderNo, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCode request
	GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCode(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShopV31GameserverGameGameNoBulkBuyWithBody request with any body
	PostShopV31GameserverGameGameNoBulkBuyWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShopV31GameserverGameGameNoBulkBuy(ctx context.Context, gameNo PathGameNo, body PostShopV31GameserverGameGameNoBulkBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShopV31GameserverGameGameNoProductProductIdBuyWithBody request with any body
	PostShopV31GameserverGameGameNoProductProductIdBuyWithBody(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShopV31GameserverGameGameNoProductProductIdBuy(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PostShopV31GameserverGameGameNoProductProductIdBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithBody request with any body
	PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithBody(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutShopV31GameserverGameGameNoProductProductIdMidasBuy(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PutShopV31GameserverGameGameNoProductProductIdMidasBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutShopV31GameserverGameGameNoResetRechargeWithBody request with any body
	PutShopV31GameserverGameGameNoResetRechargeWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutShopV31GameserverGameGameNoResetRecharge(ctx context.Context, gameNo PathGameNo, body PutShopV31GameserverGameGameNoResetRechargeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetShopV31GameGameNoBanners(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoBannersRequest(c.Server, gameNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameGameNoBulkBuyWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameGameNoBulkBuyRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameGameNoBulkBuy(ctx context.Context, gameNo PathGameNo, body PostShopV31GameGameNoBulkBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameGameNoBulkBuyRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameGameNoCashBalanceWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameGameNoCashBalanceRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameGameNoCashBalance(ctx context.Context, gameNo PathGameNo, body PostShopV31GameGameNoCashBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameGameNoCashBalanceRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoCategoryCategoryCode(ctx context.Context, gameNo PathGameNo, categoryCode PathCategoryCode, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoCategoryCategoryCodeRequest(c.Server, gameNo, categoryCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoCategorys(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoCategorysRequest(c.Server, gameNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoExhibitionExhibitionCode(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoExhibitionExhibitionCodeRequest(c.Server, gameNo, exhibitionCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchased(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedRequest(c.Server, gameNo, exhibitionCode, channelCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductId(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, productId PathProductId, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdRequest(c.Server, gameNo, exhibitionCode, channelCode, productId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProducts(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsRequest(c.Server, gameNo, exhibitionCode, channelCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoExhibitions(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoExhibitionsRequest(c.Server, gameNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoItems(ctx context.Context, gameNo PathGameNo, params *GetShopV31GameGameNoItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoItemsRequest(c.Server, gameNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameGameNoProductProductIdBuyWithBody(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameGameNoProductProductIdBuyRequestWithBody(c.Server, gameNo, productId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameGameNoProductProductIdBuy(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PostShopV31GameGameNoProductProductIdBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameGameNoProductProductIdBuyRequest(c.Server, gameNo, productId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutShopV31GameGameNoProductProductIdMidasBuyWithBody(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutShopV31GameGameNoProductProductIdMidasBuyRequestWithBody(c.Server, gameNo, productId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutShopV31GameGameNoProductProductIdMidasBuy(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PutShopV31GameGameNoProductProductIdMidasBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutShopV31GameGameNoProductProductIdMidasBuyRequest(c.Server, gameNo, productId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoPurchased(ctx context.Context, gameNo PathGameNo, params *GetShopV31GameGameNoPurchasedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoPurchasedRequest(c.Server, gameNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoPurchasedOrderOrderNo(ctx context.Context, gameNo PathGameNo, orderNo PathOrderNo, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoPurchasedOrderOrderNoRequest(c.Server, gameNo, orderNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCode(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeRequest(c.Server, gameNo, exhibitionCode, channelCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameserverGameGameNoBulkBuyWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameserverGameGameNoBulkBuyRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameserverGameGameNoBulkBuy(ctx context.Context, gameNo PathGameNo, body PostShopV31GameserverGameGameNoBulkBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameserverGameGameNoBulkBuyRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameserverGameGameNoProductProductIdBuyWithBody(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameserverGameGameNoProductProductIdBuyRequestWithBody(c.Server, gameNo, productId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopV31GameserverGameGameNoProductProductIdBuy(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PostShopV31GameserverGameGameNoProductProductIdBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopV31GameserverGameGameNoProductProductIdBuyRequest(c.Server, gameNo, productId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithBody(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutShopV31GameserverGameGameNoProductProductIdMidasBuyRequestWithBody(c.Server, gameNo, productId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutShopV31GameserverGameGameNoProductProductIdMidasBuy(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PutShopV31GameserverGameGameNoProductProductIdMidasBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutShopV31GameserverGameGameNoProductProductIdMidasBuyRequest(c.Server, gameNo, productId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutShopV31GameserverGameGameNoResetRechargeWithBody(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutShopV31GameserverGameGameNoResetRechargeRequestWithBody(c.Server, gameNo, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutShopV31GameserverGameGameNoResetRecharge(ctx context.Context, gameNo PathGameNo, body PutShopV31GameserverGameGameNoResetRechargeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutShopV31GameserverGameGameNoResetRechargeRequest(c.Server, gameNo, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetShopV31GameGameNoBannersRequest generates requests for GetShopV31GameGameNoBanners
func NewGetShopV31GameGameNoBannersRequest(server string, gameNo PathGameNo) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/banners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostShopV31GameGameNoBulkBuyRequest calls the generic PostShopV31GameGameNoBulkBuy builder with application/json body
func NewPostShopV31GameGameNoBulkBuyRequest(server string, gameNo PathGameNo, body PostShopV31GameGameNoBulkBuyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShopV31GameGameNoBulkBuyRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostShopV31GameGameNoBulkBuyRequestWithBody generates requests for PostShopV31GameGameNoBulkBuy with any type of body
func NewPostShopV31GameGameNoBulkBuyRequestWithBody(server string, gameNo PathGameNo, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/bulk-buy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostShopV31GameGameNoCashBalanceRequest calls the generic PostShopV31GameGameNoCashBalance builder with application/json body
func NewPostShopV31GameGameNoCashBalanceRequest(server string, gameNo PathGameNo, body PostShopV31GameGameNoCashBalanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShopV31GameGameNoCashBalanceRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostShopV31GameGameNoCashBalanceRequestWithBody generates requests for PostShopV31GameGameNoCashBalance with any type of body
func NewPostShopV31GameGameNoCashBalanceRequestWithBody(server string, gameNo PathGameNo, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/cash/balance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShopV31GameGameNoCategoryCategoryCodeRequest generates requests for GetShopV31GameGameNoCategoryCategoryCode
func NewGetShopV31GameGameNoCategoryCategoryCodeRequest(server string, gameNo PathGameNo, categoryCode PathCategoryCode) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryCode", runtime.ParamLocationPath, categoryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/category/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoCategorysRequest generates requests for GetShopV31GameGameNoCategorys
func NewGetShopV31GameGameNoCategorysRequest(server string, gameNo PathGameNo) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/categorys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoExhibitionExhibitionCodeRequest generates requests for GetShopV31GameGameNoExhibitionExhibitionCode
func NewGetShopV31GameGameNoExhibitionExhibitionCodeRequest(server string, gameNo PathGameNo, exhibitionCode PathExhibitionCode) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exhibitionCode", runtime.ParamLocationPath, exhibitionCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/exhibition/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedRequest generates requests for GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchased
func NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedRequest(server string, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exhibitionCode", runtime.ParamLocationPath, exhibitionCode)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "channelCode", runtime.ParamLocationPath, channelCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/exhibition/%s/channel/%s/limit-purchased", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdRequest generates requests for GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductId
func NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdRequest(server string, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, productId PathProductId, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exhibitionCode", runtime.ParamLocationPath, exhibitionCode)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "channelCode", runtime.ParamLocationPath, channelCode)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/exhibition/%s/channel/%s/product/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, params.Os); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OpenKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openKey", runtime.ParamLocationQuery, *params.OpenKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pf != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pf", runtime.ParamLocationQuery, *params.Pf); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsRequest generates requests for GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProducts
func NewGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsRequest(server string, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exhibitionCode", runtime.ParamLocationPath, exhibitionCode)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "channelCode", runtime.ParamLocationPath, channelCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/exhibition/%s/channel/%s/products", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Genders != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genders", runtime.ParamLocationQuery, *params.Genders); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productCategory", runtime.ParamLocationQuery, *params.ProductCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CashType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cashType", runtime.ParamLocationQuery, *params.CashType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorting != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorting", runtime.ParamLocationQuery, *params.Sorting); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, params.Os); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OpenKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openKey", runtime.ParamLocationQuery, *params.OpenKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pf != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pf", runtime.ParamLocationQuery, *params.Pf); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoExhibitionsRequest generates requests for GetShopV31GameGameNoExhibitions
func NewGetShopV31GameGameNoExhibitionsRequest(server string, gameNo PathGameNo) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/exhibitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoItemsRequest generates requests for GetShopV31GameGameNoItems
func NewGetShopV31GameGameNoItemsRequest(server string, gameNo PathGameNo, params *GetShopV31GameGameNoItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostShopV31GameGameNoProductProductIdBuyRequest calls the generic PostShopV31GameGameNoProductProductIdBuy builder with application/json body
func NewPostShopV31GameGameNoProductProductIdBuyRequest(server string, gameNo PathGameNo, productId PathProductId, body PostShopV31GameGameNoProductProductIdBuyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShopV31GameGameNoProductProductIdBuyRequestWithBody(server, gameNo, productId, "application/json", bodyReader)
}

// NewPostShopV31GameGameNoProductProductIdBuyRequestWithBody generates requests for PostShopV31GameGameNoProductProductIdBuy with any type of body
func NewPostShopV31GameGameNoProductProductIdBuyRequestWithBody(server string, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/product/%s/buy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutShopV31GameGameNoProductProductIdMidasBuyRequest calls the generic PutShopV31GameGameNoProductProductIdMidasBuy builder with application/json body
func NewPutShopV31GameGameNoProductProductIdMidasBuyRequest(server string, gameNo PathGameNo, productId PathProductId, body PutShopV31GameGameNoProductProductIdMidasBuyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutShopV31GameGameNoProductProductIdMidasBuyRequestWithBody(server, gameNo, productId, "application/json", bodyReader)
}

// NewPutShopV31GameGameNoProductProductIdMidasBuyRequestWithBody generates requests for PutShopV31GameGameNoProductProductIdMidasBuy with any type of body
func NewPutShopV31GameGameNoProductProductIdMidasBuyRequestWithBody(server string, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/product/%s/midas/buy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShopV31GameGameNoPurchasedRequest generates requests for GetShopV31GameGameNoPurchased
func NewGetShopV31GameGameNoPurchasedRequest(server string, gameNo PathGameNo, params *GetShopV31GameGameNoPurchasedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/purchased", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoPurchasedOrderOrderNoRequest generates requests for GetShopV31GameGameNoPurchasedOrderOrderNo
func NewGetShopV31GameGameNoPurchasedOrderOrderNoRequest(server string, gameNo PathGameNo, orderNo PathOrderNo) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderNo", runtime.ParamLocationPath, orderNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/purchased/order/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeRequest generates requests for GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCode
func NewGetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeRequest(server string, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "exhibitionCode", runtime.ParamLocationPath, exhibitionCode)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "channelCode", runtime.ParamLocationPath, channelCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/game/%s/version/exhibition/%s/channel/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostShopV31GameserverGameGameNoBulkBuyRequest calls the generic PostShopV31GameserverGameGameNoBulkBuy builder with application/json body
func NewPostShopV31GameserverGameGameNoBulkBuyRequest(server string, gameNo PathGameNo, body PostShopV31GameserverGameGameNoBulkBuyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShopV31GameserverGameGameNoBulkBuyRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPostShopV31GameserverGameGameNoBulkBuyRequestWithBody generates requests for PostShopV31GameserverGameGameNoBulkBuy with any type of body
func NewPostShopV31GameserverGameGameNoBulkBuyRequestWithBody(server string, gameNo PathGameNo, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/gameserver/game/%s/bulk-buy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostShopV31GameserverGameGameNoProductProductIdBuyRequest calls the generic PostShopV31GameserverGameGameNoProductProductIdBuy builder with application/json body
func NewPostShopV31GameserverGameGameNoProductProductIdBuyRequest(server string, gameNo PathGameNo, productId PathProductId, body PostShopV31GameserverGameGameNoProductProductIdBuyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShopV31GameserverGameGameNoProductProductIdBuyRequestWithBody(server, gameNo, productId, "application/json", bodyReader)
}

// NewPostShopV31GameserverGameGameNoProductProductIdBuyRequestWithBody generates requests for PostShopV31GameserverGameGameNoProductProductIdBuy with any type of body
func NewPostShopV31GameserverGameGameNoProductProductIdBuyRequestWithBody(server string, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/gameserver/game/%s/product/%s/buy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutShopV31GameserverGameGameNoProductProductIdMidasBuyRequest calls the generic PutShopV31GameserverGameGameNoProductProductIdMidasBuy builder with application/json body
func NewPutShopV31GameserverGameGameNoProductProductIdMidasBuyRequest(server string, gameNo PathGameNo, productId PathProductId, body PutShopV31GameserverGameGameNoProductProductIdMidasBuyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutShopV31GameserverGameGameNoProductProductIdMidasBuyRequestWithBody(server, gameNo, productId, "application/json", bodyReader)
}

// NewPutShopV31GameserverGameGameNoProductProductIdMidasBuyRequestWithBody generates requests for PutShopV31GameserverGameGameNoProductProductIdMidasBuy with any type of body
func NewPutShopV31GameserverGameGameNoProductProductIdMidasBuyRequestWithBody(server string, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/gameserver/game/%s/product/%s/midas/buy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutShopV31GameserverGameGameNoResetRechargeRequest calls the generic PutShopV31GameserverGameGameNoResetRecharge builder with application/json body
func NewPutShopV31GameserverGameGameNoResetRechargeRequest(server string, gameNo PathGameNo, body PutShopV31GameserverGameGameNoResetRechargeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutShopV31GameserverGameGameNoResetRechargeRequestWithBody(server, gameNo, "application/json", bodyReader)
}

// NewPutShopV31GameserverGameGameNoResetRechargeRequestWithBody generates requests for PutShopV31GameserverGameGameNoResetRecharge with any type of body
func NewPutShopV31GameserverGameGameNoResetRechargeRequestWithBody(server string, gameNo PathGameNo, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameNo", runtime.ParamLocationPath, gameNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shop/v3.1/gameserver/game/%s/reset-recharge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetShopV31GameGameNoBannersWithResponse request
	GetShopV31GameGameNoBannersWithResponse(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoBannersResponse, error)

	// PostShopV31GameGameNoBulkBuyWithBodyWithResponse request with any body
	PostShopV31GameGameNoBulkBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoBulkBuyResponse, error)

	PostShopV31GameGameNoBulkBuyWithResponse(ctx context.Context, gameNo PathGameNo, body PostShopV31GameGameNoBulkBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoBulkBuyResponse, error)

	// PostShopV31GameGameNoCashBalanceWithBodyWithResponse request with any body
	PostShopV31GameGameNoCashBalanceWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoCashBalanceResponse, error)

	PostShopV31GameGameNoCashBalanceWithResponse(ctx context.Context, gameNo PathGameNo, body PostShopV31GameGameNoCashBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoCashBalanceResponse, error)

	// GetShopV31GameGameNoCategoryCategoryCodeWithResponse request
	GetShopV31GameGameNoCategoryCategoryCodeWithResponse(ctx context.Context, gameNo PathGameNo, categoryCode PathCategoryCode, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoCategoryCategoryCodeResponse, error)

	// GetShopV31GameGameNoCategorysWithResponse request
	GetShopV31GameGameNoCategorysWithResponse(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoCategorysResponse, error)

	// GetShopV31GameGameNoExhibitionExhibitionCodeWithResponse request
	GetShopV31GameGameNoExhibitionExhibitionCodeWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionExhibitionCodeResponse, error)

	// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedWithResponse request
	GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse, error)

	// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdWithResponse request
	GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, productId PathProductId, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdParams, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse, error)

	// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsWithResponse request
	GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsParams, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse, error)

	// GetShopV31GameGameNoExhibitionsWithResponse request
	GetShopV31GameGameNoExhibitionsWithResponse(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionsResponse, error)

	// GetShopV31GameGameNoItemsWithResponse request
	GetShopV31GameGameNoItemsWithResponse(ctx context.Context, gameNo PathGameNo, params *GetShopV31GameGameNoItemsParams, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoItemsResponse, error)

	// PostShopV31GameGameNoProductProductIdBuyWithBodyWithResponse request with any body
	PostShopV31GameGameNoProductProductIdBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoProductProductIdBuyResponse, error)

	PostShopV31GameGameNoProductProductIdBuyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PostShopV31GameGameNoProductProductIdBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoProductProductIdBuyResponse, error)

	// PutShopV31GameGameNoProductProductIdMidasBuyWithBodyWithResponse request with any body
	PutShopV31GameGameNoProductProductIdMidasBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutShopV31GameGameNoProductProductIdMidasBuyResponse, error)

	PutShopV31GameGameNoProductProductIdMidasBuyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PutShopV31GameGameNoProductProductIdMidasBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutShopV31GameGameNoProductProductIdMidasBuyResponse, error)

	// GetShopV31GameGameNoPurchasedWithResponse request
	GetShopV31GameGameNoPurchasedWithResponse(ctx context.Context, gameNo PathGameNo, params *GetShopV31GameGameNoPurchasedParams, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoPurchasedResponse, error)

	// GetShopV31GameGameNoPurchasedOrderOrderNoWithResponse request
	GetShopV31GameGameNoPurchasedOrderOrderNoWithResponse(ctx context.Context, gameNo PathGameNo, orderNo PathOrderNo, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoPurchasedOrderOrderNoResponse, error)

	// GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeWithResponse request
	GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse, error)

	// PostShopV31GameserverGameGameNoBulkBuyWithBodyWithResponse request with any body
	PostShopV31GameserverGameGameNoBulkBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameserverGameGameNoBulkBuyResponse, error)

	PostShopV31GameserverGameGameNoBulkBuyWithResponse(ctx context.Context, gameNo PathGameNo, body PostShopV31GameserverGameGameNoBulkBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameserverGameGameNoBulkBuyResponse, error)

	// PostShopV31GameserverGameGameNoProductProductIdBuyWithBodyWithResponse request with any body
	PostShopV31GameserverGameGameNoProductProductIdBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameserverGameGameNoProductProductIdBuyResponse, error)

	PostShopV31GameserverGameGameNoProductProductIdBuyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PostShopV31GameserverGameGameNoProductProductIdBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameserverGameGameNoProductProductIdBuyResponse, error)

	// PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithBodyWithResponse request with any body
	PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse, error)

	PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PutShopV31GameserverGameGameNoProductProductIdMidasBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse, error)

	// PutShopV31GameserverGameGameNoResetRechargeWithBodyWithResponse request with any body
	PutShopV31GameserverGameGameNoResetRechargeWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutShopV31GameserverGameGameNoResetRechargeResponse, error)

	PutShopV31GameserverGameGameNoResetRechargeWithResponse(ctx context.Context, gameNo PathGameNo, body PutShopV31GameserverGameGameNoResetRechargeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutShopV31GameserverGameGameNoResetRechargeResponse, error)
}

type GetShopV31GameGameNoBannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BannerResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoBannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoBannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShopV31GameGameNoBulkBuyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkBuyResponse
}

// Status returns HTTPResponse.Status
func (r PostShopV31GameGameNoBulkBuyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShopV31GameGameNoBulkBuyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShopV31GameGameNoCashBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceResponse
}

// Status returns HTTPResponse.Status
func (r PostShopV31GameGameNoCashBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShopV31GameGameNoCashBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoCategoryCategoryCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductCategoryResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoCategoryCategoryCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoCategoryCategoryCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoCategorysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductCategoryResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoCategorysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoCategorysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoExhibitionExhibitionCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExhibitionResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoExhibitionExhibitionCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoExhibitionExhibitionCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LimitPurchasedResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductDetailResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoExhibitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExhibitionResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoExhibitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoExhibitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemListResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShopV31GameGameNoProductProductIdBuyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductBuyResponse
}

// Status returns HTTPResponse.Status
func (r PostShopV31GameGameNoProductProductIdBuyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShopV31GameGameNoProductProductIdBuyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutShopV31GameGameNoProductProductIdMidasBuyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MidasBuyResponse
}

// Status returns HTTPResponse.Status
func (r PutShopV31GameGameNoProductProductIdMidasBuyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutShopV31GameGameNoProductProductIdMidasBuyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoPurchasedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchasedResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoPurchasedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoPurchasedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoPurchasedOrderOrderNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchasedDetailResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoPurchasedOrderOrderNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoPurchasedOrderOrderNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionResponse
}

// Status returns HTTPResponse.Status
func (r GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShopV31GameserverGameGameNoBulkBuyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkBuyResponse
}

// Status returns HTTPResponse.Status
func (r PostShopV31GameserverGameGameNoBulkBuyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShopV31GameserverGameGameNoBulkBuyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShopV31GameserverGameGameNoProductProductIdBuyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductBuyResponse
}

// Status returns HTTPResponse.Status
func (r PostShopV31GameserverGameGameNoProductProductIdBuyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShopV31GameserverGameGameNoProductProductIdBuyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MidasBuyResponse
}

// Status returns HTTPResponse.Status
func (r PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutShopV31GameserverGameGameNoResetRechargeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataResult
}

// Status returns HTTPResponse.Status
func (r PutShopV31GameserverGameGameNoResetRechargeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutShopV31GameserverGameGameNoResetRechargeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetShopV31GameGameNoBannersWithResponse request returning *GetShopV31GameGameNoBannersResponse
func (c *ClientWithResponses) GetShopV31GameGameNoBannersWithResponse(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoBannersResponse, error) {
	rsp, err := c.GetShopV31GameGameNoBanners(ctx, gameNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoBannersResponse(rsp)
}

// PostShopV31GameGameNoBulkBuyWithBodyWithResponse request with arbitrary body returning *PostShopV31GameGameNoBulkBuyResponse
func (c *ClientWithResponses) PostShopV31GameGameNoBulkBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoBulkBuyResponse, error) {
	rsp, err := c.PostShopV31GameGameNoBulkBuyWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameGameNoBulkBuyResponse(rsp)
}

func (c *ClientWithResponses) PostShopV31GameGameNoBulkBuyWithResponse(ctx context.Context, gameNo PathGameNo, body PostShopV31GameGameNoBulkBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoBulkBuyResponse, error) {
	rsp, err := c.PostShopV31GameGameNoBulkBuy(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameGameNoBulkBuyResponse(rsp)
}

// PostShopV31GameGameNoCashBalanceWithBodyWithResponse request with arbitrary body returning *PostShopV31GameGameNoCashBalanceResponse
func (c *ClientWithResponses) PostShopV31GameGameNoCashBalanceWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoCashBalanceResponse, error) {
	rsp, err := c.PostShopV31GameGameNoCashBalanceWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameGameNoCashBalanceResponse(rsp)
}

func (c *ClientWithResponses) PostShopV31GameGameNoCashBalanceWithResponse(ctx context.Context, gameNo PathGameNo, body PostShopV31GameGameNoCashBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoCashBalanceResponse, error) {
	rsp, err := c.PostShopV31GameGameNoCashBalance(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameGameNoCashBalanceResponse(rsp)
}

// GetShopV31GameGameNoCategoryCategoryCodeWithResponse request returning *GetShopV31GameGameNoCategoryCategoryCodeResponse
func (c *ClientWithResponses) GetShopV31GameGameNoCategoryCategoryCodeWithResponse(ctx context.Context, gameNo PathGameNo, categoryCode PathCategoryCode, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoCategoryCategoryCodeResponse, error) {
	rsp, err := c.GetShopV31GameGameNoCategoryCategoryCode(ctx, gameNo, categoryCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoCategoryCategoryCodeResponse(rsp)
}

// GetShopV31GameGameNoCategorysWithResponse request returning *GetShopV31GameGameNoCategorysResponse
func (c *ClientWithResponses) GetShopV31GameGameNoCategorysWithResponse(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoCategorysResponse, error) {
	rsp, err := c.GetShopV31GameGameNoCategorys(ctx, gameNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoCategorysResponse(rsp)
}

// GetShopV31GameGameNoExhibitionExhibitionCodeWithResponse request returning *GetShopV31GameGameNoExhibitionExhibitionCodeResponse
func (c *ClientWithResponses) GetShopV31GameGameNoExhibitionExhibitionCodeWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionExhibitionCodeResponse, error) {
	rsp, err := c.GetShopV31GameGameNoExhibitionExhibitionCode(ctx, gameNo, exhibitionCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoExhibitionExhibitionCodeResponse(rsp)
}

// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedWithResponse request returning *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse
func (c *ClientWithResponses) GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse, error) {
	rsp, err := c.GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchased(ctx, gameNo, exhibitionCode, channelCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse(rsp)
}

// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdWithResponse request returning *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse
func (c *ClientWithResponses) GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, productId PathProductId, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdParams, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse, error) {
	rsp, err := c.GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductId(ctx, gameNo, exhibitionCode, channelCode, productId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse(rsp)
}

// GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsWithResponse request returning *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse
func (c *ClientWithResponses) GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, params *GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsParams, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse, error) {
	rsp, err := c.GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProducts(ctx, gameNo, exhibitionCode, channelCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse(rsp)
}

// GetShopV31GameGameNoExhibitionsWithResponse request returning *GetShopV31GameGameNoExhibitionsResponse
func (c *ClientWithResponses) GetShopV31GameGameNoExhibitionsWithResponse(ctx context.Context, gameNo PathGameNo, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoExhibitionsResponse, error) {
	rsp, err := c.GetShopV31GameGameNoExhibitions(ctx, gameNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoExhibitionsResponse(rsp)
}

// GetShopV31GameGameNoItemsWithResponse request returning *GetShopV31GameGameNoItemsResponse
func (c *ClientWithResponses) GetShopV31GameGameNoItemsWithResponse(ctx context.Context, gameNo PathGameNo, params *GetShopV31GameGameNoItemsParams, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoItemsResponse, error) {
	rsp, err := c.GetShopV31GameGameNoItems(ctx, gameNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoItemsResponse(rsp)
}

// PostShopV31GameGameNoProductProductIdBuyWithBodyWithResponse request with arbitrary body returning *PostShopV31GameGameNoProductProductIdBuyResponse
func (c *ClientWithResponses) PostShopV31GameGameNoProductProductIdBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoProductProductIdBuyResponse, error) {
	rsp, err := c.PostShopV31GameGameNoProductProductIdBuyWithBody(ctx, gameNo, productId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameGameNoProductProductIdBuyResponse(rsp)
}

func (c *ClientWithResponses) PostShopV31GameGameNoProductProductIdBuyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PostShopV31GameGameNoProductProductIdBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameGameNoProductProductIdBuyResponse, error) {
	rsp, err := c.PostShopV31GameGameNoProductProductIdBuy(ctx, gameNo, productId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameGameNoProductProductIdBuyResponse(rsp)
}

// PutShopV31GameGameNoProductProductIdMidasBuyWithBodyWithResponse request with arbitrary body returning *PutShopV31GameGameNoProductProductIdMidasBuyResponse
func (c *ClientWithResponses) PutShopV31GameGameNoProductProductIdMidasBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutShopV31GameGameNoProductProductIdMidasBuyResponse, error) {
	rsp, err := c.PutShopV31GameGameNoProductProductIdMidasBuyWithBody(ctx, gameNo, productId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutShopV31GameGameNoProductProductIdMidasBuyResponse(rsp)
}

func (c *ClientWithResponses) PutShopV31GameGameNoProductProductIdMidasBuyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PutShopV31GameGameNoProductProductIdMidasBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutShopV31GameGameNoProductProductIdMidasBuyResponse, error) {
	rsp, err := c.PutShopV31GameGameNoProductProductIdMidasBuy(ctx, gameNo, productId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutShopV31GameGameNoProductProductIdMidasBuyResponse(rsp)
}

// GetShopV31GameGameNoPurchasedWithResponse request returning *GetShopV31GameGameNoPurchasedResponse
func (c *ClientWithResponses) GetShopV31GameGameNoPurchasedWithResponse(ctx context.Context, gameNo PathGameNo, params *GetShopV31GameGameNoPurchasedParams, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoPurchasedResponse, error) {
	rsp, err := c.GetShopV31GameGameNoPurchased(ctx, gameNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoPurchasedResponse(rsp)
}

// GetShopV31GameGameNoPurchasedOrderOrderNoWithResponse request returning *GetShopV31GameGameNoPurchasedOrderOrderNoResponse
func (c *ClientWithResponses) GetShopV31GameGameNoPurchasedOrderOrderNoWithResponse(ctx context.Context, gameNo PathGameNo, orderNo PathOrderNo, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoPurchasedOrderOrderNoResponse, error) {
	rsp, err := c.GetShopV31GameGameNoPurchasedOrderOrderNo(ctx, gameNo, orderNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoPurchasedOrderOrderNoResponse(rsp)
}

// GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeWithResponse request returning *GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse
func (c *ClientWithResponses) GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeWithResponse(ctx context.Context, gameNo PathGameNo, exhibitionCode PathExhibitionCode, channelCode PathChannelCode, reqEditors ...RequestEditorFn) (*GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse, error) {
	rsp, err := c.GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCode(ctx, gameNo, exhibitionCode, channelCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse(rsp)
}

// PostShopV31GameserverGameGameNoBulkBuyWithBodyWithResponse request with arbitrary body returning *PostShopV31GameserverGameGameNoBulkBuyResponse
func (c *ClientWithResponses) PostShopV31GameserverGameGameNoBulkBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameserverGameGameNoBulkBuyResponse, error) {
	rsp, err := c.PostShopV31GameserverGameGameNoBulkBuyWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameserverGameGameNoBulkBuyResponse(rsp)
}

func (c *ClientWithResponses) PostShopV31GameserverGameGameNoBulkBuyWithResponse(ctx context.Context, gameNo PathGameNo, body PostShopV31GameserverGameGameNoBulkBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameserverGameGameNoBulkBuyResponse, error) {
	rsp, err := c.PostShopV31GameserverGameGameNoBulkBuy(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameserverGameGameNoBulkBuyResponse(rsp)
}

// PostShopV31GameserverGameGameNoProductProductIdBuyWithBodyWithResponse request with arbitrary body returning *PostShopV31GameserverGameGameNoProductProductIdBuyResponse
func (c *ClientWithResponses) PostShopV31GameserverGameGameNoProductProductIdBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopV31GameserverGameGameNoProductProductIdBuyResponse, error) {
	rsp, err := c.PostShopV31GameserverGameGameNoProductProductIdBuyWithBody(ctx, gameNo, productId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameserverGameGameNoProductProductIdBuyResponse(rsp)
}

func (c *ClientWithResponses) PostShopV31GameserverGameGameNoProductProductIdBuyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PostShopV31GameserverGameGameNoProductProductIdBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopV31GameserverGameGameNoProductProductIdBuyResponse, error) {
	rsp, err := c.PostShopV31GameserverGameGameNoProductProductIdBuy(ctx, gameNo, productId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopV31GameserverGameGameNoProductProductIdBuyResponse(rsp)
}

// PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithBodyWithResponse request with arbitrary body returning *PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse
func (c *ClientWithResponses) PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse, error) {
	rsp, err := c.PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithBody(ctx, gameNo, productId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse(rsp)
}

func (c *ClientWithResponses) PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithResponse(ctx context.Context, gameNo PathGameNo, productId PathProductId, body PutShopV31GameserverGameGameNoProductProductIdMidasBuyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse, error) {
	rsp, err := c.PutShopV31GameserverGameGameNoProductProductIdMidasBuy(ctx, gameNo, productId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse(rsp)
}

// PutShopV31GameserverGameGameNoResetRechargeWithBodyWithResponse request with arbitrary body returning *PutShopV31GameserverGameGameNoResetRechargeResponse
func (c *ClientWithResponses) PutShopV31GameserverGameGameNoResetRechargeWithBodyWithResponse(ctx context.Context, gameNo PathGameNo, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutShopV31GameserverGameGameNoResetRechargeResponse, error) {
	rsp, err := c.PutShopV31GameserverGameGameNoResetRechargeWithBody(ctx, gameNo, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutShopV31GameserverGameGameNoResetRechargeResponse(rsp)
}

func (c *ClientWithResponses) PutShopV31GameserverGameGameNoResetRechargeWithResponse(ctx context.Context, gameNo PathGameNo, body PutShopV31GameserverGameGameNoResetRechargeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutShopV31GameserverGameGameNoResetRechargeResponse, error) {
	rsp, err := c.PutShopV31GameserverGameGameNoResetRecharge(ctx, gameNo, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutShopV31GameserverGameGameNoResetRechargeResponse(rsp)
}

// ParseGetShopV31GameGameNoBannersResponse parses an HTTP response from a GetShopV31GameGameNoBannersWithResponse call
func ParseGetShopV31GameGameNoBannersResponse(rsp *http.Response) (*GetShopV31GameGameNoBannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoBannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BannerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShopV31GameGameNoBulkBuyResponse parses an HTTP response from a PostShopV31GameGameNoBulkBuyWithResponse call
func ParsePostShopV31GameGameNoBulkBuyResponse(rsp *http.Response) (*PostShopV31GameGameNoBulkBuyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShopV31GameGameNoBulkBuyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkBuyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShopV31GameGameNoCashBalanceResponse parses an HTTP response from a PostShopV31GameGameNoCashBalanceWithResponse call
func ParsePostShopV31GameGameNoCashBalanceResponse(rsp *http.Response) (*PostShopV31GameGameNoCashBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShopV31GameGameNoCashBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoCategoryCategoryCodeResponse parses an HTTP response from a GetShopV31GameGameNoCategoryCategoryCodeWithResponse call
func ParseGetShopV31GameGameNoCategoryCategoryCodeResponse(rsp *http.Response) (*GetShopV31GameGameNoCategoryCategoryCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoCategoryCategoryCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoCategorysResponse parses an HTTP response from a GetShopV31GameGameNoCategorysWithResponse call
func ParseGetShopV31GameGameNoCategorysResponse(rsp *http.Response) (*GetShopV31GameGameNoCategorysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoCategorysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoExhibitionExhibitionCodeResponse parses an HTTP response from a GetShopV31GameGameNoExhibitionExhibitionCodeWithResponse call
func ParseGetShopV31GameGameNoExhibitionExhibitionCodeResponse(rsp *http.Response) (*GetShopV31GameGameNoExhibitionExhibitionCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoExhibitionExhibitionCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExhibitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse parses an HTTP response from a GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedWithResponse call
func ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse(rsp *http.Response) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeLimitPurchasedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LimitPurchasedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse parses an HTTP response from a GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdWithResponse call
func ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse(rsp *http.Response) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductProductIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse parses an HTTP response from a GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsWithResponse call
func ParseGetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse(rsp *http.Response) (*GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoExhibitionExhibitionCodeChannelChannelCodeProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoExhibitionsResponse parses an HTTP response from a GetShopV31GameGameNoExhibitionsWithResponse call
func ParseGetShopV31GameGameNoExhibitionsResponse(rsp *http.Response) (*GetShopV31GameGameNoExhibitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoExhibitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExhibitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoItemsResponse parses an HTTP response from a GetShopV31GameGameNoItemsWithResponse call
func ParseGetShopV31GameGameNoItemsResponse(rsp *http.Response) (*GetShopV31GameGameNoItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShopV31GameGameNoProductProductIdBuyResponse parses an HTTP response from a PostShopV31GameGameNoProductProductIdBuyWithResponse call
func ParsePostShopV31GameGameNoProductProductIdBuyResponse(rsp *http.Response) (*PostShopV31GameGameNoProductProductIdBuyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShopV31GameGameNoProductProductIdBuyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductBuyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutShopV31GameGameNoProductProductIdMidasBuyResponse parses an HTTP response from a PutShopV31GameGameNoProductProductIdMidasBuyWithResponse call
func ParsePutShopV31GameGameNoProductProductIdMidasBuyResponse(rsp *http.Response) (*PutShopV31GameGameNoProductProductIdMidasBuyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutShopV31GameGameNoProductProductIdMidasBuyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MidasBuyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoPurchasedResponse parses an HTTP response from a GetShopV31GameGameNoPurchasedWithResponse call
func ParseGetShopV31GameGameNoPurchasedResponse(rsp *http.Response) (*GetShopV31GameGameNoPurchasedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoPurchasedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchasedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoPurchasedOrderOrderNoResponse parses an HTTP response from a GetShopV31GameGameNoPurchasedOrderOrderNoWithResponse call
func ParseGetShopV31GameGameNoPurchasedOrderOrderNoResponse(rsp *http.Response) (*GetShopV31GameGameNoPurchasedOrderOrderNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoPurchasedOrderOrderNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchasedDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse parses an HTTP response from a GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeWithResponse call
func ParseGetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse(rsp *http.Response) (*GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopV31GameGameNoVersionExhibitionExhibitionCodeChannelChannelCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShopV31GameserverGameGameNoBulkBuyResponse parses an HTTP response from a PostShopV31GameserverGameGameNoBulkBuyWithResponse call
func ParsePostShopV31GameserverGameGameNoBulkBuyResponse(rsp *http.Response) (*PostShopV31GameserverGameGameNoBulkBuyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShopV31GameserverGameGameNoBulkBuyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkBuyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShopV31GameserverGameGameNoProductProductIdBuyResponse parses an HTTP response from a PostShopV31GameserverGameGameNoProductProductIdBuyWithResponse call
func ParsePostShopV31GameserverGameGameNoProductProductIdBuyResponse(rsp *http.Response) (*PostShopV31GameserverGameGameNoProductProductIdBuyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShopV31GameserverGameGameNoProductProductIdBuyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductBuyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse parses an HTTP response from a PutShopV31GameserverGameGameNoProductProductIdMidasBuyWithResponse call
func ParsePutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse(rsp *http.Response) (*PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutShopV31GameserverGameGameNoProductProductIdMidasBuyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MidasBuyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutShopV31GameserverGameGameNoResetRechargeResponse parses an HTTP response from a PutShopV31GameserverGameGameNoResetRechargeWithResponse call
func ParsePutShopV31GameserverGameGameNoResetRechargeResponse(rsp *http.Response) (*PutShopV31GameserverGameGameNoResetRechargeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutShopV31GameserverGameGameNoResetRechargeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
