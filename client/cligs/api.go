// Package cligs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package cligs

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	AuthKeyScopes = "AuthKey.Scopes"
)

// Assets 资源
type Assets struct {
	// Filename 文件名称
	Filename *string `json:"filename,omitempty"`

	// Filesize 文件大小:byte
	Filesize *int `json:"filesize,omitempty"`

	// IsDefault 是否默认下载
	IsDefault *bool `json:"isDefault,omitempty"`

	// Md5 md5值
	Md5 *string `json:"md5,omitempty"`

	// Name asset name, e.g. XK5 Windows Installer, XK5 Windows noninstaller, XK5 macOS Universal, etc..
	Name *string `json:"name,omitempty"`

	// Type atype, e.g. x86, x64, arm, arm86, ipa
	Type *string `json:"type,omitempty"`
}

// BaseResult 基础响应对象
type BaseResult struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// Company 公司
type Company struct {
	// CompanyName 公司名称
	CompanyName string `json:"companyName"`

	// Contact 联系方式
	Contact string `json:"contact"`

	// CreatedAt 创建时间
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id 公司id
	Id *int `json:"id,omitempty"`

	// Introduction 公司简介
	Introduction string  `json:"introduction"`
	MainUrl      *string `json:"mainUrl,omitempty"`

	// Status 状态
	// -1:禁用
	// 0:审核中
	// 1:审核通过
	Status *int `json:"status,omitempty"`

	// UpdatedAt 修改时间
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UpdatedBy 创建/更新者
	UpdatedBy int `json:"updatedBy"`
}

// CompanyDataPage 公司分页数据
type CompanyDataPage struct {
	List *[]Company `json:"list,omitempty"`

	// PageNo 页码
	PageNo *int `json:"pageNo,omitempty"`

	// PageSize 数量
	PageSize *int `json:"pageSize,omitempty"`

	// Total 总数量
	Total *int `json:"total,omitempty"`

	// TotalPages 总页数
	TotalPages *int `json:"totalPages,omitempty"`
}

// CompanyDataResult 公司数据
type CompanyDataResult struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`

	// Data 公司
	Data *Company `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// CompanyListDataResult 公司列表数据
type CompanyListDataResult struct {
	// Code 响应码
	Code *int       `json:"code,omitempty"`
	Data *[]Company `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// CompanyPageResult 公司分页数据
type CompanyPageResult struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`

	// Data 公司分页数据
	Data *CompanyDataPage `json:"data,omitempty"`

	// Message 响应消息
	Message *string `json:"message,omitempty"`
}

// Compatiable defines model for Compatiable.
type Compatiable struct {
	// MaximumBuildNumber 最新版本构建次数
	MaximumBuildNumber *int `json:"maximumBuildNumber,omitempty"`

	// MaximumVersionName 最新版本名称
	MaximumVersionName *string `json:"maximumVersionName,omitempty"`

	// MinimumBuildNumber 最低版本构建次数
	MinimumBuildNumber *int `json:"minimumBuildNumber,omitempty"`

	// MinimumVersionName 最低版本名称
	MinimumVersionName *string `json:"minimumVersionName,omitempty"`
}

// GameAddDto 添加游戏请求体
type GameAddDto struct {
	// BundleId ios包名
	BundleId string `json:"bundleId"`

	// CompanyId 公司id
	CompanyId *int `json:"companyId,omitempty"`

	// GameId 游戏id
	GameId string `json:"gameId"`

	// GameName 游戏名称
	GameName string `json:"gameName"`

	// Grade 游戏分类：
	// 1:自研;
	// 2:代理;
	// 3:其他
	Grade *int `json:"grade,omitempty"`

	// Icon 游戏icon
	Icon string `json:"icon"`

	// Introduction 简介
	Introduction string `json:"introduction"`

	// MainUrl 主页
	MainUrl string `json:"mainUrl"`

	// Packages android os包名
	Packages string `json:"packages"`

	// Signature 包签名
	Signature string `json:"signature"`

	// Status 游戏状态：
	// -1:下架;
	// 0:审核中;
	// 1:测试;
	// 2:运营;
	// 3:维护;
	Status *int `json:"status,omitempty"`

	// UpdatedBy 修改人
	UpdatedBy int `json:"updatedBy"`
}

// GameConfigDto defines model for GameConfigDto.
type GameConfigDto struct {
	// Config 映射表
	Config *Map `json:"config,omitempty"`

	// Enabled 1启用 0禁用
	Enabled bool `json:"enabled"`

	// Os operating system, aos/ios/pc/none
	// none：not distinguish os
	// gcloud: 可选填none
	// midas:可选填aos/ios/pc
	// mini: 可选填none
	// open: 可选填none
	// rn: 可选填none
	// tss: 可选填none
	// credit: 可选填none
	// ugc: 可选填none
	// sdk: 可选填aos/ios/pc
	// wegame: 可选填none
	Os string `json:"os"`

	// Platform platform, qq/wx/none
	// none：not distinguish platform
	// gcloud: 可选填none
	// midas: 可选填none
	// mini: 可选填qq/wx
	// open: 可选填none
	// rn: 可选填none
	// tss: 可选填none
	// credit: 可选填none
	// ugc: 可选填none
	// sdk: 可选填none
	// wegame: 可选填none
	Platform string `json:"platform"`

	// UpdatedBy 修改人
	UpdatedBy int `json:"updatedBy"`

	// Version For non-special requirements, fill in '0.0.0'
	Version *string `json:"version,omitempty"`
}

// GameConfigVo defines model for GameConfigVo.
type GameConfigVo struct {
	// Config 映射表
	Config *Map `json:"config,omitempty"`

	// ConfigType 游戏配置类型
	ConfigType *string `json:"configType,omitempty"`

	// CreatedAt 创建时间
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Enabled 1启用 0禁用
	Enabled *bool `json:"enabled,omitempty"`

	// GameNo 游戏编号
	GameNo *int `json:"gameNo,omitempty"`

	// Id 游戏配置id
	Id *int `json:"id,omitempty"`

	// Os 系统 ios/aos/none
	Os *string `json:"os,omitempty"`

	// Platform 平台 qq/wx/none
	Platform *string `json:"platform,omitempty"`

	// UpdatedAt 修改时间
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UpdatedBy 修改人
	UpdatedBy *int `json:"updatedBy,omitempty"`

	// Version 版本号
	Version *string `json:"version,omitempty"`
}

// GameConfigVoDataResult 游戏配置数据
type GameConfigVoDataResult struct {
	// Code 响应码
	Code *int          `json:"code,omitempty"`
	Data *GameConfigVo `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GameConfigVoListDataResult 游戏配置列表数据
type GameConfigVoListDataResult struct {
	// Code 响应码
	Code *int            `json:"code,omitempty"`
	Data *[]GameConfigVo `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GameInfo defines model for GameInfo.
type GameInfo struct {
	// BundleId ios 包名
	BundleId *string `json:"bundleId,omitempty"`

	// CompanyId 公司id
	CompanyId *int `json:"companyId,omitempty"`

	// CreatedAt 创建时间
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// GameId 游戏id
	GameId *string `json:"gameId,omitempty"`

	// GameName 游戏名称
	GameName *string `json:"gameName,omitempty"`

	// GameNo 游戏编号
	GameNo *int `json:"gameNo,omitempty"`

	// Grade 游戏分类：
	// 1:自研;
	// 2:代理;
	// 3:其他
	Grade *int `json:"grade,omitempty"`

	// Icon 游戏icon
	Icon *string `json:"icon,omitempty"`

	// Id 游戏id
	Id *int `json:"id,omitempty"`

	// Introduction 公司简介
	Introduction *string `json:"introduction,omitempty"`

	// MainUrl 主页
	MainUrl *string `json:"mainUrl,omitempty"`

	// Packages android os 包名
	Packages *string `json:"packages,omitempty"`

	// Signature 包签名
	Signature *string `json:"signature,omitempty"`

	// Status 游戏状态：
	// -1:下架;
	// 0:审核中;
	// 1:测试;
	// 2:运营;
	// 3:维护;
	Status *int `json:"status,omitempty"`

	// UpdatedAt 修改时间
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UpdatedBy 修改人
	UpdatedBy *int `json:"updatedBy,omitempty"`
}

// GameInfoDataPage 游戏分页数据
type GameInfoDataPage struct {
	List *[]GameInfo `json:"list,omitempty"`

	// PageNo 页码
	PageNo *int `json:"pageNo,omitempty"`

	// PageSize 数量
	PageSize *int `json:"pageSize,omitempty"`

	// Total 总数量
	Total *int `json:"total,omitempty"`

	// TotalPages 总页数
	TotalPages *int `json:"totalPages,omitempty"`
}

// GameInfoDataResult 游戏数据
type GameInfoDataResult struct {
	// Code 响应码
	Code *int      `json:"code,omitempty"`
	Data *GameInfo `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GameInfoListDataResult 游戏列表数据
type GameInfoListDataResult struct {
	// Code 响应码
	Code *int        `json:"code,omitempty"`
	Data *[]GameInfo `json:"data,omitempty"`

	// Message 响应信息
	Message *string `json:"message,omitempty"`
}

// GameInfoPageResult 游戏分页数据
type GameInfoPageResult struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`

	// Data 游戏分页数据
	Data *GameInfoDataPage `json:"data,omitempty"`

	// Message 响应消息
	Message *string `json:"message,omitempty"`
}

// GameUpdateDto 修改游戏请求体
type GameUpdateDto struct {
	// BundleId ios 包名
	BundleId *string `json:"bundleId,omitempty"`

	// GameName 游戏名称
	GameName *string `json:"gameName,omitempty"`

	// Icon 游戏icon
	Icon *string `json:"icon,omitempty"`

	// Introduction 简介
	Introduction *string `json:"introduction,omitempty"`

	// MainUrl 主页
	MainUrl *string `json:"mainUrl,omitempty"`

	// Packages android os 包名
	Packages *string `json:"packages,omitempty"`

	// Signature 包签名
	Signature *string `json:"signature,omitempty"`

	// Status 游戏状态：
	// -1:下架;
	// 0:审核中;
	// 1:测试;
	// 2:运营;
	// 3:维护;
	Status *int `json:"status,omitempty"`

	// UpdatedBy 修改人
	UpdatedBy int `json:"updatedBy"`
}

// Map 映射表
type Map = map[string]interface{}

// MapDataResult defines model for MapDataResult.
type MapDataResult struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`

	// Data 映射表
	Data *Map `json:"data,omitempty"`

	// Message 响应消息
	Message *string `json:"message,omitempty"`
}

// PackageVersion 包版本数据
type PackageVersion struct {
	// Assets assets
	Assets *[]Assets `json:"assets,omitempty"`

	// BuildNumber 构建次数
	BuildNumber *int `json:"buildNumber,omitempty"`

	// Changes change note
	Changes     *string      `json:"changes,omitempty"`
	Compatiable *Compatiable `json:"compatiable,omitempty"`

	// CreatedAt 创建时间
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CreatedBy 创建人员
	CreatedBy *int `json:"createdBy,omitempty"`

	// ForceUpdate boolean, yes: required force update
	ForceUpdate *bool `json:"forceUpdate,omitempty"`

	// GameId 游戏id
	GameId *string `json:"gameId,omitempty"`

	// Id 包版本id
	Id *string `json:"id,omitempty"`

	// IsPublished publish status
	IsPublished *bool `json:"isPublished,omitempty"`

	// PublishedAt 发布时间
	PublishedAt *time.Time `json:"publishedAt,omitempty"`

	// PublishedBy 发布人
	PublishedBy *int `json:"publishedBy,omitempty"`

	// UpdatedAt 修改时间
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UpdatedBy 修改人
	UpdatedBy *int `json:"updatedBy,omitempty"`

	// VersionName 版本名称
	VersionName *string `json:"versionName,omitempty"`
}

// PackageVersionDataPage 包版本分页数据
type PackageVersionDataPage struct {
	List *[]PackageVersion `json:"list,omitempty"`

	// PageNo 页码
	PageNo *int `json:"pageNo,omitempty"`

	// PageSize 数量
	PageSize *int `json:"pageSize,omitempty"`

	// Total 总数量
	Total *int `json:"total,omitempty"`

	// TotalPages 总页数
	TotalPages *int `json:"totalPages,omitempty"`
}

// PackageVersionDataResult 包版本数据响应体
type PackageVersionDataResult struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`

	// Data 包版本数据
	Data *PackageVersion `json:"data,omitempty"`

	// Message 响应消息
	Message *string `json:"message,omitempty"`
}

// PackageVersionPageDataResult 包版本分页数据响应体
type PackageVersionPageDataResult struct {
	// Code 响应码
	Code *int `json:"code,omitempty"`

	// Data 包版本分页数据
	Data *PackageVersionDataPage `json:"data,omitempty"`

	// Message 响应消息
	Message *string `json:"message,omitempty"`
}

// ListUsingGETParams defines parameters for ListUsingGET.
type ListUsingGETParams struct {
	// CompanyName 公司名称
	CompanyName *string `form:"companyName,omitempty" json:"companyName,omitempty"`

	// Contact 联系方式
	Contact *string `form:"contact,omitempty" json:"contact,omitempty"`

	// Id 公司id
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Status 状态
	// -1:禁用
	// 0:审核中
	// 1:审核通过
	Status *int `form:"status,omitempty" json:"status,omitempty"`

	// UpdatedBy 创建/更新者
	UpdatedBy *int `form:"updatedBy,omitempty" json:"updatedBy,omitempty"`
}

// ListPageUsingGETParams defines parameters for ListPageUsingGET.
type ListPageUsingGETParams struct {
	// CompanyName 公司名称
	CompanyName *string `form:"companyName,omitempty" json:"companyName,omitempty"`

	// Contact 联系方式
	Contact *string `form:"contact,omitempty" json:"contact,omitempty"`

	// Id 公司id
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// PageNo 页码
	PageNo *int `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize 数量
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Status 状态
	// -1:禁用
	// 0:审核中
	// 1:审核通过
	Status *int `form:"status,omitempty" json:"status,omitempty"`

	// UpdatedBy 创建/更新者
	UpdatedBy *int32 `form:"updatedBy,omitempty" json:"updatedBy,omitempty"`
}

// ListUsingGET2Params defines parameters for ListUsingGET2.
type ListUsingGET2Params struct {
	// BundleId ios包名
	BundleId *string `form:"bundleId,omitempty" json:"bundleId,omitempty"`

	// CompanyId 公司id
	CompanyId *int `form:"companyId,omitempty" json:"companyId,omitempty"`

	// GameId 游戏id
	GameId *string `form:"gameId,omitempty" json:"gameId,omitempty"`

	// GameName 游戏名称
	GameName *string `form:"gameName,omitempty" json:"gameName,omitempty"`

	// GameNo 游戏编号
	GameNo *int `form:"gameNo,omitempty" json:"gameNo,omitempty"`

	// Grade 游戏分类
	Grade *int `form:"grade,omitempty" json:"grade,omitempty"`

	// Packages android os 包名
	Packages *string `form:"packages,omitempty" json:"packages,omitempty"`
}

// ListPageUsingGET1Params defines parameters for ListPageUsingGET1.
type ListPageUsingGET1Params struct {
	// BundleId ios包名
	BundleId *string `form:"bundleId,omitempty" json:"bundleId,omitempty"`

	// CompanyId 公司id
	CompanyId *int `form:"companyId,omitempty" json:"companyId,omitempty"`

	// GameId 游戏id
	GameId *string `form:"gameId,omitempty" json:"gameId,omitempty"`

	// GameName 游戏名称
	GameName *string `form:"gameName,omitempty" json:"gameName,omitempty"`

	// GameNo 游戏编号
	GameNo *int `form:"gameNo,omitempty" json:"gameNo,omitempty"`

	// Grade 游戏分类
	Grade *int `form:"grade,omitempty" json:"grade,omitempty"`

	// Packages android os 包名
	Packages *string `form:"packages,omitempty" json:"packages,omitempty"`
}

// QueryUsingGETParams defines parameters for QueryUsingGET.
type QueryUsingGETParams struct {
	// Os operating system, aos/ios/pc/none
	// none：not distinguish os
	// gcloud: 可选填none
	// midas:可选填aos/ios/pc
	// mini: 可选填none
	// open: 可选填none
	// rn: 可选填none
	// tss: 可选填none
	// credit: 可选填none
	// ugc: 可选填none
	// sdk: 可选填aos/ios/pc
	// wegame: 可选填none
	Os string `form:"os" json:"os"`

	// Platform platform, qq/wx/none
	// none：not distinguish platform
	// gcloud: 可选填none
	// midas: 可选填none
	// mini: 可选填qq/wx
	// open: 可选填none
	// rn: 可选填none
	// tss: 可选填none
	// credit: 可选填none
	// ugc: 可选填none
	// sdk: 可选填none
	// wegame: 可选填none
	Platform string `form:"platform" json:"platform"`

	// Version 版本号
	Version string `form:"version" json:"version"`
}

// QueryVersionPageUsingGETParams defines parameters for QueryVersionPageUsingGET.
type QueryVersionPageUsingGETParams struct {
	// PageNo 页码
	PageNo *int `form:"pageNo,omitempty" json:"pageNo,omitempty"`

	// PageSize 数量
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// InsertUsingPOSTJSONRequestBody defines body for InsertUsingPOST for application/json ContentType.
type InsertUsingPOSTJSONRequestBody = Company

// UpdateUsingPUTJSONRequestBody defines body for UpdateUsingPUT for application/json ContentType.
type UpdateUsingPUTJSONRequestBody = Company

// InsertUsingPOST2JSONRequestBody defines body for InsertUsingPOST2 for application/json ContentType.
type InsertUsingPOST2JSONRequestBody = GameAddDto

// UpdateUsingPUT2JSONRequestBody defines body for UpdateUsingPUT2 for application/json ContentType.
type UpdateUsingPUT2JSONRequestBody = GameUpdateDto

// InsertUsingPOST1JSONRequestBody defines body for InsertUsingPOST1 for application/json ContentType.
type InsertUsingPOST1JSONRequestBody = GameConfigDto

// UpdateUsingPUT1JSONRequestBody defines body for UpdateUsingPUT1 for application/json ContentType.
type UpdateUsingPUT1JSONRequestBody = GameConfigDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListUsingGET request
	ListUsingGET(ctx context.Context, params *ListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertUsingPOSTWithBody request with any body
	InsertUsingPOSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertUsingPOST(ctx context.Context, body InsertUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPageUsingGET request
	ListPageUsingGET(ctx context.Context, params *ListPageUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsingDELETE request
	DeleteUsingDELETE(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneUsingGET request
	OneUsingGET(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUsingPUTWithBody request with any body
	UpdateUsingPUTWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUsingPUT(ctx context.Context, id int, body UpdateUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsingGET2 request
	ListUsingGET2(ctx context.Context, params *ListUsingGET2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertUsingPOST2WithBody request with any body
	InsertUsingPOST2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertUsingPOST2(ctx context.Context, body InsertUsingPOST2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPageUsingGET1 request
	ListPageUsingGET1(ctx context.Context, params *ListPageUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsingDELETE2 request
	DeleteUsingDELETE2(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneUsingGET1 request
	OneUsingGET1(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUsingPUT2WithBody request with any body
	UpdateUsingPUT2WithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUsingPUT2(ctx context.Context, gameId string, body UpdateUsingPUT2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsingDELETE1 request
	DeleteUsingDELETE1(ctx context.Context, gameId string, configType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUsingGET request
	QueryUsingGET(ctx context.Context, gameId string, configType string, params *QueryUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertUsingPOST1WithBody request with any body
	InsertUsingPOST1WithBody(ctx context.Context, gameId string, configType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertUsingPOST1(ctx context.Context, gameId string, configType string, body InsertUsingPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsingGET1 request
	ListUsingGET1(ctx context.Context, gameId string, configType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUsingPUT1WithBody request with any body
	UpdateUsingPUT1WithBody(ctx context.Context, gameId string, configType string, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUsingPUT1(ctx context.Context, gameId string, configType string, id int, body UpdateUsingPUT1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUsingGET12 request
	QueryUsingGET12(ctx context.Context, gameId string, configType string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUsingGET23 request
	QueryUsingGET23(ctx context.Context, configType string, packageName string, os string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadLatestVersionUsingGET request
	DownloadLatestVersionUsingGET(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadByVersionAndTypeUsingGET request
	DownloadByVersionAndTypeUsingGET(ctx context.Context, pPackage string, assetType string, versionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GoUsingGET request
	GoUsingGET(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryVersionPageUsingGET request
	QueryVersionPageUsingGET(ctx context.Context, pPackage string, params *QueryVersionPageUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryLatestVersionUsingGET request
	QueryLatestVersionUsingGET(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListUsingGET(ctx context.Context, params *ListUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertUsingPOSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertUsingPOSTRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertUsingPOST(ctx context.Context, body InsertUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertUsingPOSTRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPageUsingGET(ctx context.Context, params *ListPageUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPageUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsingDELETE(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsingDELETERequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneUsingGET(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneUsingGETRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPUTWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPUTRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPUT(ctx context.Context, id int, body UpdateUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPUTRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsingGET2(ctx context.Context, params *ListUsingGET2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsingGET2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertUsingPOST2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertUsingPOST2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertUsingPOST2(ctx context.Context, body InsertUsingPOST2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertUsingPOST2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPageUsingGET1(ctx context.Context, params *ListPageUsingGET1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPageUsingGET1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsingDELETE2(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsingDELETE2Request(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneUsingGET1(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneUsingGET1Request(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPUT2WithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPUT2RequestWithBody(c.Server, gameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPUT2(ctx context.Context, gameId string, body UpdateUsingPUT2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPUT2Request(c.Server, gameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsingDELETE1(ctx context.Context, gameId string, configType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsingDELETE1Request(c.Server, gameId, configType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsingGET(ctx context.Context, gameId string, configType string, params *QueryUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsingGETRequest(c.Server, gameId, configType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertUsingPOST1WithBody(ctx context.Context, gameId string, configType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertUsingPOST1RequestWithBody(c.Server, gameId, configType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertUsingPOST1(ctx context.Context, gameId string, configType string, body InsertUsingPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertUsingPOST1Request(c.Server, gameId, configType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsingGET1(ctx context.Context, gameId string, configType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsingGET1Request(c.Server, gameId, configType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPUT1WithBody(ctx context.Context, gameId string, configType string, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPUT1RequestWithBody(c.Server, gameId, configType, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsingPUT1(ctx context.Context, gameId string, configType string, id int, body UpdateUsingPUT1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsingPUT1Request(c.Server, gameId, configType, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsingGET12(ctx context.Context, gameId string, configType string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsingGET12Request(c.Server, gameId, configType, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsingGET23(ctx context.Context, configType string, packageName string, os string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsingGET23Request(c.Server, configType, packageName, os, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadLatestVersionUsingGET(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadLatestVersionUsingGETRequest(c.Server, pPackage)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadByVersionAndTypeUsingGET(ctx context.Context, pPackage string, assetType string, versionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadByVersionAndTypeUsingGETRequest(c.Server, pPackage, assetType, versionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GoUsingGET(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGoUsingGETRequest(c.Server, pPackage)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryVersionPageUsingGET(ctx context.Context, pPackage string, params *QueryVersionPageUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryVersionPageUsingGETRequest(c.Server, pPackage, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryLatestVersionUsingGET(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryLatestVersionUsingGETRequest(c.Server, pPackage)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListUsingGETRequest generates requests for ListUsingGET
func NewListUsingGETRequest(server string, params *ListUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CompanyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "companyName", runtime.ParamLocationQuery, *params.CompanyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Contact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact", runtime.ParamLocationQuery, *params.Contact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsertUsingPOSTRequest calls the generic InsertUsingPOST builder with application/json body
func NewInsertUsingPOSTRequest(server string, body InsertUsingPOSTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertUsingPOSTRequestWithBody(server, "application/json", bodyReader)
}

// NewInsertUsingPOSTRequestWithBody generates requests for InsertUsingPOST with any type of body
func NewInsertUsingPOSTRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPageUsingGETRequest generates requests for ListPageUsingGET
func NewListPageUsingGETRequest(server string, params *ListPageUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/company/page-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CompanyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "companyName", runtime.ParamLocationQuery, *params.CompanyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Contact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact", runtime.ParamLocationQuery, *params.Contact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBy", runtime.ParamLocationQuery, *params.UpdatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUsingDELETERequest generates requests for DeleteUsingDELETE
func NewDeleteUsingDELETERequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/company/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOneUsingGETRequest generates requests for OneUsingGET
func NewOneUsingGETRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/company/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUsingPUTRequest calls the generic UpdateUsingPUT builder with application/json body
func NewUpdateUsingPUTRequest(server string, id int, body UpdateUsingPUTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUsingPUTRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUsingPUTRequestWithBody generates requests for UpdateUsingPUT with any type of body
func NewUpdateUsingPUTRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/company/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUsingGET2Request generates requests for ListUsingGET2
func NewListUsingGET2Request(server string, params *ListUsingGET2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BundleId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bundleId", runtime.ParamLocationQuery, *params.BundleId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "companyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, *params.GameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameName", runtime.ParamLocationQuery, *params.GameName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameNo", runtime.ParamLocationQuery, *params.GameNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Grade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "grade", runtime.ParamLocationQuery, *params.Grade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Packages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "packages", runtime.ParamLocationQuery, *params.Packages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsertUsingPOST2Request calls the generic InsertUsingPOST2 builder with application/json body
func NewInsertUsingPOST2Request(server string, body InsertUsingPOST2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertUsingPOST2RequestWithBody(server, "application/json", bodyReader)
}

// NewInsertUsingPOST2RequestWithBody generates requests for InsertUsingPOST2 with any type of body
func NewInsertUsingPOST2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPageUsingGET1Request generates requests for ListPageUsingGET1
func NewListPageUsingGET1Request(server string, params *ListPageUsingGET1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/page-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BundleId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bundleId", runtime.ParamLocationQuery, *params.BundleId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "companyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameId", runtime.ParamLocationQuery, *params.GameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameName", runtime.ParamLocationQuery, *params.GameName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameNo", runtime.ParamLocationQuery, *params.GameNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Grade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "grade", runtime.ParamLocationQuery, *params.Grade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Packages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "packages", runtime.ParamLocationQuery, *params.Packages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUsingDELETE2Request generates requests for DeleteUsingDELETE2
func NewDeleteUsingDELETE2Request(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOneUsingGET1Request generates requests for OneUsingGET1
func NewOneUsingGET1Request(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUsingPUT2Request calls the generic UpdateUsingPUT2 builder with application/json body
func NewUpdateUsingPUT2Request(server string, gameId string, body UpdateUsingPUT2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUsingPUT2RequestWithBody(server, gameId, "application/json", bodyReader)
}

// NewUpdateUsingPUT2RequestWithBody generates requests for UpdateUsingPUT2 with any type of body
func NewUpdateUsingPUT2RequestWithBody(server string, gameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsingDELETE1Request generates requests for DeleteUsingDELETE1
func NewDeleteUsingDELETE1Request(server string, gameId string, configType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configType", runtime.ParamLocationPath, configType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/%s/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryUsingGETRequest generates requests for QueryUsingGET
func NewQueryUsingGETRequest(server string, gameId string, configType string, params *QueryUsingGETParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configType", runtime.ParamLocationPath, configType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/%s/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, params.Os); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsertUsingPOST1Request calls the generic InsertUsingPOST1 builder with application/json body
func NewInsertUsingPOST1Request(server string, gameId string, configType string, body InsertUsingPOST1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertUsingPOST1RequestWithBody(server, gameId, configType, "application/json", bodyReader)
}

// NewInsertUsingPOST1RequestWithBody generates requests for InsertUsingPOST1 with any type of body
func NewInsertUsingPOST1RequestWithBody(server string, gameId string, configType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configType", runtime.ParamLocationPath, configType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/%s/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUsingGET1Request generates requests for ListUsingGET1
func NewListUsingGET1Request(server string, gameId string, configType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configType", runtime.ParamLocationPath, configType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/%s/config/%s/list", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUsingPUT1Request calls the generic UpdateUsingPUT1 builder with application/json body
func NewUpdateUsingPUT1Request(server string, gameId string, configType string, id int, body UpdateUsingPUT1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUsingPUT1RequestWithBody(server, gameId, configType, id, "application/json", bodyReader)
}

// NewUpdateUsingPUT1RequestWithBody generates requests for UpdateUsingPUT1 with any type of body
func NewUpdateUsingPUT1RequestWithBody(server string, gameId string, configType string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configType", runtime.ParamLocationPath, configType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/admin/game/%s/config/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUsingGET12Request generates requests for QueryUsingGET12
func NewQueryUsingGET12Request(server string, gameId string, configType string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configType", runtime.ParamLocationPath, configType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/game/%s/config/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryUsingGET23Request generates requests for QueryUsingGET23
func NewQueryUsingGET23Request(server string, configType string, packageName string, os string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configType", runtime.ParamLocationPath, configType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "packageName", runtime.ParamLocationPath, packageName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "os", runtime.ParamLocationPath, os)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadLatestVersionUsingGETRequest generates requests for DownloadLatestVersionUsingGET
func NewDownloadLatestVersionUsingGETRequest(server string, pPackage string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "package", runtime.ParamLocationPath, pPackage)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/%s/download/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadByVersionAndTypeUsingGETRequest generates requests for DownloadByVersionAndTypeUsingGET
func NewDownloadByVersionAndTypeUsingGETRequest(server string, pPackage string, assetType string, versionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "package", runtime.ParamLocationPath, pPackage)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetType", runtime.ParamLocationPath, assetType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "versionName", runtime.ParamLocationPath, versionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/%s/download/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGoUsingGETRequest generates requests for GoUsingGET
func NewGoUsingGETRequest(server string, pPackage string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "package", runtime.ParamLocationPath, pPackage)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/%s/go", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryVersionPageUsingGETRequest generates requests for QueryVersionPageUsingGET
func NewQueryVersionPageUsingGETRequest(server string, pPackage string, params *QueryVersionPageUsingGETParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "package", runtime.ParamLocationPath, pPackage)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNo", runtime.ParamLocationQuery, *params.PageNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryLatestVersionUsingGETRequest generates requests for QueryLatestVersionUsingGET
func NewQueryLatestVersionUsingGETRequest(server string, pPackage string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "package", runtime.ParamLocationPath, pPackage)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2.0/%s/update/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListUsingGETWithResponse request
	ListUsingGETWithResponse(ctx context.Context, params *ListUsingGETParams, reqEditors ...RequestEditorFn) (*ListUsingGETResponse, error)

	// InsertUsingPOSTWithBodyWithResponse request with any body
	InsertUsingPOSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertUsingPOSTResponse, error)

	InsertUsingPOSTWithResponse(ctx context.Context, body InsertUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertUsingPOSTResponse, error)

	// ListPageUsingGETWithResponse request
	ListPageUsingGETWithResponse(ctx context.Context, params *ListPageUsingGETParams, reqEditors ...RequestEditorFn) (*ListPageUsingGETResponse, error)

	// DeleteUsingDELETEWithResponse request
	DeleteUsingDELETEWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteUsingDELETEResponse, error)

	// OneUsingGETWithResponse request
	OneUsingGETWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*OneUsingGETResponse, error)

	// UpdateUsingPUTWithBodyWithResponse request with any body
	UpdateUsingPUTWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPUTResponse, error)

	UpdateUsingPUTWithResponse(ctx context.Context, id int, body UpdateUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPUTResponse, error)

	// ListUsingGET2WithResponse request
	ListUsingGET2WithResponse(ctx context.Context, params *ListUsingGET2Params, reqEditors ...RequestEditorFn) (*ListUsingGET2Response, error)

	// InsertUsingPOST2WithBodyWithResponse request with any body
	InsertUsingPOST2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertUsingPOST2Response, error)

	InsertUsingPOST2WithResponse(ctx context.Context, body InsertUsingPOST2JSONRequestBody, reqEditors ...RequestEditorFn) (*InsertUsingPOST2Response, error)

	// ListPageUsingGET1WithResponse request
	ListPageUsingGET1WithResponse(ctx context.Context, params *ListPageUsingGET1Params, reqEditors ...RequestEditorFn) (*ListPageUsingGET1Response, error)

	// DeleteUsingDELETE2WithResponse request
	DeleteUsingDELETE2WithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*DeleteUsingDELETE2Response, error)

	// OneUsingGET1WithResponse request
	OneUsingGET1WithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*OneUsingGET1Response, error)

	// UpdateUsingPUT2WithBodyWithResponse request with any body
	UpdateUsingPUT2WithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPUT2Response, error)

	UpdateUsingPUT2WithResponse(ctx context.Context, gameId string, body UpdateUsingPUT2JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPUT2Response, error)

	// DeleteUsingDELETE1WithResponse request
	DeleteUsingDELETE1WithResponse(ctx context.Context, gameId string, configType string, reqEditors ...RequestEditorFn) (*DeleteUsingDELETE1Response, error)

	// QueryUsingGETWithResponse request
	QueryUsingGETWithResponse(ctx context.Context, gameId string, configType string, params *QueryUsingGETParams, reqEditors ...RequestEditorFn) (*QueryUsingGETResponse, error)

	// InsertUsingPOST1WithBodyWithResponse request with any body
	InsertUsingPOST1WithBodyWithResponse(ctx context.Context, gameId string, configType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertUsingPOST1Response, error)

	InsertUsingPOST1WithResponse(ctx context.Context, gameId string, configType string, body InsertUsingPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*InsertUsingPOST1Response, error)

	// ListUsingGET1WithResponse request
	ListUsingGET1WithResponse(ctx context.Context, gameId string, configType string, reqEditors ...RequestEditorFn) (*ListUsingGET1Response, error)

	// UpdateUsingPUT1WithBodyWithResponse request with any body
	UpdateUsingPUT1WithBodyWithResponse(ctx context.Context, gameId string, configType string, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPUT1Response, error)

	UpdateUsingPUT1WithResponse(ctx context.Context, gameId string, configType string, id int, body UpdateUsingPUT1JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPUT1Response, error)

	// QueryUsingGET12WithResponse request
	QueryUsingGET12WithResponse(ctx context.Context, gameId string, configType string, version string, reqEditors ...RequestEditorFn) (*QueryUsingGET12Response, error)

	// QueryUsingGET23WithResponse request
	QueryUsingGET23WithResponse(ctx context.Context, configType string, packageName string, os string, version string, reqEditors ...RequestEditorFn) (*QueryUsingGET23Response, error)

	// DownloadLatestVersionUsingGETWithResponse request
	DownloadLatestVersionUsingGETWithResponse(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*DownloadLatestVersionUsingGETResponse, error)

	// DownloadByVersionAndTypeUsingGETWithResponse request
	DownloadByVersionAndTypeUsingGETWithResponse(ctx context.Context, pPackage string, assetType string, versionName string, reqEditors ...RequestEditorFn) (*DownloadByVersionAndTypeUsingGETResponse, error)

	// GoUsingGETWithResponse request
	GoUsingGETWithResponse(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*GoUsingGETResponse, error)

	// QueryVersionPageUsingGETWithResponse request
	QueryVersionPageUsingGETWithResponse(ctx context.Context, pPackage string, params *QueryVersionPageUsingGETParams, reqEditors ...RequestEditorFn) (*QueryVersionPageUsingGETResponse, error)

	// QueryLatestVersionUsingGETWithResponse request
	QueryLatestVersionUsingGETWithResponse(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*QueryLatestVersionUsingGETResponse, error)
}

type ListUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyListDataResult
}

// Status returns HTTPResponse.Status
func (r ListUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertUsingPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyDataResult
}

// Status returns HTTPResponse.Status
func (r InsertUsingPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertUsingPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPageUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyPageResult
}

// Status returns HTTPResponse.Status
func (r ListPageUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPageUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsingDELETEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r DeleteUsingDELETEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsingDELETEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyDataResult
}

// Status returns HTTPResponse.Status
func (r OneUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUsingPUTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyDataResult
}

// Status returns HTTPResponse.Status
func (r UpdateUsingPUTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUsingPUTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsingGET2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameInfoListDataResult
}

// Status returns HTTPResponse.Status
func (r ListUsingGET2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsingGET2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertUsingPOST2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameInfoDataResult
}

// Status returns HTTPResponse.Status
func (r InsertUsingPOST2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertUsingPOST2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPageUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameInfoPageResult
}

// Status returns HTTPResponse.Status
func (r ListPageUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPageUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsingDELETE2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r DeleteUsingDELETE2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsingDELETE2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameInfoDataResult
}

// Status returns HTTPResponse.Status
func (r OneUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUsingPUT2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r UpdateUsingPUT2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUsingPUT2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsingDELETE1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r DeleteUsingDELETE1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsingDELETE1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameConfigVoDataResult
}

// Status returns HTTPResponse.Status
func (r QueryUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertUsingPOST1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r InsertUsingPOST1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertUsingPOST1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsingGET1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameConfigVoListDataResult
}

// Status returns HTTPResponse.Status
func (r ListUsingGET1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsingGET1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUsingPUT1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r UpdateUsingPUT1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUsingPUT1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUsingGET12Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapDataResult
}

// Status returns HTTPResponse.Status
func (r QueryUsingGET12Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUsingGET12Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUsingGET23Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapDataResult
}

// Status returns HTTPResponse.Status
func (r QueryUsingGET23Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUsingGET23Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadLatestVersionUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadLatestVersionUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadLatestVersionUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadByVersionAndTypeUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadByVersionAndTypeUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadByVersionAndTypeUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GoUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GoUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GoUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryVersionPageUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PackageVersionPageDataResult
}

// Status returns HTTPResponse.Status
func (r QueryVersionPageUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryVersionPageUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryLatestVersionUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PackageVersionDataResult
}

// Status returns HTTPResponse.Status
func (r QueryLatestVersionUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryLatestVersionUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListUsingGETWithResponse request returning *ListUsingGETResponse
func (c *ClientWithResponses) ListUsingGETWithResponse(ctx context.Context, params *ListUsingGETParams, reqEditors ...RequestEditorFn) (*ListUsingGETResponse, error) {
	rsp, err := c.ListUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsingGETResponse(rsp)
}

// InsertUsingPOSTWithBodyWithResponse request with arbitrary body returning *InsertUsingPOSTResponse
func (c *ClientWithResponses) InsertUsingPOSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertUsingPOSTResponse, error) {
	rsp, err := c.InsertUsingPOSTWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertUsingPOSTResponse(rsp)
}

func (c *ClientWithResponses) InsertUsingPOSTWithResponse(ctx context.Context, body InsertUsingPOSTJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertUsingPOSTResponse, error) {
	rsp, err := c.InsertUsingPOST(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertUsingPOSTResponse(rsp)
}

// ListPageUsingGETWithResponse request returning *ListPageUsingGETResponse
func (c *ClientWithResponses) ListPageUsingGETWithResponse(ctx context.Context, params *ListPageUsingGETParams, reqEditors ...RequestEditorFn) (*ListPageUsingGETResponse, error) {
	rsp, err := c.ListPageUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPageUsingGETResponse(rsp)
}

// DeleteUsingDELETEWithResponse request returning *DeleteUsingDELETEResponse
func (c *ClientWithResponses) DeleteUsingDELETEWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteUsingDELETEResponse, error) {
	rsp, err := c.DeleteUsingDELETE(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsingDELETEResponse(rsp)
}

// OneUsingGETWithResponse request returning *OneUsingGETResponse
func (c *ClientWithResponses) OneUsingGETWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*OneUsingGETResponse, error) {
	rsp, err := c.OneUsingGET(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneUsingGETResponse(rsp)
}

// UpdateUsingPUTWithBodyWithResponse request with arbitrary body returning *UpdateUsingPUTResponse
func (c *ClientWithResponses) UpdateUsingPUTWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPUTResponse, error) {
	rsp, err := c.UpdateUsingPUTWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPUTResponse(rsp)
}

func (c *ClientWithResponses) UpdateUsingPUTWithResponse(ctx context.Context, id int, body UpdateUsingPUTJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPUTResponse, error) {
	rsp, err := c.UpdateUsingPUT(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPUTResponse(rsp)
}

// ListUsingGET2WithResponse request returning *ListUsingGET2Response
func (c *ClientWithResponses) ListUsingGET2WithResponse(ctx context.Context, params *ListUsingGET2Params, reqEditors ...RequestEditorFn) (*ListUsingGET2Response, error) {
	rsp, err := c.ListUsingGET2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsingGET2Response(rsp)
}

// InsertUsingPOST2WithBodyWithResponse request with arbitrary body returning *InsertUsingPOST2Response
func (c *ClientWithResponses) InsertUsingPOST2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertUsingPOST2Response, error) {
	rsp, err := c.InsertUsingPOST2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertUsingPOST2Response(rsp)
}

func (c *ClientWithResponses) InsertUsingPOST2WithResponse(ctx context.Context, body InsertUsingPOST2JSONRequestBody, reqEditors ...RequestEditorFn) (*InsertUsingPOST2Response, error) {
	rsp, err := c.InsertUsingPOST2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertUsingPOST2Response(rsp)
}

// ListPageUsingGET1WithResponse request returning *ListPageUsingGET1Response
func (c *ClientWithResponses) ListPageUsingGET1WithResponse(ctx context.Context, params *ListPageUsingGET1Params, reqEditors ...RequestEditorFn) (*ListPageUsingGET1Response, error) {
	rsp, err := c.ListPageUsingGET1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPageUsingGET1Response(rsp)
}

// DeleteUsingDELETE2WithResponse request returning *DeleteUsingDELETE2Response
func (c *ClientWithResponses) DeleteUsingDELETE2WithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*DeleteUsingDELETE2Response, error) {
	rsp, err := c.DeleteUsingDELETE2(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsingDELETE2Response(rsp)
}

// OneUsingGET1WithResponse request returning *OneUsingGET1Response
func (c *ClientWithResponses) OneUsingGET1WithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*OneUsingGET1Response, error) {
	rsp, err := c.OneUsingGET1(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneUsingGET1Response(rsp)
}

// UpdateUsingPUT2WithBodyWithResponse request with arbitrary body returning *UpdateUsingPUT2Response
func (c *ClientWithResponses) UpdateUsingPUT2WithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPUT2Response, error) {
	rsp, err := c.UpdateUsingPUT2WithBody(ctx, gameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPUT2Response(rsp)
}

func (c *ClientWithResponses) UpdateUsingPUT2WithResponse(ctx context.Context, gameId string, body UpdateUsingPUT2JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPUT2Response, error) {
	rsp, err := c.UpdateUsingPUT2(ctx, gameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPUT2Response(rsp)
}

// DeleteUsingDELETE1WithResponse request returning *DeleteUsingDELETE1Response
func (c *ClientWithResponses) DeleteUsingDELETE1WithResponse(ctx context.Context, gameId string, configType string, reqEditors ...RequestEditorFn) (*DeleteUsingDELETE1Response, error) {
	rsp, err := c.DeleteUsingDELETE1(ctx, gameId, configType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsingDELETE1Response(rsp)
}

// QueryUsingGETWithResponse request returning *QueryUsingGETResponse
func (c *ClientWithResponses) QueryUsingGETWithResponse(ctx context.Context, gameId string, configType string, params *QueryUsingGETParams, reqEditors ...RequestEditorFn) (*QueryUsingGETResponse, error) {
	rsp, err := c.QueryUsingGET(ctx, gameId, configType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsingGETResponse(rsp)
}

// InsertUsingPOST1WithBodyWithResponse request with arbitrary body returning *InsertUsingPOST1Response
func (c *ClientWithResponses) InsertUsingPOST1WithBodyWithResponse(ctx context.Context, gameId string, configType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertUsingPOST1Response, error) {
	rsp, err := c.InsertUsingPOST1WithBody(ctx, gameId, configType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertUsingPOST1Response(rsp)
}

func (c *ClientWithResponses) InsertUsingPOST1WithResponse(ctx context.Context, gameId string, configType string, body InsertUsingPOST1JSONRequestBody, reqEditors ...RequestEditorFn) (*InsertUsingPOST1Response, error) {
	rsp, err := c.InsertUsingPOST1(ctx, gameId, configType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertUsingPOST1Response(rsp)
}

// ListUsingGET1WithResponse request returning *ListUsingGET1Response
func (c *ClientWithResponses) ListUsingGET1WithResponse(ctx context.Context, gameId string, configType string, reqEditors ...RequestEditorFn) (*ListUsingGET1Response, error) {
	rsp, err := c.ListUsingGET1(ctx, gameId, configType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsingGET1Response(rsp)
}

// UpdateUsingPUT1WithBodyWithResponse request with arbitrary body returning *UpdateUsingPUT1Response
func (c *ClientWithResponses) UpdateUsingPUT1WithBodyWithResponse(ctx context.Context, gameId string, configType string, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsingPUT1Response, error) {
	rsp, err := c.UpdateUsingPUT1WithBody(ctx, gameId, configType, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPUT1Response(rsp)
}

func (c *ClientWithResponses) UpdateUsingPUT1WithResponse(ctx context.Context, gameId string, configType string, id int, body UpdateUsingPUT1JSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsingPUT1Response, error) {
	rsp, err := c.UpdateUsingPUT1(ctx, gameId, configType, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsingPUT1Response(rsp)
}

// QueryUsingGET12WithResponse request returning *QueryUsingGET12Response
func (c *ClientWithResponses) QueryUsingGET12WithResponse(ctx context.Context, gameId string, configType string, version string, reqEditors ...RequestEditorFn) (*QueryUsingGET12Response, error) {
	rsp, err := c.QueryUsingGET12(ctx, gameId, configType, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsingGET12Response(rsp)
}

// QueryUsingGET23WithResponse request returning *QueryUsingGET23Response
func (c *ClientWithResponses) QueryUsingGET23WithResponse(ctx context.Context, configType string, packageName string, os string, version string, reqEditors ...RequestEditorFn) (*QueryUsingGET23Response, error) {
	rsp, err := c.QueryUsingGET23(ctx, configType, packageName, os, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsingGET23Response(rsp)
}

// DownloadLatestVersionUsingGETWithResponse request returning *DownloadLatestVersionUsingGETResponse
func (c *ClientWithResponses) DownloadLatestVersionUsingGETWithResponse(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*DownloadLatestVersionUsingGETResponse, error) {
	rsp, err := c.DownloadLatestVersionUsingGET(ctx, pPackage, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadLatestVersionUsingGETResponse(rsp)
}

// DownloadByVersionAndTypeUsingGETWithResponse request returning *DownloadByVersionAndTypeUsingGETResponse
func (c *ClientWithResponses) DownloadByVersionAndTypeUsingGETWithResponse(ctx context.Context, pPackage string, assetType string, versionName string, reqEditors ...RequestEditorFn) (*DownloadByVersionAndTypeUsingGETResponse, error) {
	rsp, err := c.DownloadByVersionAndTypeUsingGET(ctx, pPackage, assetType, versionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadByVersionAndTypeUsingGETResponse(rsp)
}

// GoUsingGETWithResponse request returning *GoUsingGETResponse
func (c *ClientWithResponses) GoUsingGETWithResponse(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*GoUsingGETResponse, error) {
	rsp, err := c.GoUsingGET(ctx, pPackage, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGoUsingGETResponse(rsp)
}

// QueryVersionPageUsingGETWithResponse request returning *QueryVersionPageUsingGETResponse
func (c *ClientWithResponses) QueryVersionPageUsingGETWithResponse(ctx context.Context, pPackage string, params *QueryVersionPageUsingGETParams, reqEditors ...RequestEditorFn) (*QueryVersionPageUsingGETResponse, error) {
	rsp, err := c.QueryVersionPageUsingGET(ctx, pPackage, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryVersionPageUsingGETResponse(rsp)
}

// QueryLatestVersionUsingGETWithResponse request returning *QueryLatestVersionUsingGETResponse
func (c *ClientWithResponses) QueryLatestVersionUsingGETWithResponse(ctx context.Context, pPackage string, reqEditors ...RequestEditorFn) (*QueryLatestVersionUsingGETResponse, error) {
	rsp, err := c.QueryLatestVersionUsingGET(ctx, pPackage, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryLatestVersionUsingGETResponse(rsp)
}

// ParseListUsingGETResponse parses an HTTP response from a ListUsingGETWithResponse call
func ParseListUsingGETResponse(rsp *http.Response) (*ListUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyListDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsertUsingPOSTResponse parses an HTTP response from a InsertUsingPOSTWithResponse call
func ParseInsertUsingPOSTResponse(rsp *http.Response) (*InsertUsingPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertUsingPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPageUsingGETResponse parses an HTTP response from a ListPageUsingGETWithResponse call
func ParseListPageUsingGETResponse(rsp *http.Response) (*ListPageUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPageUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyPageResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUsingDELETEResponse parses an HTTP response from a DeleteUsingDELETEWithResponse call
func ParseDeleteUsingDELETEResponse(rsp *http.Response) (*DeleteUsingDELETEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsingDELETEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOneUsingGETResponse parses an HTTP response from a OneUsingGETWithResponse call
func ParseOneUsingGETResponse(rsp *http.Response) (*OneUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUsingPUTResponse parses an HTTP response from a UpdateUsingPUTWithResponse call
func ParseUpdateUsingPUTResponse(rsp *http.Response) (*UpdateUsingPUTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUsingPUTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsingGET2Response parses an HTTP response from a ListUsingGET2WithResponse call
func ParseListUsingGET2Response(rsp *http.Response) (*ListUsingGET2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsingGET2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameInfoListDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsertUsingPOST2Response parses an HTTP response from a InsertUsingPOST2WithResponse call
func ParseInsertUsingPOST2Response(rsp *http.Response) (*InsertUsingPOST2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertUsingPOST2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameInfoDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPageUsingGET1Response parses an HTTP response from a ListPageUsingGET1WithResponse call
func ParseListPageUsingGET1Response(rsp *http.Response) (*ListPageUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPageUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameInfoPageResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUsingDELETE2Response parses an HTTP response from a DeleteUsingDELETE2WithResponse call
func ParseDeleteUsingDELETE2Response(rsp *http.Response) (*DeleteUsingDELETE2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsingDELETE2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOneUsingGET1Response parses an HTTP response from a OneUsingGET1WithResponse call
func ParseOneUsingGET1Response(rsp *http.Response) (*OneUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameInfoDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUsingPUT2Response parses an HTTP response from a UpdateUsingPUT2WithResponse call
func ParseUpdateUsingPUT2Response(rsp *http.Response) (*UpdateUsingPUT2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUsingPUT2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUsingDELETE1Response parses an HTTP response from a DeleteUsingDELETE1WithResponse call
func ParseDeleteUsingDELETE1Response(rsp *http.Response) (*DeleteUsingDELETE1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsingDELETE1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryUsingGETResponse parses an HTTP response from a QueryUsingGETWithResponse call
func ParseQueryUsingGETResponse(rsp *http.Response) (*QueryUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameConfigVoDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsertUsingPOST1Response parses an HTTP response from a InsertUsingPOST1WithResponse call
func ParseInsertUsingPOST1Response(rsp *http.Response) (*InsertUsingPOST1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertUsingPOST1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsingGET1Response parses an HTTP response from a ListUsingGET1WithResponse call
func ParseListUsingGET1Response(rsp *http.Response) (*ListUsingGET1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsingGET1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameConfigVoListDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUsingPUT1Response parses an HTTP response from a UpdateUsingPUT1WithResponse call
func ParseUpdateUsingPUT1Response(rsp *http.Response) (*UpdateUsingPUT1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUsingPUT1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryUsingGET12Response parses an HTTP response from a QueryUsingGET12WithResponse call
func ParseQueryUsingGET12Response(rsp *http.Response) (*QueryUsingGET12Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUsingGET12Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryUsingGET23Response parses an HTTP response from a QueryUsingGET23WithResponse call
func ParseQueryUsingGET23Response(rsp *http.Response) (*QueryUsingGET23Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUsingGET23Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadLatestVersionUsingGETResponse parses an HTTP response from a DownloadLatestVersionUsingGETWithResponse call
func ParseDownloadLatestVersionUsingGETResponse(rsp *http.Response) (*DownloadLatestVersionUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadLatestVersionUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDownloadByVersionAndTypeUsingGETResponse parses an HTTP response from a DownloadByVersionAndTypeUsingGETWithResponse call
func ParseDownloadByVersionAndTypeUsingGETResponse(rsp *http.Response) (*DownloadByVersionAndTypeUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadByVersionAndTypeUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGoUsingGETResponse parses an HTTP response from a GoUsingGETWithResponse call
func ParseGoUsingGETResponse(rsp *http.Response) (*GoUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GoUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryVersionPageUsingGETResponse parses an HTTP response from a QueryVersionPageUsingGETWithResponse call
func ParseQueryVersionPageUsingGETResponse(rsp *http.Response) (*QueryVersionPageUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryVersionPageUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PackageVersionPageDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryLatestVersionUsingGETResponse parses an HTTP response from a QueryLatestVersionUsingGETWithResponse call
func ParseQueryLatestVersionUsingGETResponse(rsp *http.Response) (*QueryLatestVersionUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryLatestVersionUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PackageVersionDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
