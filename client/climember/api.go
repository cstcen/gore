// Package climember provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package climember

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/cstcen/gore/doc/externalref/parameter"
	externalRef1 "github.com/cstcen/gore/doc/externalref/response"
	externalRef2 "github.com/cstcen/gore/doc/externalref/schema"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Gender.
const (
	GenderFemale  Gender = 2
	GenderMale    Gender = 1
	GenderUnknown Gender = 0
)

// Defines values for LoginType.
const (
	LoginTypeApple      LoginType = 8
	LoginTypePhone      LoginType = 3
	LoginTypePwd        LoginType = 4
	LoginTypeQq         LoginType = 1
	LoginTypeSgxqMsdkQq LoginType = 5
	LoginTypeSgxqMsdkWx LoginType = 6
	LoginTypeWegame     LoginType = 7
	LoginTypeWx         LoginType = 2
)

// Defines values for PrivilegeType.
const (
	SqGameCenter PrivilegeType = "SqGameCenter"
	WxGameCenter PrivilegeType = "WxGameCenter"
)

// Defines values for SceneIsPublicScene.
const (
	Leaderboard      SceneIsPublicScene = "leaderboard"
	PlatformNickname SceneIsPublicScene = "platform_nickname"
	UserInfo         SceneIsPublicScene = "user_info"
)

// CharacterInfos defines model for CharacterInfos.
type CharacterInfos struct {
	List *[]externalRef2.CharacterInfo `json:"list,omitempty"`
}

// CharacterNo 角色编号
type CharacterNo = int64

// CharacterNos 多个ID使用逗号分隔
type CharacterNos = string

// CreateTime Unix Time
type CreateTime = int64

// Gender 性别：
// * `0` - 未定义
// * `1` - 男
// * `2` - 女
type Gender int

// LoginType * `1` - Qq
// * `2` - Wx
// * `3` - Phone
// * `4` - Pwd
// * `5` - SgxqMsdkQq
// * `6` - SgxqMsdkWx
// * `7` - Wegame
// * `8` - Apple
type LoginType int

// LoginValue defines model for LoginValue.
type LoginValue = string

// MemberAuthInfo defines model for MemberAuthInfo.
type MemberAuthInfo struct {
	// CreateTime Unix Time
	CreateTime CreateTime `json:"create_time"`

	// LoginType * `1` - Qq
	// * `2` - Wx
	// * `3` - Phone
	// * `4` - Pwd
	// * `5` - SgxqMsdkQq
	// * `6` - SgxqMsdkWx
	// * `7` - Wegame
	// * `8` - Apple
	LoginType  LoginType             `json:"login_type"`
	LoginValue LoginValue            `json:"login_value"`
	MemberNo   externalRef2.MemberNo `json:"member_no"`

	// UpdateTime Unix Time
	UpdateTime UpdateTime `json:"update_time"`
}

// MemberInfo defines model for MemberInfo.
type MemberInfo struct {
	// CreateTime Unix Milli
	CreateTime int64 `json:"create_time"`

	// Gender 性别：
	// * `0` - 未定义
	// * `1` - 男
	// * `2` - 女
	Gender   Gender                `json:"gender"`
	MemberNo externalRef2.MemberNo `json:"member_no"`
	Nickname externalRef2.Nickname `json:"nickname"`

	// OpenId XK5 OpenID
	OpenId string `json:"open_id"`

	// ProfileImg 头像 URL
	ProfileImg string `json:"profile_img"`

	// UnionId XK5 UnionID
	UnionId string `json:"union_id"`

	// UpdateTime Unix Milli
	UpdateTime int64 `json:"update_time"`
}

// MemberPunishInfo defines model for MemberPunishInfo.
type MemberPunishInfo struct {
	BeginTime int64                 `json:"begin_time"`
	Content   string                `json:"content"`
	EndTime   int64                 `json:"end_time"`
	MemberNo  externalRef2.MemberNo `json:"member_no"`
	PunishId  string                `json:"punish_id"`
	Title     string                `json:"title"`
}

// Nickname 昵称
type Nickname = string

// Nicknames 多个昵称使用逗号分隔
type Nicknames = string

// Password 密码
type Password = string

// PersonalData defines model for PersonalData.
type PersonalData = []PersonalData_Item

// PersonalData_Item defines model for PersonalData.Item.
type PersonalData_Item struct {
	union json.RawMessage
}

// PrivilegeType 特权启动类型:
// * `WxGameCenter` - 微信
// * `SqGameCenter` - 手Q
type PrivilegeType string

// PutCharacterRequestBody 需要更新的字段
type PutCharacterRequestBody struct {
	// Nickname 昵称
	Nickname     *Nickname     `json:"nickname,omitempty"`
	PersonalData *PersonalData `json:"personal_data,omitempty"`
}

// SceneIsPublic defines model for SceneIsPublic.
type SceneIsPublic struct {
	IsPublic bool               `json:"is_public"`
	Scene    SceneIsPublicScene `json:"scene"`
}

// SceneIsPublicScene defines model for SceneIsPublic.Scene.
type SceneIsPublicScene string

// UpdateTime Unix Time
type UpdateTime = int64

// WorldId 游戏区服
type WorldId = int32

// CharacterNoInPath 角色编号
type CharacterNoInPath = CharacterNo

// CharacterNosInQuery 多个ID使用逗号分隔
type CharacterNosInQuery = CharacterNos

// LoginTypeInPath * `1` - Qq
// * `2` - Wx
// * `3` - Phone
// * `4` - Pwd
// * `5` - SgxqMsdkQq
// * `6` - SgxqMsdkWx
// * `7` - Wegame
// * `8` - Apple
type LoginTypeInPath = LoginType

// LoginValueInPath defines model for LoginValueInPath.
type LoginValueInPath = LoginValue

// MemberNoInPath defines model for MemberNoInPath.
type MemberNoInPath = externalRef2.MemberNo

// NicknameInPath 昵称
type NicknameInPath = Nickname

// NicknamesInQuery 多个昵称使用逗号分隔
type NicknamesInQuery = Nicknames

// PageInQuery defines model for PageInQuery.
type PageInQuery = int

// PageSizeInQuery defines model for PageSizeInQuery.
type PageSizeInQuery = int

// PasswordInQuery 密码
type PasswordInQuery = Password

// WorldInQuery 游戏区服
type WorldInQuery = WorldId

// GetMemberV42CharactersParams defines parameters for GetMemberV42Characters.
type GetMemberV42CharactersParams struct {
	Nicknames    *NicknamesInQuery    `form:"nicknames,omitempty" json:"nicknames,omitempty"`
	CharacterNos *CharacterNosInQuery `form:"characterNos,omitempty" json:"characterNos,omitempty"`
	WorldId      *WorldInQuery        `form:"worldId,omitempty" json:"worldId,omitempty"`
}

// PostMemberV42CharactersJSONBody defines parameters for PostMemberV42Characters.
type PostMemberV42CharactersJSONBody struct {
	// Nickname 昵称
	Nickname Nickname `json:"nickname"`

	// WorldId 游戏区服
	WorldId WorldId `json:"world_id"`
}

// GetMemberV42CharactersMemberMemberNoParams defines parameters for GetMemberV42CharactersMemberMemberNo.
type GetMemberV42CharactersMemberMemberNoParams struct {
	WorldId *WorldInQuery `form:"worldId,omitempty" json:"worldId,omitempty"`
}

// GetMemberV42CharactersNicknameNicknameParams defines parameters for GetMemberV42CharactersNicknameNickname.
type GetMemberV42CharactersNicknameNicknameParams struct {
	WorldId *WorldInQuery `form:"worldId,omitempty" json:"worldId,omitempty"`
}

// DeleteMemberV42CharactersCharacterNoParams defines parameters for DeleteMemberV42CharactersCharacterNo.
type DeleteMemberV42CharactersCharacterNoParams struct {
	WorldId *WorldInQuery `form:"worldId,omitempty" json:"worldId,omitempty"`
}

// GetMemberV42CharactersCharacterNoParams defines parameters for GetMemberV42CharactersCharacterNo.
type GetMemberV42CharactersCharacterNoParams struct {
	WorldId *WorldInQuery `form:"worldId,omitempty" json:"worldId,omitempty"`
}

// PutMemberV42CharactersCharacterNoParams defines parameters for PutMemberV42CharactersCharacterNo.
type PutMemberV42CharactersCharacterNoParams struct {
	WorldId *WorldInQuery `form:"worldId,omitempty" json:"worldId,omitempty"`
}

// PostMemberV42MembersJSONBody defines parameters for PostMemberV42Members.
type PostMemberV42MembersJSONBody struct {
	AppId int `json:"app_id"`

	// Gender 性别：
	// * `0` - 未定义
	// * `1` - 男
	// * `2` - 女
	Gender *Gender `json:"gender,omitempty"`

	// LoginType * `1` - Qq
	// * `2` - Wx
	// * `3` - Phone
	// * `4` - Pwd
	// * `5` - SgxqMsdkQq
	// * `6` - SgxqMsdkWx
	// * `7` - Wegame
	// * `8` - Apple
	LoginType  LoginType              `json:"login_type"`
	LoginValue LoginValue             `json:"login_value"`
	Nickname   *externalRef2.Nickname `json:"nickname,omitempty"`
	ProfileImg *string                `json:"profile_img,omitempty"`
}

// GetMemberV42MembersAuthLoginTypeLoginValueParams defines parameters for GetMemberV42MembersAuthLoginTypeLoginValue.
type GetMemberV42MembersAuthLoginTypeLoginValueParams struct {
	// Password 当且仅当，loginType=4时，必填。
	Password *PasswordInQuery `form:"password,omitempty" json:"password,omitempty"`
}

// DeleteMemberV42MembersPrivilegeLaunchJSONBody defines parameters for DeleteMemberV42MembersPrivilegeLaunch.
type DeleteMemberV42MembersPrivilegeLaunchJSONBody struct {
	// PrivilegeType 特权启动类型:
	// * `WxGameCenter` - 微信
	// * `SqGameCenter` - 手Q
	PrivilegeType PrivilegeType `json:"privilege_type"`
}

// PostMemberV42MembersPrivilegeLaunchJSONBody defines parameters for PostMemberV42MembersPrivilegeLaunch.
type PostMemberV42MembersPrivilegeLaunchJSONBody struct {
	// PrivilegeType 特权启动类型:
	// * `WxGameCenter` - 微信
	// * `SqGameCenter` - 手Q
	PrivilegeType PrivilegeType `json:"privilege_type"`
}

// GetMemberV42MembersPrivilegeLaunchMemberMemberNoParams defines parameters for GetMemberV42MembersPrivilegeLaunchMemberMemberNo.
type GetMemberV42MembersPrivilegeLaunchMemberMemberNoParams struct {
	PrivilegeType *PrivilegeType `form:"privilegeType,omitempty" json:"privilegeType,omitempty"`
}

// GetMemberV42MembersPunishMemberMemberNoParams defines parameters for GetMemberV42MembersPunishMemberMemberNo.
type GetMemberV42MembersPunishMemberMemberNoParams struct {
	// Page 页数
	Page *PageInQuery `form:"page,omitempty" json:"page,omitempty"`

	// PageSize 每页数量
	PageSize *PageSizeInQuery `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// PostMemberV42CharactersJSONRequestBody defines body for PostMemberV42Characters for application/json ContentType.
type PostMemberV42CharactersJSONRequestBody PostMemberV42CharactersJSONBody

// PutMemberV42CharactersCharacterNoJSONRequestBody defines body for PutMemberV42CharactersCharacterNo for application/json ContentType.
type PutMemberV42CharactersCharacterNoJSONRequestBody = PutCharacterRequestBody

// PostMemberV42MembersJSONRequestBody defines body for PostMemberV42Members for application/json ContentType.
type PostMemberV42MembersJSONRequestBody PostMemberV42MembersJSONBody

// DeleteMemberV42MembersPrivilegeLaunchJSONRequestBody defines body for DeleteMemberV42MembersPrivilegeLaunch for application/json ContentType.
type DeleteMemberV42MembersPrivilegeLaunchJSONRequestBody DeleteMemberV42MembersPrivilegeLaunchJSONBody

// PostMemberV42MembersPrivilegeLaunchJSONRequestBody defines body for PostMemberV42MembersPrivilegeLaunch for application/json ContentType.
type PostMemberV42MembersPrivilegeLaunchJSONRequestBody PostMemberV42MembersPrivilegeLaunchJSONBody

// AsSceneIsPublic returns the union data inside the PersonalData_Item as a SceneIsPublic
func (t PersonalData_Item) AsSceneIsPublic() (SceneIsPublic, error) {
	var body SceneIsPublic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSceneIsPublic overwrites any union data inside the PersonalData_Item as the provided SceneIsPublic
func (t *PersonalData_Item) FromSceneIsPublic(v SceneIsPublic) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSceneIsPublic performs a merge with any union data inside the PersonalData_Item, using the provided SceneIsPublic
func (t *PersonalData_Item) MergeSceneIsPublic(v SceneIsPublic) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PersonalData_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PersonalData_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMemberV42Characters request
	GetMemberV42Characters(ctx context.Context, params *GetMemberV42CharactersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMemberV42CharactersWithBody request with any body
	PostMemberV42CharactersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMemberV42Characters(ctx context.Context, body PostMemberV42CharactersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberV42CharactersMemberMemberNo request
	GetMemberV42CharactersMemberMemberNo(ctx context.Context, memberNo MemberNoInPath, params *GetMemberV42CharactersMemberMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberV42CharactersNicknameNickname request
	GetMemberV42CharactersNicknameNickname(ctx context.Context, nickname NicknameInPath, params *GetMemberV42CharactersNicknameNicknameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMemberV42CharactersCharacterNo request
	DeleteMemberV42CharactersCharacterNo(ctx context.Context, characterNo CharacterNoInPath, params *DeleteMemberV42CharactersCharacterNoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberV42CharactersCharacterNo request
	GetMemberV42CharactersCharacterNo(ctx context.Context, characterNo CharacterNoInPath, params *GetMemberV42CharactersCharacterNoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMemberV42CharactersCharacterNoWithBody request with any body
	PutMemberV42CharactersCharacterNoWithBody(ctx context.Context, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMemberV42CharactersCharacterNo(ctx context.Context, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, body PutMemberV42CharactersCharacterNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMemberV42MembersWithBody request with any body
	PostMemberV42MembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMemberV42Members(ctx context.Context, body PostMemberV42MembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberV42MembersAuthMemberMemberNo request
	GetMemberV42MembersAuthMemberMemberNo(ctx context.Context, memberNo externalRef0.MemberNoInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberV42MembersAuthLoginTypeLoginValue request
	GetMemberV42MembersAuthLoginTypeLoginValue(ctx context.Context, loginType LoginTypeInPath, loginValue LoginValueInPath, params *GetMemberV42MembersAuthLoginTypeLoginValueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMemberV42MembersPrivilegeLaunchWithBody request with any body
	DeleteMemberV42MembersPrivilegeLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteMemberV42MembersPrivilegeLaunch(ctx context.Context, body DeleteMemberV42MembersPrivilegeLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMemberV42MembersPrivilegeLaunchWithBody request with any body
	PostMemberV42MembersPrivilegeLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMemberV42MembersPrivilegeLaunch(ctx context.Context, body PostMemberV42MembersPrivilegeLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberV42MembersPrivilegeLaunchMemberMemberNo request
	GetMemberV42MembersPrivilegeLaunchMemberMemberNo(ctx context.Context, memberNo MemberNoInPath, params *GetMemberV42MembersPrivilegeLaunchMemberMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemberV42MembersPunishMemberMemberNo request
	GetMemberV42MembersPunishMemberMemberNo(ctx context.Context, memberNo externalRef0.MemberNoInPath, params *GetMemberV42MembersPunishMemberMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetMemberV42Characters(ctx context.Context, params *GetMemberV42CharactersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberV42CharactersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMemberV42CharactersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMemberV42CharactersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMemberV42Characters(ctx context.Context, body PostMemberV42CharactersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMemberV42CharactersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberV42CharactersMemberMemberNo(ctx context.Context, memberNo MemberNoInPath, params *GetMemberV42CharactersMemberMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberV42CharactersMemberMemberNoRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberV42CharactersNicknameNickname(ctx context.Context, nickname NicknameInPath, params *GetMemberV42CharactersNicknameNicknameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberV42CharactersNicknameNicknameRequest(c.Server, nickname, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMemberV42CharactersCharacterNo(ctx context.Context, characterNo CharacterNoInPath, params *DeleteMemberV42CharactersCharacterNoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMemberV42CharactersCharacterNoRequest(c.Server, characterNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberV42CharactersCharacterNo(ctx context.Context, characterNo CharacterNoInPath, params *GetMemberV42CharactersCharacterNoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberV42CharactersCharacterNoRequest(c.Server, characterNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMemberV42CharactersCharacterNoWithBody(ctx context.Context, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMemberV42CharactersCharacterNoRequestWithBody(c.Server, characterNo, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMemberV42CharactersCharacterNo(ctx context.Context, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, body PutMemberV42CharactersCharacterNoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMemberV42CharactersCharacterNoRequest(c.Server, characterNo, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMemberV42MembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMemberV42MembersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMemberV42Members(ctx context.Context, body PostMemberV42MembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMemberV42MembersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberV42MembersAuthMemberMemberNo(ctx context.Context, memberNo externalRef0.MemberNoInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberV42MembersAuthMemberMemberNoRequest(c.Server, memberNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberV42MembersAuthLoginTypeLoginValue(ctx context.Context, loginType LoginTypeInPath, loginValue LoginValueInPath, params *GetMemberV42MembersAuthLoginTypeLoginValueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberV42MembersAuthLoginTypeLoginValueRequest(c.Server, loginType, loginValue, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMemberV42MembersPrivilegeLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMemberV42MembersPrivilegeLaunchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMemberV42MembersPrivilegeLaunch(ctx context.Context, body DeleteMemberV42MembersPrivilegeLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMemberV42MembersPrivilegeLaunchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMemberV42MembersPrivilegeLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMemberV42MembersPrivilegeLaunchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMemberV42MembersPrivilegeLaunch(ctx context.Context, body PostMemberV42MembersPrivilegeLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMemberV42MembersPrivilegeLaunchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberV42MembersPrivilegeLaunchMemberMemberNo(ctx context.Context, memberNo MemberNoInPath, params *GetMemberV42MembersPrivilegeLaunchMemberMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberV42MembersPrivilegeLaunchMemberMemberNoRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemberV42MembersPunishMemberMemberNo(ctx context.Context, memberNo externalRef0.MemberNoInPath, params *GetMemberV42MembersPunishMemberMemberNoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemberV42MembersPunishMemberMemberNoRequest(c.Server, memberNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetMemberV42CharactersRequest generates requests for GetMemberV42Characters
func NewGetMemberV42CharactersRequest(server string, params *GetMemberV42CharactersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Nicknames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nicknames", runtime.ParamLocationQuery, *params.Nicknames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CharacterNos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "characterNos", runtime.ParamLocationQuery, *params.CharacterNos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "worldId", runtime.ParamLocationQuery, *params.WorldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMemberV42CharactersRequest calls the generic PostMemberV42Characters builder with application/json body
func NewPostMemberV42CharactersRequest(server string, body PostMemberV42CharactersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMemberV42CharactersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMemberV42CharactersRequestWithBody generates requests for PostMemberV42Characters with any type of body
func NewPostMemberV42CharactersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMemberV42CharactersMemberMemberNoRequest generates requests for GetMemberV42CharactersMemberMemberNo
func NewGetMemberV42CharactersMemberMemberNoRequest(server string, memberNo MemberNoInPath, params *GetMemberV42CharactersMemberMemberNoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/characters/member/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "worldId", runtime.ParamLocationQuery, *params.WorldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemberV42CharactersNicknameNicknameRequest generates requests for GetMemberV42CharactersNicknameNickname
func NewGetMemberV42CharactersNicknameNicknameRequest(server string, nickname NicknameInPath, params *GetMemberV42CharactersNicknameNicknameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nickname", runtime.ParamLocationPath, nickname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/characters/nickname/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "worldId", runtime.ParamLocationQuery, *params.WorldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMemberV42CharactersCharacterNoRequest generates requests for DeleteMemberV42CharactersCharacterNo
func NewDeleteMemberV42CharactersCharacterNoRequest(server string, characterNo CharacterNoInPath, params *DeleteMemberV42CharactersCharacterNoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "characterNo", runtime.ParamLocationPath, characterNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "worldId", runtime.ParamLocationQuery, *params.WorldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemberV42CharactersCharacterNoRequest generates requests for GetMemberV42CharactersCharacterNo
func NewGetMemberV42CharactersCharacterNoRequest(server string, characterNo CharacterNoInPath, params *GetMemberV42CharactersCharacterNoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "characterNo", runtime.ParamLocationPath, characterNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "worldId", runtime.ParamLocationQuery, *params.WorldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMemberV42CharactersCharacterNoRequest calls the generic PutMemberV42CharactersCharacterNo builder with application/json body
func NewPutMemberV42CharactersCharacterNoRequest(server string, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, body PutMemberV42CharactersCharacterNoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMemberV42CharactersCharacterNoRequestWithBody(server, characterNo, params, "application/json", bodyReader)
}

// NewPutMemberV42CharactersCharacterNoRequestWithBody generates requests for PutMemberV42CharactersCharacterNo with any type of body
func NewPutMemberV42CharactersCharacterNoRequestWithBody(server string, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "characterNo", runtime.ParamLocationPath, characterNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorldId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "worldId", runtime.ParamLocationQuery, *params.WorldId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMemberV42MembersRequest calls the generic PostMemberV42Members builder with application/json body
func NewPostMemberV42MembersRequest(server string, body PostMemberV42MembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMemberV42MembersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMemberV42MembersRequestWithBody generates requests for PostMemberV42Members with any type of body
func NewPostMemberV42MembersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/members")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMemberV42MembersAuthMemberMemberNoRequest generates requests for GetMemberV42MembersAuthMemberMemberNo
func NewGetMemberV42MembersAuthMemberMemberNoRequest(server string, memberNo externalRef0.MemberNoInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/members/auth/member/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemberV42MembersAuthLoginTypeLoginValueRequest generates requests for GetMemberV42MembersAuthLoginTypeLoginValue
func NewGetMemberV42MembersAuthLoginTypeLoginValueRequest(server string, loginType LoginTypeInPath, loginValue LoginValueInPath, params *GetMemberV42MembersAuthLoginTypeLoginValueParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "loginType", runtime.ParamLocationPath, loginType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "loginValue", runtime.ParamLocationPath, loginValue)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/members/auth/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Password != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMemberV42MembersPrivilegeLaunchRequest calls the generic DeleteMemberV42MembersPrivilegeLaunch builder with application/json body
func NewDeleteMemberV42MembersPrivilegeLaunchRequest(server string, body DeleteMemberV42MembersPrivilegeLaunchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteMemberV42MembersPrivilegeLaunchRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteMemberV42MembersPrivilegeLaunchRequestWithBody generates requests for DeleteMemberV42MembersPrivilegeLaunch with any type of body
func NewDeleteMemberV42MembersPrivilegeLaunchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/members/privilege/launch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMemberV42MembersPrivilegeLaunchRequest calls the generic PostMemberV42MembersPrivilegeLaunch builder with application/json body
func NewPostMemberV42MembersPrivilegeLaunchRequest(server string, body PostMemberV42MembersPrivilegeLaunchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMemberV42MembersPrivilegeLaunchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMemberV42MembersPrivilegeLaunchRequestWithBody generates requests for PostMemberV42MembersPrivilegeLaunch with any type of body
func NewPostMemberV42MembersPrivilegeLaunchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/members/privilege/launch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMemberV42MembersPrivilegeLaunchMemberMemberNoRequest generates requests for GetMemberV42MembersPrivilegeLaunchMemberMemberNo
func NewGetMemberV42MembersPrivilegeLaunchMemberMemberNoRequest(server string, memberNo MemberNoInPath, params *GetMemberV42MembersPrivilegeLaunchMemberMemberNoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/members/privilege/launch/member/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PrivilegeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "privilegeType", runtime.ParamLocationQuery, *params.PrivilegeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemberV42MembersPunishMemberMemberNoRequest generates requests for GetMemberV42MembersPunishMemberMemberNo
func NewGetMemberV42MembersPunishMemberMemberNoRequest(server string, memberNo externalRef0.MemberNoInPath, params *GetMemberV42MembersPunishMemberMemberNoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "memberNo", runtime.ParamLocationPath, memberNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/member/v4.2/members/punish/member/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMemberV42CharactersWithResponse request
	GetMemberV42CharactersWithResponse(ctx context.Context, params *GetMemberV42CharactersParams, reqEditors ...RequestEditorFn) (*GetMemberV42CharactersResponse, error)

	// PostMemberV42CharactersWithBodyWithResponse request with any body
	PostMemberV42CharactersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMemberV42CharactersResponse, error)

	PostMemberV42CharactersWithResponse(ctx context.Context, body PostMemberV42CharactersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMemberV42CharactersResponse, error)

	// GetMemberV42CharactersMemberMemberNoWithResponse request
	GetMemberV42CharactersMemberMemberNoWithResponse(ctx context.Context, memberNo MemberNoInPath, params *GetMemberV42CharactersMemberMemberNoParams, reqEditors ...RequestEditorFn) (*GetMemberV42CharactersMemberMemberNoResponse, error)

	// GetMemberV42CharactersNicknameNicknameWithResponse request
	GetMemberV42CharactersNicknameNicknameWithResponse(ctx context.Context, nickname NicknameInPath, params *GetMemberV42CharactersNicknameNicknameParams, reqEditors ...RequestEditorFn) (*GetMemberV42CharactersNicknameNicknameResponse, error)

	// DeleteMemberV42CharactersCharacterNoWithResponse request
	DeleteMemberV42CharactersCharacterNoWithResponse(ctx context.Context, characterNo CharacterNoInPath, params *DeleteMemberV42CharactersCharacterNoParams, reqEditors ...RequestEditorFn) (*DeleteMemberV42CharactersCharacterNoResponse, error)

	// GetMemberV42CharactersCharacterNoWithResponse request
	GetMemberV42CharactersCharacterNoWithResponse(ctx context.Context, characterNo CharacterNoInPath, params *GetMemberV42CharactersCharacterNoParams, reqEditors ...RequestEditorFn) (*GetMemberV42CharactersCharacterNoResponse, error)

	// PutMemberV42CharactersCharacterNoWithBodyWithResponse request with any body
	PutMemberV42CharactersCharacterNoWithBodyWithResponse(ctx context.Context, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMemberV42CharactersCharacterNoResponse, error)

	PutMemberV42CharactersCharacterNoWithResponse(ctx context.Context, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, body PutMemberV42CharactersCharacterNoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMemberV42CharactersCharacterNoResponse, error)

	// PostMemberV42MembersWithBodyWithResponse request with any body
	PostMemberV42MembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMemberV42MembersResponse, error)

	PostMemberV42MembersWithResponse(ctx context.Context, body PostMemberV42MembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMemberV42MembersResponse, error)

	// GetMemberV42MembersAuthMemberMemberNoWithResponse request
	GetMemberV42MembersAuthMemberMemberNoWithResponse(ctx context.Context, memberNo externalRef0.MemberNoInPath, reqEditors ...RequestEditorFn) (*GetMemberV42MembersAuthMemberMemberNoResponse, error)

	// GetMemberV42MembersAuthLoginTypeLoginValueWithResponse request
	GetMemberV42MembersAuthLoginTypeLoginValueWithResponse(ctx context.Context, loginType LoginTypeInPath, loginValue LoginValueInPath, params *GetMemberV42MembersAuthLoginTypeLoginValueParams, reqEditors ...RequestEditorFn) (*GetMemberV42MembersAuthLoginTypeLoginValueResponse, error)

	// DeleteMemberV42MembersPrivilegeLaunchWithBodyWithResponse request with any body
	DeleteMemberV42MembersPrivilegeLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMemberV42MembersPrivilegeLaunchResponse, error)

	DeleteMemberV42MembersPrivilegeLaunchWithResponse(ctx context.Context, body DeleteMemberV42MembersPrivilegeLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMemberV42MembersPrivilegeLaunchResponse, error)

	// PostMemberV42MembersPrivilegeLaunchWithBodyWithResponse request with any body
	PostMemberV42MembersPrivilegeLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMemberV42MembersPrivilegeLaunchResponse, error)

	PostMemberV42MembersPrivilegeLaunchWithResponse(ctx context.Context, body PostMemberV42MembersPrivilegeLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMemberV42MembersPrivilegeLaunchResponse, error)

	// GetMemberV42MembersPrivilegeLaunchMemberMemberNoWithResponse request
	GetMemberV42MembersPrivilegeLaunchMemberMemberNoWithResponse(ctx context.Context, memberNo MemberNoInPath, params *GetMemberV42MembersPrivilegeLaunchMemberMemberNoParams, reqEditors ...RequestEditorFn) (*GetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse, error)

	// GetMemberV42MembersPunishMemberMemberNoWithResponse request
	GetMemberV42MembersPunishMemberMemberNoWithResponse(ctx context.Context, memberNo externalRef0.MemberNoInPath, params *GetMemberV42MembersPunishMemberMemberNoParams, reqEditors ...RequestEditorFn) (*GetMemberV42MembersPunishMemberMemberNoResponse, error)
}

type GetMemberV42CharactersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int             `json:"code"`
		Data    *CharacterInfos `json:"data,omitempty"`
		Message string          `json:"message"`
	}
	JSON400 *externalRef1.BadRequest
	JSON401 *externalRef1.Unauthorized
	JSON404 *externalRef1.NotFound
	JSON500 *externalRef1.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetMemberV42CharactersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberV42CharactersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMemberV42CharactersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int `json:"code"`
		Data *struct {
			// CharacterNo 角色编号
			CharacterNo *CharacterNo `json:"character_no,omitempty"`
		} `json:"data,omitempty"`
		Message string `json:"message"`
	}
	JSON201 *struct {
		Code int `json:"code"`
		Data *struct {
			// CharacterNo 角色编号
			CharacterNo *CharacterNo `json:"character_no,omitempty"`
		} `json:"data,omitempty"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostMemberV42CharactersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMemberV42CharactersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberV42CharactersMemberMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int `json:"code"`

		// Data 角色信息
		Data    *externalRef2.CharacterInfo `json:"data,omitempty"`
		Message string                      `json:"message"`
	}
	JSON400 *externalRef1.BadRequest
	JSON401 *externalRef1.Unauthorized
	JSON404 *externalRef1.NotFound
	JSON500 *externalRef1.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetMemberV42CharactersMemberMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberV42CharactersMemberMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberV42CharactersNicknameNicknameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int `json:"code"`

		// Data 角色信息
		Data    *externalRef2.CharacterInfo `json:"data,omitempty"`
		Message string                      `json:"message"`
	}
	JSON400 *externalRef1.BadRequest
	JSON401 *externalRef1.Unauthorized
	JSON404 *externalRef1.NotFound
	JSON500 *externalRef1.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetMemberV42CharactersNicknameNicknameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberV42CharactersNicknameNicknameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMemberV42CharactersCharacterNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef2.BaseResultResponse
	JSON400      *externalRef1.BadRequest
	JSON401      *externalRef1.Unauthorized
	JSON404      *externalRef1.NotFound
	JSON500      *externalRef1.InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteMemberV42CharactersCharacterNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMemberV42CharactersCharacterNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberV42CharactersCharacterNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int `json:"code"`

		// Data 角色信息
		Data    *externalRef2.CharacterInfo `json:"data,omitempty"`
		Message string                      `json:"message"`
	}
	JSON400 *externalRef1.BadRequest
	JSON401 *externalRef1.Unauthorized
	JSON404 *externalRef1.NotFound
	JSON500 *externalRef1.InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetMemberV42CharactersCharacterNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberV42CharactersCharacterNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMemberV42CharactersCharacterNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef2.BaseResultResponse
	JSON400      *externalRef1.BadRequest
	JSON401      *externalRef1.Unauthorized
	JSON404      *externalRef1.NotFound
}

// Status returns HTTPResponse.Status
func (r PutMemberV42CharactersCharacterNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMemberV42CharactersCharacterNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMemberV42MembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int         `json:"code"`
		Data    *MemberInfo `json:"data,omitempty"`
		Message string      `json:"message"`
	}
	JSON201 *struct {
		Code    int         `json:"code"`
		Data    *MemberInfo `json:"data,omitempty"`
		Message string      `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostMemberV42MembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMemberV42MembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberV42MembersAuthMemberMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int             `json:"code"`
		Data    *MemberAuthInfo `json:"data,omitempty"`
		Message string          `json:"message"`
	}
	JSON404 *externalRef2.BaseResultResponse
}

// Status returns HTTPResponse.Status
func (r GetMemberV42MembersAuthMemberMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberV42MembersAuthMemberMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberV42MembersAuthLoginTypeLoginValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int         `json:"code"`
		Data    *MemberInfo `json:"data,omitempty"`
		Message string      `json:"message"`
	}
	JSON400 *externalRef2.BaseResultResponse
	JSON404 *externalRef2.BaseResultResponse
}

// Status returns HTTPResponse.Status
func (r GetMemberV42MembersAuthLoginTypeLoginValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberV42MembersAuthLoginTypeLoginValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMemberV42MembersPrivilegeLaunchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef2.BaseResultResponse
	JSON400      *externalRef1.BadRequest
	JSON401      *externalRef1.Unauthorized
	JSON404      *externalRef1.NotFound
	JSON500      *externalRef1.InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteMemberV42MembersPrivilegeLaunchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMemberV42MembersPrivilegeLaunchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMemberV42MembersPrivilegeLaunchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef2.BaseResultResponse
	JSON400      *externalRef1.BadRequest
	JSON401      *externalRef1.Unauthorized
	JSON404      *externalRef1.NotFound
	JSON500      *externalRef1.InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostMemberV42MembersPrivilegeLaunchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMemberV42MembersPrivilegeLaunchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int `json:"code"`
		Data *struct {
			MemberNo          *externalRef2.MemberNo `json:"member_no,omitempty"`
			PrivilegeLaunchDt *string                `json:"privilege_launch_dt,omitempty"`

			// PrivilegeType 特权启动类型:
			// * `WxGameCenter` - 微信
			// * `SqGameCenter` - 手Q
			PrivilegeType *PrivilegeType `json:"privilege_type,omitempty"`
		} `json:"data,omitempty"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemberV42MembersPunishMemberMemberNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int `json:"code"`
		Data *struct {
			List *[]MemberPunishInfo `json:"list,omitempty"`
		} `json:"data,omitempty"`
		Message string `json:"message"`
	}
	JSON404 *externalRef2.BaseResultResponse
}

// Status returns HTTPResponse.Status
func (r GetMemberV42MembersPunishMemberMemberNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemberV42MembersPunishMemberMemberNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMemberV42CharactersWithResponse request returning *GetMemberV42CharactersResponse
func (c *ClientWithResponses) GetMemberV42CharactersWithResponse(ctx context.Context, params *GetMemberV42CharactersParams, reqEditors ...RequestEditorFn) (*GetMemberV42CharactersResponse, error) {
	rsp, err := c.GetMemberV42Characters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberV42CharactersResponse(rsp)
}

// PostMemberV42CharactersWithBodyWithResponse request with arbitrary body returning *PostMemberV42CharactersResponse
func (c *ClientWithResponses) PostMemberV42CharactersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMemberV42CharactersResponse, error) {
	rsp, err := c.PostMemberV42CharactersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMemberV42CharactersResponse(rsp)
}

func (c *ClientWithResponses) PostMemberV42CharactersWithResponse(ctx context.Context, body PostMemberV42CharactersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMemberV42CharactersResponse, error) {
	rsp, err := c.PostMemberV42Characters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMemberV42CharactersResponse(rsp)
}

// GetMemberV42CharactersMemberMemberNoWithResponse request returning *GetMemberV42CharactersMemberMemberNoResponse
func (c *ClientWithResponses) GetMemberV42CharactersMemberMemberNoWithResponse(ctx context.Context, memberNo MemberNoInPath, params *GetMemberV42CharactersMemberMemberNoParams, reqEditors ...RequestEditorFn) (*GetMemberV42CharactersMemberMemberNoResponse, error) {
	rsp, err := c.GetMemberV42CharactersMemberMemberNo(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberV42CharactersMemberMemberNoResponse(rsp)
}

// GetMemberV42CharactersNicknameNicknameWithResponse request returning *GetMemberV42CharactersNicknameNicknameResponse
func (c *ClientWithResponses) GetMemberV42CharactersNicknameNicknameWithResponse(ctx context.Context, nickname NicknameInPath, params *GetMemberV42CharactersNicknameNicknameParams, reqEditors ...RequestEditorFn) (*GetMemberV42CharactersNicknameNicknameResponse, error) {
	rsp, err := c.GetMemberV42CharactersNicknameNickname(ctx, nickname, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberV42CharactersNicknameNicknameResponse(rsp)
}

// DeleteMemberV42CharactersCharacterNoWithResponse request returning *DeleteMemberV42CharactersCharacterNoResponse
func (c *ClientWithResponses) DeleteMemberV42CharactersCharacterNoWithResponse(ctx context.Context, characterNo CharacterNoInPath, params *DeleteMemberV42CharactersCharacterNoParams, reqEditors ...RequestEditorFn) (*DeleteMemberV42CharactersCharacterNoResponse, error) {
	rsp, err := c.DeleteMemberV42CharactersCharacterNo(ctx, characterNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMemberV42CharactersCharacterNoResponse(rsp)
}

// GetMemberV42CharactersCharacterNoWithResponse request returning *GetMemberV42CharactersCharacterNoResponse
func (c *ClientWithResponses) GetMemberV42CharactersCharacterNoWithResponse(ctx context.Context, characterNo CharacterNoInPath, params *GetMemberV42CharactersCharacterNoParams, reqEditors ...RequestEditorFn) (*GetMemberV42CharactersCharacterNoResponse, error) {
	rsp, err := c.GetMemberV42CharactersCharacterNo(ctx, characterNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberV42CharactersCharacterNoResponse(rsp)
}

// PutMemberV42CharactersCharacterNoWithBodyWithResponse request with arbitrary body returning *PutMemberV42CharactersCharacterNoResponse
func (c *ClientWithResponses) PutMemberV42CharactersCharacterNoWithBodyWithResponse(ctx context.Context, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMemberV42CharactersCharacterNoResponse, error) {
	rsp, err := c.PutMemberV42CharactersCharacterNoWithBody(ctx, characterNo, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMemberV42CharactersCharacterNoResponse(rsp)
}

func (c *ClientWithResponses) PutMemberV42CharactersCharacterNoWithResponse(ctx context.Context, characterNo CharacterNoInPath, params *PutMemberV42CharactersCharacterNoParams, body PutMemberV42CharactersCharacterNoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMemberV42CharactersCharacterNoResponse, error) {
	rsp, err := c.PutMemberV42CharactersCharacterNo(ctx, characterNo, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMemberV42CharactersCharacterNoResponse(rsp)
}

// PostMemberV42MembersWithBodyWithResponse request with arbitrary body returning *PostMemberV42MembersResponse
func (c *ClientWithResponses) PostMemberV42MembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMemberV42MembersResponse, error) {
	rsp, err := c.PostMemberV42MembersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMemberV42MembersResponse(rsp)
}

func (c *ClientWithResponses) PostMemberV42MembersWithResponse(ctx context.Context, body PostMemberV42MembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMemberV42MembersResponse, error) {
	rsp, err := c.PostMemberV42Members(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMemberV42MembersResponse(rsp)
}

// GetMemberV42MembersAuthMemberMemberNoWithResponse request returning *GetMemberV42MembersAuthMemberMemberNoResponse
func (c *ClientWithResponses) GetMemberV42MembersAuthMemberMemberNoWithResponse(ctx context.Context, memberNo externalRef0.MemberNoInPath, reqEditors ...RequestEditorFn) (*GetMemberV42MembersAuthMemberMemberNoResponse, error) {
	rsp, err := c.GetMemberV42MembersAuthMemberMemberNo(ctx, memberNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberV42MembersAuthMemberMemberNoResponse(rsp)
}

// GetMemberV42MembersAuthLoginTypeLoginValueWithResponse request returning *GetMemberV42MembersAuthLoginTypeLoginValueResponse
func (c *ClientWithResponses) GetMemberV42MembersAuthLoginTypeLoginValueWithResponse(ctx context.Context, loginType LoginTypeInPath, loginValue LoginValueInPath, params *GetMemberV42MembersAuthLoginTypeLoginValueParams, reqEditors ...RequestEditorFn) (*GetMemberV42MembersAuthLoginTypeLoginValueResponse, error) {
	rsp, err := c.GetMemberV42MembersAuthLoginTypeLoginValue(ctx, loginType, loginValue, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberV42MembersAuthLoginTypeLoginValueResponse(rsp)
}

// DeleteMemberV42MembersPrivilegeLaunchWithBodyWithResponse request with arbitrary body returning *DeleteMemberV42MembersPrivilegeLaunchResponse
func (c *ClientWithResponses) DeleteMemberV42MembersPrivilegeLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMemberV42MembersPrivilegeLaunchResponse, error) {
	rsp, err := c.DeleteMemberV42MembersPrivilegeLaunchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMemberV42MembersPrivilegeLaunchResponse(rsp)
}

func (c *ClientWithResponses) DeleteMemberV42MembersPrivilegeLaunchWithResponse(ctx context.Context, body DeleteMemberV42MembersPrivilegeLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMemberV42MembersPrivilegeLaunchResponse, error) {
	rsp, err := c.DeleteMemberV42MembersPrivilegeLaunch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMemberV42MembersPrivilegeLaunchResponse(rsp)
}

// PostMemberV42MembersPrivilegeLaunchWithBodyWithResponse request with arbitrary body returning *PostMemberV42MembersPrivilegeLaunchResponse
func (c *ClientWithResponses) PostMemberV42MembersPrivilegeLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMemberV42MembersPrivilegeLaunchResponse, error) {
	rsp, err := c.PostMemberV42MembersPrivilegeLaunchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMemberV42MembersPrivilegeLaunchResponse(rsp)
}

func (c *ClientWithResponses) PostMemberV42MembersPrivilegeLaunchWithResponse(ctx context.Context, body PostMemberV42MembersPrivilegeLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMemberV42MembersPrivilegeLaunchResponse, error) {
	rsp, err := c.PostMemberV42MembersPrivilegeLaunch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMemberV42MembersPrivilegeLaunchResponse(rsp)
}

// GetMemberV42MembersPrivilegeLaunchMemberMemberNoWithResponse request returning *GetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse
func (c *ClientWithResponses) GetMemberV42MembersPrivilegeLaunchMemberMemberNoWithResponse(ctx context.Context, memberNo MemberNoInPath, params *GetMemberV42MembersPrivilegeLaunchMemberMemberNoParams, reqEditors ...RequestEditorFn) (*GetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse, error) {
	rsp, err := c.GetMemberV42MembersPrivilegeLaunchMemberMemberNo(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse(rsp)
}

// GetMemberV42MembersPunishMemberMemberNoWithResponse request returning *GetMemberV42MembersPunishMemberMemberNoResponse
func (c *ClientWithResponses) GetMemberV42MembersPunishMemberMemberNoWithResponse(ctx context.Context, memberNo externalRef0.MemberNoInPath, params *GetMemberV42MembersPunishMemberMemberNoParams, reqEditors ...RequestEditorFn) (*GetMemberV42MembersPunishMemberMemberNoResponse, error) {
	rsp, err := c.GetMemberV42MembersPunishMemberMemberNo(ctx, memberNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemberV42MembersPunishMemberMemberNoResponse(rsp)
}

// ParseGetMemberV42CharactersResponse parses an HTTP response from a GetMemberV42CharactersWithResponse call
func ParseGetMemberV42CharactersResponse(rsp *http.Response) (*GetMemberV42CharactersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberV42CharactersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int             `json:"code"`
			Data    *CharacterInfos `json:"data,omitempty"`
			Message string          `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMemberV42CharactersResponse parses an HTTP response from a PostMemberV42CharactersWithResponse call
func ParsePostMemberV42CharactersResponse(rsp *http.Response) (*PostMemberV42CharactersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMemberV42CharactersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int `json:"code"`
			Data *struct {
				// CharacterNo 角色编号
				CharacterNo *CharacterNo `json:"character_no,omitempty"`
			} `json:"data,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Code int `json:"code"`
			Data *struct {
				// CharacterNo 角色编号
				CharacterNo *CharacterNo `json:"character_no,omitempty"`
			} `json:"data,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMemberV42CharactersMemberMemberNoResponse parses an HTTP response from a GetMemberV42CharactersMemberMemberNoWithResponse call
func ParseGetMemberV42CharactersMemberMemberNoResponse(rsp *http.Response) (*GetMemberV42CharactersMemberMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberV42CharactersMemberMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int `json:"code"`

			// Data 角色信息
			Data    *externalRef2.CharacterInfo `json:"data,omitempty"`
			Message string                      `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMemberV42CharactersNicknameNicknameResponse parses an HTTP response from a GetMemberV42CharactersNicknameNicknameWithResponse call
func ParseGetMemberV42CharactersNicknameNicknameResponse(rsp *http.Response) (*GetMemberV42CharactersNicknameNicknameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberV42CharactersNicknameNicknameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int `json:"code"`

			// Data 角色信息
			Data    *externalRef2.CharacterInfo `json:"data,omitempty"`
			Message string                      `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteMemberV42CharactersCharacterNoResponse parses an HTTP response from a DeleteMemberV42CharactersCharacterNoWithResponse call
func ParseDeleteMemberV42CharactersCharacterNoResponse(rsp *http.Response) (*DeleteMemberV42CharactersCharacterNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMemberV42CharactersCharacterNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMemberV42CharactersCharacterNoResponse parses an HTTP response from a GetMemberV42CharactersCharacterNoWithResponse call
func ParseGetMemberV42CharactersCharacterNoResponse(rsp *http.Response) (*GetMemberV42CharactersCharacterNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberV42CharactersCharacterNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int `json:"code"`

			// Data 角色信息
			Data    *externalRef2.CharacterInfo `json:"data,omitempty"`
			Message string                      `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutMemberV42CharactersCharacterNoResponse parses an HTTP response from a PutMemberV42CharactersCharacterNoWithResponse call
func ParsePutMemberV42CharactersCharacterNoResponse(rsp *http.Response) (*PutMemberV42CharactersCharacterNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMemberV42CharactersCharacterNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostMemberV42MembersResponse parses an HTTP response from a PostMemberV42MembersWithResponse call
func ParsePostMemberV42MembersResponse(rsp *http.Response) (*PostMemberV42MembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMemberV42MembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int         `json:"code"`
			Data    *MemberInfo `json:"data,omitempty"`
			Message string      `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Code    int         `json:"code"`
			Data    *MemberInfo `json:"data,omitempty"`
			Message string      `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMemberV42MembersAuthMemberMemberNoResponse parses an HTTP response from a GetMemberV42MembersAuthMemberMemberNoWithResponse call
func ParseGetMemberV42MembersAuthMemberMemberNoResponse(rsp *http.Response) (*GetMemberV42MembersAuthMemberMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberV42MembersAuthMemberMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int             `json:"code"`
			Data    *MemberAuthInfo `json:"data,omitempty"`
			Message string          `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetMemberV42MembersAuthLoginTypeLoginValueResponse parses an HTTP response from a GetMemberV42MembersAuthLoginTypeLoginValueWithResponse call
func ParseGetMemberV42MembersAuthLoginTypeLoginValueResponse(rsp *http.Response) (*GetMemberV42MembersAuthLoginTypeLoginValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberV42MembersAuthLoginTypeLoginValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int         `json:"code"`
			Data    *MemberInfo `json:"data,omitempty"`
			Message string      `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteMemberV42MembersPrivilegeLaunchResponse parses an HTTP response from a DeleteMemberV42MembersPrivilegeLaunchWithResponse call
func ParseDeleteMemberV42MembersPrivilegeLaunchResponse(rsp *http.Response) (*DeleteMemberV42MembersPrivilegeLaunchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMemberV42MembersPrivilegeLaunchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMemberV42MembersPrivilegeLaunchResponse parses an HTTP response from a PostMemberV42MembersPrivilegeLaunchWithResponse call
func ParsePostMemberV42MembersPrivilegeLaunchResponse(rsp *http.Response) (*PostMemberV42MembersPrivilegeLaunchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMemberV42MembersPrivilegeLaunchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse parses an HTTP response from a GetMemberV42MembersPrivilegeLaunchMemberMemberNoWithResponse call
func ParseGetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse(rsp *http.Response) (*GetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberV42MembersPrivilegeLaunchMemberMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int `json:"code"`
			Data *struct {
				MemberNo          *externalRef2.MemberNo `json:"member_no,omitempty"`
				PrivilegeLaunchDt *string                `json:"privilege_launch_dt,omitempty"`

				// PrivilegeType 特权启动类型:
				// * `WxGameCenter` - 微信
				// * `SqGameCenter` - 手Q
				PrivilegeType *PrivilegeType `json:"privilege_type,omitempty"`
			} `json:"data,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMemberV42MembersPunishMemberMemberNoResponse parses an HTTP response from a GetMemberV42MembersPunishMemberMemberNoWithResponse call
func ParseGetMemberV42MembersPunishMemberMemberNoResponse(rsp *http.Response) (*GetMemberV42MembersPunishMemberMemberNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemberV42MembersPunishMemberMemberNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int `json:"code"`
			Data *struct {
				List *[]MemberPunishInfo `json:"list,omitempty"`
			} `json:"data,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
