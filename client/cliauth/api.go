// Package cliauth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package cliauth

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	Basic_authScopes  = "basic_auth.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for ClientType.
const (
	ClientTypeN0 ClientType = 0
	ClientTypeN1 ClientType = 1
	ClientTypeN2 ClientType = 2
	ClientTypeN3 ClientType = 3
)

// Defines values for Environment.
const (
	Dev   Environment = "dev"
	Dev2  Environment = "dev2"
	Dev3  Environment = "dev3"
	Mod   Environment = "mod"
	Sdev  Environment = "sdev"
	Sdev0 Environment = "sdev0"
	Stg   Environment = "stg"
	Tdev  Environment = "tdev"
	Xk5   Environment = "xk5"
)

// Defines values for Gender.
const (
	GenderN0 Gender = 0
	GenderN1 Gender = 1
	GenderN2 Gender = 2
)

// Defines values for GrantType.
const (
	GrantTypeAuthorizationCode GrantType = "authorization_code"
	GrantTypeClientCredentials GrantType = "client_credentials"
	GrantTypeMsdk              GrantType = "msdk"
	GrantTypePassword          GrantType = "password"
	GrantTypePhone             GrantType = "phone"
	GrantTypeQq                GrantType = "qq"
	GrantTypeRefreshToken      GrantType = "refresh_token"
	GrantTypeWx                GrantType = "wx"
)

// Defines values for MsdkChannelId.
const (
	MsdkChannelIdN1  MsdkChannelId = 1
	MsdkChannelIdN10 MsdkChannelId = 10
	MsdkChannelIdN11 MsdkChannelId = 11
	MsdkChannelIdN12 MsdkChannelId = 12
	MsdkChannelIdN13 MsdkChannelId = 13
	MsdkChannelIdN14 MsdkChannelId = 14
	MsdkChannelIdN15 MsdkChannelId = 15
	MsdkChannelIdN17 MsdkChannelId = 17
	MsdkChannelIdN2  MsdkChannelId = 2
	MsdkChannelIdN3  MsdkChannelId = 3
	MsdkChannelIdN4  MsdkChannelId = 4
	MsdkChannelIdN5  MsdkChannelId = 5
	MsdkChannelIdN6  MsdkChannelId = 6
	MsdkChannelIdN7  MsdkChannelId = 7
	MsdkChannelIdN9  MsdkChannelId = 9
)

// Defines values for MsdkOs.
const (
	MsdkOsN1 MsdkOs = 1
	MsdkOsN2 MsdkOs = 2
	MsdkOsN3 MsdkOs = 3
	MsdkOsN4 MsdkOs = 4
	MsdkOsN5 MsdkOs = 5
)

// Defines values for NetworkType.
const (
	Minus1 NetworkType = -1
	N0     NetworkType = 0
	N1     NetworkType = 1
	N2     NetworkType = 2
	N3     NetworkType = 3
	N4     NetworkType = 4
	N5     NetworkType = 5
)

// Defines values for TokenType.
const (
	Basic  TokenType = "Basic"
	Bearer TokenType = "Bearer"
)

// Defines values for VerificationCodeScene.
const (
	DevelopCommunityBind          VerificationCodeScene = "develop_community_bind"
	DevelopCommunityLoginRegister VerificationCodeScene = "develop_community_login_register"
	SgxqAppBind                   VerificationCodeScene = "sgxq_app_bind"
	SgxqAppLoginRegister          VerificationCodeScene = "sgxq_app_login_register"
	Xk5Oauth2                     VerificationCodeScene = "xk5_oauth2"
)

// AccessToken defines model for AccessToken.
type AccessToken struct {
	// Apn ApplicationNo
	Apn *int `json:"apn,omitempty"`

	// Aud audience: Recipient for which the JWT is intended
	Aud *Audience `json:"aud,omitempty"`

	// Chi ChannelId
	Chi *string `json:"chi,omitempty"`

	// Clt * `0` - WEB
	// * `1` - ANDROID
	// * `2` - IOS
	// * `3` - PC
	Clt *ClientType `json:"clt,omitempty"`

	// Did 设备唯一标识符(e.g. IMEI值)
	Did *DeviceId `json:"did,omitempty"`

	// Env Environment
	Env *Environment `json:"env,omitempty"`

	// Exp expiration time: Time after which the JWT expires
	Exp *ExpiresAt `json:"exp,omitempty"`

	// Ifl IsFirstLogin
	Ifl *bool `json:"ifl,omitempty"`

	// Iss issuer of the JWT
	Iss *Issuer `json:"iss,omitempty"`

	// Jti jwt id
	Jti *JwtId `json:"jti,omitempty"`

	// Lot LoginType:
	// * `1` - Qq
	// * `2` - Wx
	// * `3` - Phone
	// * `4` - Pwd
	// * `5` - SgxqMsdkQq
	// * `6` - SgxqMsdkWx
	// * `7` - Wegame
	Lot *int `json:"lot,omitempty"`

	// Lov LoginValue，根据LoginType不同，而产生不同的LoginValue。
	// LoginType:
	// * `1` - LoginValue=Qq OpenId
	// * `2` - LoginValue=Wx OpenId
	// * `3` - LoginValue=Phone Number
	// * `4` - LoginValue=Username
	// * `5` - LoginValue=SgxqMsdkQq OpenId
	// * `6` - LoginValue=SgxqMsdkWx OpenId
	// * `7` - LoginValue=Wegame RailId
	Lov *string `json:"lov,omitempty"`

	// Lpld LastPrivilegeLaunchDate
	Lpld *string `json:"lpld,omitempty"`

	// Men MemberNo
	Men *int64 `json:"men,omitempty"`

	// Nic Nickname
	Nic *string `json:"nic,omitempty"`

	// Opi OpenId
	Opi *string `json:"opi,omitempty"`

	// Pri ProfileImg
	Pri *string `json:"pri,omitempty"`

	// Red RegisteredDate
	Red *int64 `json:"red,omitempty"`

	// Sim Simulator
	Sim *bool `json:"sim,omitempty"`

	// Sub Subject of the JWT
	Sub *Subject `json:"sub,omitempty"`
}

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	// AccessToken The access token issued by the authorization server.
	AccessToken AccessToken `json:"access_token"`

	// ExpiresIn The lifetime in seconds of the access token.
	ExpiresIn *ExpiresIn `json:"expires_in,omitempty"`

	// RefreshToken The refresh token, which can be used to obtain new access tokens using the same authorization grant.
	RefreshToken *RefreshToken `json:"refresh_token,omitempty"`

	// Scope The scope of the access request, comma separation
	Scope *Scope `json:"scope,omitempty"`

	// TokenType The type of the token issued.
	TokenType TokenType `json:"token_type"`
}

// AnyValue defines model for AnyValue.
type AnyValue = interface{}

// Audience audience: Recipient for which the JWT is intended
type Audience = []string

// AuthorizationCode The authorization code generated by the authorization server.
// It's valid for 10 minutes.
type AuthorizationCode = string

// AvatarUrl 头像链接
type AvatarUrl = string

// BaseResultResponse 见公共返回码列表
type BaseResultResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ChannelId 渠道ID
type ChannelId = string

// ClientId The client identifier
type ClientId = string

// ClientSecret The client secret
type ClientSecret = string

// ClientType * `0` - WEB
// * `1` - ANDROID
// * `2` - IOS
// * `3` - PC
type ClientType int

// DeviceId 设备唯一标识符(e.g. IMEI值)
type DeviceId = string

// Environment Environment
type Environment string

// ExpiresIn The lifetime in seconds of the access token.
type ExpiresIn = int64

// Gender 性别：
// * `0` - 未定义
// * `1` - 男
// * `2` - 女
type Gender int

// GrantType defines model for GrantType.
type GrantType string

// IsSimulator 是否是模拟器
type IsSimulator = bool

// Issuer issuer of the JWT
type Issuer = string

// JsonWebTokenMember defines model for JsonWebTokenMember.
type JsonWebTokenMember struct {
	// Apn ApplicationNo
	Apn *int `json:"apn,omitempty"`

	// Chi ChannelId
	Chi *string `json:"chi,omitempty"`

	// Ifl IsFirstLogin
	Ifl *bool `json:"ifl,omitempty"`

	// Lot LoginType:
	// * `1` - Qq
	// * `2` - Wx
	// * `3` - Phone
	// * `4` - Pwd
	// * `5` - SgxqMsdkQq
	// * `6` - SgxqMsdkWx
	// * `7` - Wegame
	Lot *int `json:"lot,omitempty"`

	// Lov LoginValue，根据LoginType不同，而产生不同的LoginValue。
	// LoginType:
	// * `1` - LoginValue=Qq OpenId
	// * `2` - LoginValue=Wx OpenId
	// * `3` - LoginValue=Phone Number
	// * `4` - LoginValue=Username
	// * `5` - LoginValue=SgxqMsdkQq OpenId
	// * `6` - LoginValue=SgxqMsdkWx OpenId
	// * `7` - LoginValue=Wegame RailId
	Lov *string `json:"lov,omitempty"`

	// Lpld LastPrivilegeLaunchDate
	Lpld *string `json:"lpld,omitempty"`

	// Men MemberNo
	Men *int64 `json:"men,omitempty"`

	// Nic Nickname
	Nic *string `json:"nic,omitempty"`

	// Opi OpenId
	Opi *string `json:"opi,omitempty"`

	// Pri ProfileImg
	Pri *string `json:"pri,omitempty"`

	// Red RegisteredDate
	Red *int64 `json:"red,omitempty"`
}

// JsonWebTokenStandard defines model for JsonWebTokenStandard.
type JsonWebTokenStandard struct {
	// Aud audience: Recipient for which the JWT is intended
	Aud *Audience `json:"aud,omitempty"`

	// Clt * `0` - WEB
	// * `1` - ANDROID
	// * `2` - IOS
	// * `3` - PC
	Clt *ClientType `json:"clt,omitempty"`

	// Did 设备唯一标识符(e.g. IMEI值)
	Did *DeviceId `json:"did,omitempty"`

	// Env Environment
	Env *Environment `json:"env,omitempty"`

	// Exp expiration time: Time after which the JWT expires
	Exp *ExpiresAt `json:"exp,omitempty"`

	// Iss issuer of the JWT
	Iss *Issuer `json:"iss,omitempty"`

	// Jti jwt id
	Jti *JwtId `json:"jti,omitempty"`

	// Sim Simulator
	Sim *bool `json:"sim,omitempty"`

	// Sub Subject of the JWT
	Sub *Subject `json:"sub,omitempty"`
}

// JwtId jwt id
type JwtId = string

// MemberAuthDetail defines model for MemberAuthDetail.
type MemberAuthDetail struct {
	// CreateTime Unix Time
	CreateTime int64 `json:"create_time"`

	// LoginType * `1` - Qq
	// * `2` - Wx
	// * `3` - Phone
	// * `4` - Pwd
	// * `5` - SgxqMsdkQq
	// * `6` - SgxqMsdkWx
	// * `7` - Wegame
	LoginType  int      `json:"login_type"`
	LoginValue string   `json:"login_value"`
	MemberNo   MemberNo `json:"member_no"`

	// UpdateTime Unix Time
	UpdateTime int64 `json:"update_time"`
}

// MemberNo defines model for MemberNo.
type MemberNo = int64

// MsdkChannelId Msdk 登录渠道
// * `1` - 微信
// * `2` - 手Q
// * `3` - 游客
// * `4` - Facebook
// * `5` - GameCenter
// * `6` - GooglePlay
// * `7` - IEGPass
// * `9` - Twitter
// * `10` - Garena
// * `11` - SelfAccount
// * `12` - EGame
// * `14` - Line
// * `15` - Signin with Apple
// * `17` - Kwai
type MsdkChannelId int

// MsdkOs 操作系统标示
// * `1` - Android
// * `2` - iOS
// * `3` - Web
// * `4` - Linux
// * `5` - Windows
type MsdkOs int

// NetworkType 网络情况类型:
// * `-1` - unknown
// * `0` - no connect
// * `1` - WIFI
// * `2` - 2G网络
// * `3` - 3G网络
// * `4` - 4G网络
// * `5` - 5G网络
type NetworkType int

// NickName 用户名称
type NickName = string

// OpenId 第三方唯一标识
type OpenId = string

// Password The resource owner password.
type Password = string

// PhoneNo 手机号码
type PhoneNo = string

// PostTokenRequestBodyAuthorizationCode defines model for PostTokenRequestBodyAuthorizationCode.
type PostTokenRequestBodyAuthorizationCode struct {
	// Code The authorization code generated by the authorization server.
	// It's valid for 10 minutes.
	Code AuthorizationCode `json:"code"`
}

// PostTokenRequestBodyMsdk defines model for PostTokenRequestBodyMsdk.
type PostTokenRequestBodyMsdk struct {
	// ChannelId 渠道ID
	ChannelId *ChannelId `json:"channel_id,omitempty"`

	// IsSimulator 是否是模拟器
	IsSimulator *IsSimulator `json:"is_simulator,omitempty"`

	// MsdkChannelId Msdk 登录渠道
	// * `1` - 微信
	// * `2` - 手Q
	// * `3` - 游客
	// * `4` - Facebook
	// * `5` - GameCenter
	// * `6` - GooglePlay
	// * `7` - IEGPass
	// * `9` - Twitter
	// * `10` - Garena
	// * `11` - SelfAccount
	// * `12` - EGame
	// * `14` - Line
	// * `15` - Signin with Apple
	// * `17` - Kwai
	MsdkChannelId MsdkChannelId `json:"msdk_channel_id"`

	// MsdkGender 性别：
	// * `0` - 未定义
	// * `1` - 男
	// * `2` - 女
	MsdkGender Gender `json:"msdk_gender"`

	// MsdkNickname 用户名称
	MsdkNickname NickName `json:"msdk_nickname"`

	// MsdkOpenid 第三方唯一标识
	MsdkOpenid OpenId `json:"msdk_openid"`

	// MsdkOs 操作系统标示
	// * `1` - Android
	// * `2` - iOS
	// * `3` - Web
	// * `4` - Linux
	// * `5` - Windows
	MsdkOs MsdkOs `json:"msdk_os"`

	// MsdkProfileImg 头像链接
	MsdkProfileImg AvatarUrl `json:"msdk_profile_img"`

	// MsdkToken The string value of the token.
	MsdkToken Token `json:"msdk_token"`

	// NetworkType 网络情况类型:
	// * `-1` - unknown
	// * `0` - no connect
	// * `1` - WIFI
	// * `2` - 2G网络
	// * `3` - 3G网络
	// * `4` - 4G网络
	// * `5` - 5G网络
	NetworkType NetworkType `json:"network_type"`
}

// PostTokenRequestBodyPassword defines model for PostTokenRequestBodyPassword.
type PostTokenRequestBodyPassword struct {
	// Password The resource owner password.
	Password Password `json:"password"`

	// Username The resource owner username.
	Username Username `json:"username"`
}

// PostTokenRequestBodyPhone defines model for PostTokenRequestBodyPhone.
type PostTokenRequestBodyPhone struct {
	// PhoneNo 手机号码
	PhoneNo PhoneNo                `json:"phone_no"`
	Scene   *VerificationCodeScene `json:"scene,omitempty"`

	// VerificationCode 手机验证码
	VerificationCode VerificationCode `json:"verification_code"`
}

// PostTokenRequestBodyQq defines model for PostTokenRequestBodyQq.
type PostTokenRequestBodyQq struct {
	// QqCode QQ Code
	QqCode string `json:"qq_code"`
}

// PostTokenRequestBodyRefreshToken defines model for PostTokenRequestBodyRefreshToken.
type PostTokenRequestBodyRefreshToken struct {
	RefreshToken string `json:"refresh_token"`
}

// PostTokenRequestBodyWx defines model for PostTokenRequestBodyWx.
type PostTokenRequestBodyWx struct {
	// WxCode WX Code
	WxCode string `json:"wx_code"`
}

// RefreshToken defines model for RefreshToken.
type RefreshToken struct {
	// Apn ApplicationNo
	Apn *int `json:"apn,omitempty"`

	// Aud audience: Recipient for which the JWT is intended
	Aud *Audience `json:"aud,omitempty"`

	// Chi ChannelId
	Chi *string `json:"chi,omitempty"`

	// Clt * `0` - WEB
	// * `1` - ANDROID
	// * `2` - IOS
	// * `3` - PC
	Clt *ClientType `json:"clt,omitempty"`

	// Did 设备唯一标识符(e.g. IMEI值)
	Did *DeviceId `json:"did,omitempty"`

	// Env Environment
	Env *Environment `json:"env,omitempty"`

	// Exp expiration time: Time after which the JWT expires
	Exp *ExpiresAt `json:"exp,omitempty"`

	// Ifl IsFirstLogin
	Ifl *bool `json:"ifl,omitempty"`

	// Iss issuer of the JWT
	Iss *Issuer `json:"iss,omitempty"`

	// Jti jwt id
	Jti *JwtId `json:"jti,omitempty"`

	// Lot LoginType:
	// * `1` - Qq
	// * `2` - Wx
	// * `3` - Phone
	// * `4` - Pwd
	// * `5` - SgxqMsdkQq
	// * `6` - SgxqMsdkWx
	// * `7` - Wegame
	Lot *int `json:"lot,omitempty"`

	// Lov LoginValue，根据LoginType不同，而产生不同的LoginValue。
	// LoginType:
	// * `1` - LoginValue=Qq OpenId
	// * `2` - LoginValue=Wx OpenId
	// * `3` - LoginValue=Phone Number
	// * `4` - LoginValue=Username
	// * `5` - LoginValue=SgxqMsdkQq OpenId
	// * `6` - LoginValue=SgxqMsdkWx OpenId
	// * `7` - LoginValue=Wegame RailId
	Lov *string `json:"lov,omitempty"`

	// Lpld LastPrivilegeLaunchDate
	Lpld *string `json:"lpld,omitempty"`

	// Men MemberNo
	Men *int64 `json:"men,omitempty"`

	// Nic Nickname
	Nic *string `json:"nic,omitempty"`

	// Opi OpenId
	Opi *string `json:"opi,omitempty"`

	// Pri ProfileImg
	Pri *string `json:"pri,omitempty"`

	// Red RegisteredDate
	Red *int64 `json:"red,omitempty"`

	// Sim Simulator
	Sim *bool `json:"sim,omitempty"`

	// Sub Subject of the JWT
	Sub *Subject `json:"sub,omitempty"`
}

// Scope The scope of the access request, comma separation
type Scope = string

// Subject Subject of the JWT
type Subject = string

// Token The string value of the token.
type Token = string

// TokenType The type of the token issued.
type TokenType string

// Username The resource owner username.
type Username = string

// V41SsoLoginResponseData defines model for V41SsoLoginResponseData.
type V41SsoLoginResponseData struct {
	// AccessToken The access token issued by the authorization server.
	AccessToken AccessToken `json:"access_token"`

	// ExpiresIn The lifetime in seconds of the access token.
	ExpiresIn *ExpiresIn          `json:"expires_in,omitempty"`
	Member    *JsonWebTokenMember `json:"member,omitempty"`

	// RefreshToken The refresh token, which can be used to obtain new access tokens using the same authorization grant.
	RefreshToken *RefreshToken `json:"refresh_token,omitempty"`

	// Scope The scope of the access request, comma separation
	Scope *Scope `json:"scope,omitempty"`

	// TokenType The type of the token issued.
	TokenType TokenType `json:"token_type"`
}

// VerificationCode 手机验证码
type VerificationCode = string

// VerificationCodeScene defines model for VerificationCodeScene.
type VerificationCodeScene string

// ExpiresAt expiration time: Time after which the JWT expires
type ExpiresAt = int64

// ParamDeviceId 设备唯一标识符(e.g. IMEI值)
type ParamDeviceId = DeviceId

// V41SsoLoginResponse defines model for V41SsoLoginResponse.
type V41SsoLoginResponse struct {
	Code    int                      `json:"code"`
	Data    *V41SsoLoginResponseData `json:"data,omitempty"`
	Message string                   `json:"message"`
}

// PostTokenRequestBody defines model for PostTokenRequestBody.
type PostTokenRequestBody struct {
	// ClientId The client identifier
	ClientId ClientId `json:"client_id"`

	// ClientSecret The client secret
	ClientSecret ClientSecret `json:"client_secret"`
	GrantType    GrantType    `json:"grant_type"`
}

// GetAuthV41MemberAuthInfoParams defines parameters for GetAuthV41MemberAuthInfo.
type GetAuthV41MemberAuthInfoParams struct {
	MemberNo   *MemberNo `form:"memberNo,omitempty" json:"memberNo,omitempty"`
	LoginType  *int      `form:"loginType,omitempty" json:"loginType,omitempty"`
	LoginValue *string   `form:"loginValue,omitempty" json:"loginValue,omitempty"`
}

// PostAuthV41SsoLoginJSONBody defines parameters for PostAuthV41SsoLogin.
type PostAuthV41SsoLoginJSONBody struct {
	// ClientId The client identifier
	ClientId ClientId `json:"client_id"`

	// ClientSecret The client secret
	ClientSecret ClientSecret `json:"client_secret"`
	GrantType    GrantType    `json:"grant_type"`
}

// PostAuthV41SsoLoginParams defines parameters for PostAuthV41SsoLogin.
type PostAuthV41SsoLoginParams struct {
	// DeviceId 设备唯一标识符(e.g. IMEI值)
	DeviceId *ParamDeviceId `json:"Device-Id,omitempty"`
}

// PostAuthV41SsoLogoutJSONBody defines parameters for PostAuthV41SsoLogout.
type PostAuthV41SsoLogoutJSONBody struct {
	// ClientId The client identifier
	ClientId ClientId `json:"client_id"`

	// ClientSecret The client secret
	ClientSecret ClientSecret `json:"client_secret"`

	// Token The string value of the token.
	Token Token `json:"token"`
}

// PostAuthV41SsoLoginJSONRequestBody defines body for PostAuthV41SsoLogin for application/json ContentType.
type PostAuthV41SsoLoginJSONRequestBody PostAuthV41SsoLoginJSONBody

// PostAuthV41SsoLogoutJSONRequestBody defines body for PostAuthV41SsoLogout for application/json ContentType.
type PostAuthV41SsoLogoutJSONRequestBody PostAuthV41SsoLogoutJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuthV41MemberAuthInfo request
	GetAuthV41MemberAuthInfo(ctx context.Context, params *GetAuthV41MemberAuthInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthV41SsoLoginWithBody request with any body
	PostAuthV41SsoLoginWithBody(ctx context.Context, params *PostAuthV41SsoLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthV41SsoLogin(ctx context.Context, params *PostAuthV41SsoLoginParams, body PostAuthV41SsoLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthV41SsoLogoutWithBody request with any body
	PostAuthV41SsoLogoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthV41SsoLogout(ctx context.Context, body PostAuthV41SsoLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuthV41MemberAuthInfo(ctx context.Context, params *GetAuthV41MemberAuthInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthV41MemberAuthInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthV41SsoLoginWithBody(ctx context.Context, params *PostAuthV41SsoLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthV41SsoLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthV41SsoLogin(ctx context.Context, params *PostAuthV41SsoLoginParams, body PostAuthV41SsoLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthV41SsoLoginRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthV41SsoLogoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthV41SsoLogoutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthV41SsoLogout(ctx context.Context, body PostAuthV41SsoLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthV41SsoLogoutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthV41MemberAuthInfoRequest generates requests for GetAuthV41MemberAuthInfo
func NewGetAuthV41MemberAuthInfoRequest(server string, params *GetAuthV41MemberAuthInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/v4.1/member_auth_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MemberNo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "memberNo", runtime.ParamLocationQuery, *params.MemberNo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LoginType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "loginType", runtime.ParamLocationQuery, *params.LoginType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LoginValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "loginValue", runtime.ParamLocationQuery, *params.LoginValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthV41SsoLoginRequest calls the generic PostAuthV41SsoLogin builder with application/json body
func NewPostAuthV41SsoLoginRequest(server string, params *PostAuthV41SsoLoginParams, body PostAuthV41SsoLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthV41SsoLoginRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAuthV41SsoLoginRequestWithBody generates requests for PostAuthV41SsoLogin with any type of body
func NewPostAuthV41SsoLoginRequestWithBody(server string, params *PostAuthV41SsoLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/v4.1/sso/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.DeviceId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Device-Id", runtime.ParamLocationHeader, *params.DeviceId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Device-Id", headerParam0)
		}

	}

	return req, nil
}

// NewPostAuthV41SsoLogoutRequest calls the generic PostAuthV41SsoLogout builder with application/json body
func NewPostAuthV41SsoLogoutRequest(server string, body PostAuthV41SsoLogoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthV41SsoLogoutRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthV41SsoLogoutRequestWithBody generates requests for PostAuthV41SsoLogout with any type of body
func NewPostAuthV41SsoLogoutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/v4.1/sso/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuthV41MemberAuthInfoWithResponse request
	GetAuthV41MemberAuthInfoWithResponse(ctx context.Context, params *GetAuthV41MemberAuthInfoParams, reqEditors ...RequestEditorFn) (*GetAuthV41MemberAuthInfoResponse, error)

	// PostAuthV41SsoLoginWithBodyWithResponse request with any body
	PostAuthV41SsoLoginWithBodyWithResponse(ctx context.Context, params *PostAuthV41SsoLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthV41SsoLoginResponse, error)

	PostAuthV41SsoLoginWithResponse(ctx context.Context, params *PostAuthV41SsoLoginParams, body PostAuthV41SsoLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthV41SsoLoginResponse, error)

	// PostAuthV41SsoLogoutWithBodyWithResponse request with any body
	PostAuthV41SsoLogoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthV41SsoLogoutResponse, error)

	PostAuthV41SsoLogoutWithResponse(ctx context.Context, body PostAuthV41SsoLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthV41SsoLogoutResponse, error)
}

type GetAuthV41MemberAuthInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int `json:"code"`
		Data *struct {
			List *[]MemberAuthDetail `json:"list,omitempty"`
		} `json:"data,omitempty"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAuthV41MemberAuthInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthV41MemberAuthInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthV41SsoLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V41SsoLoginResponse
}

// Status returns HTTPResponse.Status
func (r PostAuthV41SsoLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthV41SsoLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthV41SsoLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResultResponse
}

// Status returns HTTPResponse.Status
func (r PostAuthV41SsoLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthV41SsoLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthV41MemberAuthInfoWithResponse request returning *GetAuthV41MemberAuthInfoResponse
func (c *ClientWithResponses) GetAuthV41MemberAuthInfoWithResponse(ctx context.Context, params *GetAuthV41MemberAuthInfoParams, reqEditors ...RequestEditorFn) (*GetAuthV41MemberAuthInfoResponse, error) {
	rsp, err := c.GetAuthV41MemberAuthInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthV41MemberAuthInfoResponse(rsp)
}

// PostAuthV41SsoLoginWithBodyWithResponse request with arbitrary body returning *PostAuthV41SsoLoginResponse
func (c *ClientWithResponses) PostAuthV41SsoLoginWithBodyWithResponse(ctx context.Context, params *PostAuthV41SsoLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthV41SsoLoginResponse, error) {
	rsp, err := c.PostAuthV41SsoLoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthV41SsoLoginResponse(rsp)
}

func (c *ClientWithResponses) PostAuthV41SsoLoginWithResponse(ctx context.Context, params *PostAuthV41SsoLoginParams, body PostAuthV41SsoLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthV41SsoLoginResponse, error) {
	rsp, err := c.PostAuthV41SsoLogin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthV41SsoLoginResponse(rsp)
}

// PostAuthV41SsoLogoutWithBodyWithResponse request with arbitrary body returning *PostAuthV41SsoLogoutResponse
func (c *ClientWithResponses) PostAuthV41SsoLogoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthV41SsoLogoutResponse, error) {
	rsp, err := c.PostAuthV41SsoLogoutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthV41SsoLogoutResponse(rsp)
}

func (c *ClientWithResponses) PostAuthV41SsoLogoutWithResponse(ctx context.Context, body PostAuthV41SsoLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthV41SsoLogoutResponse, error) {
	rsp, err := c.PostAuthV41SsoLogout(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthV41SsoLogoutResponse(rsp)
}

// ParseGetAuthV41MemberAuthInfoResponse parses an HTTP response from a GetAuthV41MemberAuthInfoWithResponse call
func ParseGetAuthV41MemberAuthInfoResponse(rsp *http.Response) (*GetAuthV41MemberAuthInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthV41MemberAuthInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int `json:"code"`
			Data *struct {
				List *[]MemberAuthDetail `json:"list,omitempty"`
			} `json:"data,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthV41SsoLoginResponse parses an HTTP response from a PostAuthV41SsoLoginWithResponse call
func ParsePostAuthV41SsoLoginResponse(rsp *http.Response) (*PostAuthV41SsoLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthV41SsoLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V41SsoLoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthV41SsoLogoutResponse parses an HTTP response from a PostAuthV41SsoLogoutWithResponse call
func ParsePostAuthV41SsoLogoutResponse(rsp *http.Response) (*PostAuthV41SsoLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthV41SsoLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
