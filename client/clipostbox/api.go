// Package clipostgox provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package clipostgox

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for PostMessageLocale.
const (
	Zh   PostMessageLocale = "zh"
	ZhCN PostMessageLocale = "zh_CN"
)

// Defines values for PostResponseRecipientType.
const (
	PostResponseRecipientTypeA PostResponseRecipientType = "A"
	PostResponseRecipientTypeL PostResponseRecipientType = "L"
)

// Defines values for RecipientCriteriaJoinCountryCodes.
const (
	CN RecipientCriteriaJoinCountryCodes = "CN"
)

// Defines values for SendPostRequestRecipientType.
const (
	SendPostRequestRecipientTypeA SendPostRequestRecipientType = "A"
	SendPostRequestRecipientTypeL SendPostRequestRecipientType = "L"
)

// Defines values for UserUserType.
const (
	G UserUserType = "G"
	S UserUserType = "S"
	U UserUserType = "U"
)

// BaseResult defines model for BaseResult.
type BaseResult struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Category 当postboxId=SGXQ-MOD时，此字段值为UGC ID，e.g. 1991029608
type Category = string

// CategoryName 用于解释category的名称，例如：category=1991029608时，categoryName=英雄之路
type CategoryName = string

// ExpireAt 到期时间,unit: Millisecond
type ExpireAt = int64

// Item defines model for Item.
type Item struct {
	// Data 预留字段
	Data *map[string]interface{} `json:"data,omitempty"`

	// ItemId 道具ID
	ItemId *string `json:"itemId,omitempty"`

	// ItemTag 道具标签，根据道具数据库得知：
	//  * `2` - 欢乐校园
	//  * `3` - 职业模拟器
	//  * `4` - 夺宝跑酷
	//  * `5` - (花园广场、密石林、展览馆、花园广场、护卫战、丘陵单人战、丘陵双人战等)
	//  * `6` - 英雄学校
	ItemTag *int32 `json:"itemTag,omitempty"`

	// ItemType 道具类型
	ItemType *string `json:"itemType,omitempty"`

	// Quantity 道具数量
	Quantity *int64 `json:"quantity,omitempty"`
}

// Message 根据messageType情况而定：
//   - `1` - {"language": "", "title": "", "body": ""}
type Message map[string]interface{}

// MessageType 信息类型
type MessageType = int32

// Page 页数
type Page = int

// PostMessage defines model for PostMessage.
type PostMessage struct {
	Locale PostMessageLocale                 `json:"locale"`
	Msg    map[string]map[string]interface{} `json:"msg"`
}

// PostMessageLocale defines model for PostMessage.Locale.
type PostMessageLocale string

// PostNo 邮件编号
type PostNo = int

// PostNos 邮件编号列表
//   - `单个邮件` - e.g. 32
//   - `多个邮件` - e.g. 32,42
type PostNos = string

// PostResponse defines model for PostResponse.
type PostResponse struct {
	Category          *string                    `json:"category,omitempty"`
	CreatedDate       *int64                     `json:"createdDate,omitempty"`
	Deleted           *bool                      `json:"deleted,omitempty"`
	ExpireAt          *int64                     `json:"expireAt,omitempty"`
	Items             *[]Item                    `json:"items,omitempty"`
	MessageType       *int32                     `json:"messageType,omitempty"`
	Messages          *[]PostMessage             `json:"messages,omitempty"`
	PostNo            *int64                     `json:"postNo,omitempty"`
	PostTransactionId *string                    `json:"postTransactionId,omitempty"`
	PostboxId         *string                    `json:"postboxId,omitempty"`
	RecipientCriteria *RecipientCriteria         `json:"recipientCriteria,omitempty"`
	RecipientType     *PostResponseRecipientType `json:"recipientType,omitempty"`
	Recipients        *[]User                    `json:"recipients,omitempty"`
	ReservationDate   *int64                     `json:"reservationDate,omitempty"`
	ReservationPostNo *int64                     `json:"reservationPostNo,omitempty"`
	Sender            *User                      `json:"sender,omitempty"`
	UpdatedDate       *int64                     `json:"updatedDate,omitempty"`
}

// PostResponseRecipientType defines model for PostResponse.RecipientType.
type PostResponseRecipientType string

// PostTransactionId 流水号，例如：uuid
type PostTransactionId = string

// PostboxId 邮箱ID:
//   - `SGXQ-GM`
//   - `SGXQ-GENERAL`
//   - `SGXQ-MOD`
//   - `SGXQ-SANDBOX`
type PostboxId = string

// RecipientCriteria defines model for RecipientCriteria.
type RecipientCriteria struct {
	JoinCountryCodes *[]RecipientCriteriaJoinCountryCodes `json:"joinCountryCodes,omitempty"`
	OpenIdTypes      *[]string                            `json:"openIdTypes,omitempty"`
}

// RecipientCriteriaJoinCountryCodes defines model for RecipientCriteria.JoinCountryCodes.
type RecipientCriteriaJoinCountryCodes string

// SendPostRequest defines model for SendPostRequest.
type SendPostRequest struct {
	RecipientCriteria *RecipientCriteria `json:"RecipientCriteria,omitempty"`

	// Category 当postboxId=SGXQ-MOD时，此字段值为UGC ID，e.g. 1991029608
	Category Category `json:"category"`

	// CategoryName 用于解释category的名称，例如：category=1991029608时，categoryName=英雄之路
	CategoryName *CategoryName `json:"categoryName,omitempty"`

	// ExpireAt 到期时间,unit: Millisecond
	ExpireAt *ExpireAt `json:"expireAt,omitempty"`
	Items    *[]Item   `json:"items,omitempty"`

	// MessageType 信息类型
	MessageType *MessageType `json:"messageType,omitempty"`

	// Messages 信息列表
	Messages *[]Message `json:"messages,omitempty"`

	// PostTransactionId 流水号，例如：uuid
	PostTransactionId *PostTransactionId `json:"postTransactionId,omitempty"`

	// RecipientType * `A`: 全部玩家可接收
	// * `L`: 指定列表玩家可接收
	RecipientType SendPostRequestRecipientType `json:"recipientType"`

	// Recipients 当且仅当，recipientType=L时，填写
	Recipients *[]User `json:"recipients,omitempty"`
	Sender     User    `json:"sender"`
}

// SendPostRequestRecipientType * `A`: 全部玩家可接收
// * `L`: 指定列表玩家可接收
type SendPostRequestRecipientType string

// SendPostResponse defines model for SendPostResponse.
type SendPostResponse struct {
	Failure           *[]string `json:"failure,omitempty"`
	PostNo            *int64    `json:"postNo,omitempty"`
	PostTransactionId *string   `json:"postTransactionId,omitempty"`
}

// ServiceId 服务ID
type ServiceId = string

// Size 单页数量
type Size = int

// SuccessFailureResponse defines model for SuccessFailureResponse.
type SuccessFailureResponse struct {
	// Failure 失败（已知失败原因）的邮件编号列表
	Failure *[]int64 `json:"failure,omitempty"`

	// RetryableFailure 失败（未知失败原因）且可以重试的邮件编号列表
	RetryableFailure *[]int64 `json:"retryableFailure,omitempty"`

	// Success 处理成功的邮件编号列表
	Success *[]int64 `json:"success,omitempty"`
}

// User defines model for User.
type User struct {
	Data     *map[string]map[string]interface{} `json:"data,omitempty"`
	Name     *string                            `json:"name,omitempty"`
	UserId   *string                            `json:"userId,omitempty"`
	UserType UserUserType                       `json:"userType"`
}

// UserUserType defines model for User.UserType.
type UserUserType string

// UserId 用户ID(memberNo或characterNo)
type UserId = string

// UserPostCount defines model for UserPostCount.
type UserPostCount struct {
	// CurrentSize 当前邮件数量
	CurrentSize int64 `json:"currentSize"`

	// MaxSize 邮箱邮件数量上限
	MaxSize int64 `json:"maxSize"`

	// PostboxId 邮箱ID:
	//  * `SGXQ-GM`
	//  * `SGXQ-GENERAL`
	//  * `SGXQ-MOD`
	//  * `SGXQ-SANDBOX`
	PostboxId PostboxId `json:"postboxId"`
}

// UserPostCountSummary defines model for UserPostCountSummary.
type UserPostCountSummary struct {
	NotItemSent *int64  `json:"notItemSent,omitempty"`
	PostboxId   *string `json:"postboxId,omitempty"`
	Read        *int64  `json:"read,omitempty"`
	Total       *int64  `json:"total,omitempty"`
	Unread      *int64  `json:"unread,omitempty"`
}

// CategoryInQuery 当postboxId=SGXQ-MOD时，此字段值为UGC ID，e.g. 1991029608
type CategoryInQuery = Category

// DeleteItemSentInQuery defines model for deleteItemSentInQuery.
type DeleteItemSentInQuery = bool

// DeleteNoItemInQuery defines model for deleteNoItemInQuery.
type DeleteNoItemInQuery = bool

// DeleteReadInQuery defines model for deleteReadInQuery.
type DeleteReadInQuery = bool

// MessageTypeInQuery 信息类型
type MessageTypeInQuery = MessageType

// PageInQuery 页数
type PageInQuery = Page

// PostNoInPath 邮件编号
type PostNoInPath = PostNo

// PostNosInQuery 邮件编号列表
//   - `单个邮件` - e.g. 32
//   - `多个邮件` - e.g. 32,42
type PostNosInQuery = PostNos

// PostboxIdInPath 邮箱ID:
//   - `SGXQ-GM`
//   - `SGXQ-GENERAL`
//   - `SGXQ-MOD`
//   - `SGXQ-SANDBOX`
type PostboxIdInPath = PostboxId

// PostboxIdInQuery 邮箱ID:
//   - `SGXQ-GM`
//   - `SGXQ-GENERAL`
//   - `SGXQ-MOD`
//   - `SGXQ-SANDBOX`
type PostboxIdInQuery = PostboxId

// ServiceIdInPath 服务ID
type ServiceIdInPath = ServiceId

// SizeInQuery 单页数量
type SizeInQuery = Size

// UserIdInPath 用户ID(memberNo或characterNo)
type UserIdInPath = UserId

// DeletePostboxV10ServicesServiceIdUsersUserIdPostsParams defines parameters for DeletePostboxV10ServicesServiceIdUsersUserIdPosts.
type DeletePostboxV10ServicesServiceIdUsersUserIdPostsParams struct {
	Category    *CategoryInQuery    `form:"category,omitempty" json:"category,omitempty"`
	MessageType *MessageTypeInQuery `form:"messageType,omitempty" json:"messageType,omitempty"`

	// PostboxId 邮箱ID:
	//  * `SGXQ-GM`
	//  * `SGXQ-GENERAL`
	//  * `SGXQ-MOD`
	//  * `SGXQ-SANDBOX`
	PostboxId *PostboxIdInQuery `form:"postboxId,omitempty" json:"postboxId,omitempty"`
	PostNos   *PostNosInQuery   `form:"postNos,omitempty" json:"postNos,omitempty"`

	// DeleteItemSent 删除已领取附件的邮件
	DeleteItemSent *DeleteItemSentInQuery `form:"deleteItemSent,omitempty" json:"deleteItemSent,omitempty"`

	// DeleteNoItem 删除没有附件的邮件
	DeleteNoItem *DeleteNoItemInQuery `form:"deleteNoItem,omitempty" json:"deleteNoItem,omitempty"`

	// DeleteRead 删除已读的邮件
	DeleteRead *DeleteReadInQuery `form:"deleteRead,omitempty" json:"deleteRead,omitempty"`
}

// GetPostboxV10ServicesServiceIdUsersUserIdPostsParams defines parameters for GetPostboxV10ServicesServiceIdUsersUserIdPosts.
type GetPostboxV10ServicesServiceIdUsersUserIdPostsParams struct {
	Category    *CategoryInQuery    `form:"category,omitempty" json:"category,omitempty"`
	MessageType *MessageTypeInQuery `form:"messageType,omitempty" json:"messageType,omitempty"`

	// PostboxId 邮箱ID:
	//  * `SGXQ-GM`
	//  * `SGXQ-GENERAL`
	//  * `SGXQ-MOD`
	//  * `SGXQ-SANDBOX`
	PostboxId *PostboxIdInQuery `form:"postboxId,omitempty" json:"postboxId,omitempty"`
	PostNos   *PostNosInQuery   `form:"postNos,omitempty" json:"postNos,omitempty"`
	Page      *PageInQuery      `form:"page,omitempty" json:"page,omitempty"`
	Size      *SizeInQuery      `form:"size,omitempty" json:"size,omitempty"`
}

// DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsParams defines parameters for DeletePostboxV10ServicesServiceIdUsersUserIdPostsItems.
type DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsParams struct {
	// DeleteItemSent 删除已领取附件的邮件
	DeleteItemSent *DeleteItemSentInQuery `form:"deleteItemSent,omitempty" json:"deleteItemSent,omitempty"`
	PostNos        *PostNosInQuery        `form:"postNos,omitempty" json:"postNos,omitempty"`
}

// PutPostboxV10ServicesServiceIdUsersUserIdPostsReadParams defines parameters for PutPostboxV10ServicesServiceIdUsersUserIdPostsRead.
type PutPostboxV10ServicesServiceIdUsersUserIdPostsReadParams struct {
	PostNos *PostNosInQuery `form:"postNos,omitempty" json:"postNos,omitempty"`
}

// DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsParams defines parameters for DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItems.
type DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsParams struct {
	// DeleteItemSent 删除已领取附件的邮件
	DeleteItemSent *DeleteItemSentInQuery `form:"deleteItemSent,omitempty" json:"deleteItemSent,omitempty"`
}

// GetPostboxV10ServicesServiceIdUsersUserIdSummaryParams defines parameters for GetPostboxV10ServicesServiceIdUsersUserIdSummary.
type GetPostboxV10ServicesServiceIdUsersUserIdSummaryParams struct {
	Category    *CategoryInQuery    `form:"category,omitempty" json:"category,omitempty"`
	MessageType *MessageTypeInQuery `form:"messageType,omitempty" json:"messageType,omitempty"`

	// PostboxId 邮箱ID:
	//  * `SGXQ-GM`
	//  * `SGXQ-GENERAL`
	//  * `SGXQ-MOD`
	//  * `SGXQ-SANDBOX`
	PostboxId *PostboxIdInQuery `form:"postboxId,omitempty" json:"postboxId,omitempty"`
}

// PostPostboxV10ServicesServiceIdPostboxesPostboxIdJSONRequestBody defines body for PostPostboxV10ServicesServiceIdPostboxesPostboxId for application/json ContentType.
type PostPostboxV10ServicesServiceIdPostboxesPostboxIdJSONRequestBody = SendPostRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithBody request with any body
	PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithBody(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPostboxV10ServicesServiceIdPostboxesPostboxId(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, body PostPostboxV10ServicesServiceIdPostboxesPostboxIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCount request
	GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCount(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostboxV10ServicesServiceIdUsersUserIdPosts request
	DeletePostboxV10ServicesServiceIdUsersUserIdPosts(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostboxV10ServicesServiceIdUsersUserIdPosts request
	GetPostboxV10ServicesServiceIdUsersUserIdPosts(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostboxV10ServicesServiceIdUsersUserIdPostsItems request
	DeletePostboxV10ServicesServiceIdUsersUserIdPostsItems(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPostboxV10ServicesServiceIdUsersUserIdPostsRead request
	PutPostboxV10ServicesServiceIdUsersUserIdPostsRead(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *PutPostboxV10ServicesServiceIdUsersUserIdPostsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNo request
	DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNo(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNo request
	GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNo(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItems request
	DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItems(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostboxV10ServicesServiceIdUsersUserIdSummary request
	GetPostboxV10ServicesServiceIdUsersUserIdSummary(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithBody(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPostboxV10ServicesServiceIdPostboxesPostboxIdRequestWithBody(c.Server, serviceId, postboxId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPostboxV10ServicesServiceIdPostboxesPostboxId(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, body PostPostboxV10ServicesServiceIdPostboxesPostboxIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPostboxV10ServicesServiceIdPostboxesPostboxIdRequest(c.Server, serviceId, postboxId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCount(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, userId UserIdInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountRequest(c.Server, serviceId, postboxId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostboxV10ServicesServiceIdUsersUserIdPosts(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsRequest(c.Server, serviceId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostboxV10ServicesServiceIdUsersUserIdPosts(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostboxV10ServicesServiceIdUsersUserIdPostsRequest(c.Server, serviceId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostboxV10ServicesServiceIdUsersUserIdPostsItems(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsRequest(c.Server, serviceId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPostboxV10ServicesServiceIdUsersUserIdPostsRead(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *PutPostboxV10ServicesServiceIdUsersUserIdPostsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPostboxV10ServicesServiceIdUsersUserIdPostsReadRequest(c.Server, serviceId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNo(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoRequest(c.Server, serviceId, userId, postNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNo(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoRequest(c.Server, serviceId, userId, postNo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItems(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsRequest(c.Server, serviceId, userId, postNo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostboxV10ServicesServiceIdUsersUserIdSummary(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostboxV10ServicesServiceIdUsersUserIdSummaryRequest(c.Server, serviceId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostPostboxV10ServicesServiceIdPostboxesPostboxIdRequest calls the generic PostPostboxV10ServicesServiceIdPostboxesPostboxId builder with application/json body
func NewPostPostboxV10ServicesServiceIdPostboxesPostboxIdRequest(server string, serviceId ServiceIdInPath, postboxId PostboxIdInPath, body PostPostboxV10ServicesServiceIdPostboxesPostboxIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPostboxV10ServicesServiceIdPostboxesPostboxIdRequestWithBody(server, serviceId, postboxId, "application/json", bodyReader)
}

// NewPostPostboxV10ServicesServiceIdPostboxesPostboxIdRequestWithBody generates requests for PostPostboxV10ServicesServiceIdPostboxesPostboxId with any type of body
func NewPostPostboxV10ServicesServiceIdPostboxesPostboxIdRequestWithBody(server string, serviceId ServiceIdInPath, postboxId PostboxIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "postboxId", runtime.ParamLocationPath, postboxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/postboxes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountRequest generates requests for GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCount
func NewGetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountRequest(server string, serviceId ServiceIdInPath, postboxId PostboxIdInPath, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "postboxId", runtime.ParamLocationPath, postboxId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/postboxes/%s/users/%s/count", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsRequest generates requests for DeletePostboxV10ServicesServiceIdUsersUserIdPosts
func NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsRequest(server string, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/users/%s/posts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MessageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "messageType", runtime.ParamLocationQuery, *params.MessageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostboxId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postboxId", runtime.ParamLocationQuery, *params.PostboxId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostNos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postNos", runtime.ParamLocationQuery, *params.PostNos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeleteItemSent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleteItemSent", runtime.ParamLocationQuery, *params.DeleteItemSent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeleteNoItem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleteNoItem", runtime.ParamLocationQuery, *params.DeleteNoItem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeleteRead != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleteRead", runtime.ParamLocationQuery, *params.DeleteRead); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostboxV10ServicesServiceIdUsersUserIdPostsRequest generates requests for GetPostboxV10ServicesServiceIdUsersUserIdPosts
func NewGetPostboxV10ServicesServiceIdUsersUserIdPostsRequest(server string, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdPostsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/users/%s/posts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MessageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "messageType", runtime.ParamLocationQuery, *params.MessageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostboxId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postboxId", runtime.ParamLocationQuery, *params.PostboxId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostNos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postNos", runtime.ParamLocationQuery, *params.PostNos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsRequest generates requests for DeletePostboxV10ServicesServiceIdUsersUserIdPostsItems
func NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsRequest(server string, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/users/%s/posts/items", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DeleteItemSent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleteItemSent", runtime.ParamLocationQuery, *params.DeleteItemSent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostNos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postNos", runtime.ParamLocationQuery, *params.PostNos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPostboxV10ServicesServiceIdUsersUserIdPostsReadRequest generates requests for PutPostboxV10ServicesServiceIdUsersUserIdPostsRead
func NewPutPostboxV10ServicesServiceIdUsersUserIdPostsReadRequest(server string, serviceId ServiceIdInPath, userId UserIdInPath, params *PutPostboxV10ServicesServiceIdUsersUserIdPostsReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/users/%s/posts/read", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PostNos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postNos", runtime.ParamLocationQuery, *params.PostNos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoRequest generates requests for DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNo
func NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoRequest(server string, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "postNo", runtime.ParamLocationPath, postNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/users/%s/posts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoRequest generates requests for GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNo
func NewGetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoRequest(server string, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "postNo", runtime.ParamLocationPath, postNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/users/%s/posts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsRequest generates requests for DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItems
func NewDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsRequest(server string, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "postNo", runtime.ParamLocationPath, postNo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/users/%s/posts/%s/items", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DeleteItemSent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleteItemSent", runtime.ParamLocationQuery, *params.DeleteItemSent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostboxV10ServicesServiceIdUsersUserIdSummaryRequest generates requests for GetPostboxV10ServicesServiceIdUsersUserIdSummary
func NewGetPostboxV10ServicesServiceIdUsersUserIdSummaryRequest(server string, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postbox/v1.0/services/%s/users/%s/summary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MessageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "messageType", runtime.ParamLocationQuery, *params.MessageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostboxId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postboxId", runtime.ParamLocationQuery, *params.PostboxId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithBodyWithResponse request with any body
	PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithBodyWithResponse(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse, error)

	PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithResponse(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, body PostPostboxV10ServicesServiceIdPostboxesPostboxIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse, error)

	// GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountWithResponse request
	GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountWithResponse(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse, error)

	// DeletePostboxV10ServicesServiceIdUsersUserIdPostsWithResponse request
	DeletePostboxV10ServicesServiceIdUsersUserIdPostsWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsParams, reqEditors ...RequestEditorFn) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse, error)

	// GetPostboxV10ServicesServiceIdUsersUserIdPostsWithResponse request
	GetPostboxV10ServicesServiceIdUsersUserIdPostsWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdPostsParams, reqEditors ...RequestEditorFn) (*GetPostboxV10ServicesServiceIdUsersUserIdPostsResponse, error)

	// DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsWithResponse request
	DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsParams, reqEditors ...RequestEditorFn) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse, error)

	// PutPostboxV10ServicesServiceIdUsersUserIdPostsReadWithResponse request
	PutPostboxV10ServicesServiceIdUsersUserIdPostsReadWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *PutPostboxV10ServicesServiceIdUsersUserIdPostsReadParams, reqEditors ...RequestEditorFn) (*PutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse, error)

	// DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse request
	DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, reqEditors ...RequestEditorFn) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse, error)

	// GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse request
	GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, reqEditors ...RequestEditorFn) (*GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse, error)

	// DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsWithResponse request
	DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsParams, reqEditors ...RequestEditorFn) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse, error)

	// GetPostboxV10ServicesServiceIdUsersUserIdSummaryWithResponse request
	GetPostboxV10ServicesServiceIdUsersUserIdSummaryWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdSummaryParams, reqEditors ...RequestEditorFn) (*GetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse, error)
}

type PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int32             `json:"code"`
		Data    *SendPostResponse `json:"data,omitempty"`
		Message string            `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int32          `json:"code"`
		Data    *UserPostCount `json:"data,omitempty"`
		Message string         `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r DeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostboxV10ServicesServiceIdUsersUserIdPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int32 `json:"code"`
		Data *struct {
			List *[]PostResponse `json:"list,omitempty"`
		} `json:"data,omitempty"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPostboxV10ServicesServiceIdUsersUserIdPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostboxV10ServicesServiceIdUsersUserIdPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int32                   `json:"code"`
		Data    *SuccessFailureResponse `json:"data,omitempty"`
		Message string                  `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int32 `json:"code"`
		Data *struct {
			List *[]PostResponse `json:"list,omitempty"`
		} `json:"data,omitempty"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code    int32         `json:"code"`
		Data    *PostResponse `json:"data,omitempty"`
		Message string        `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResult
}

// Status returns HTTPResponse.Status
func (r DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int32 `json:"code"`
		Data *struct {
			List *[]UserPostCountSummary `json:"list,omitempty"`
		} `json:"data,omitempty"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithBodyWithResponse request with arbitrary body returning *PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse
func (c *ClientWithResponses) PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithBodyWithResponse(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse, error) {
	rsp, err := c.PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithBody(ctx, serviceId, postboxId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse(rsp)
}

func (c *ClientWithResponses) PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithResponse(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, body PostPostboxV10ServicesServiceIdPostboxesPostboxIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse, error) {
	rsp, err := c.PostPostboxV10ServicesServiceIdPostboxesPostboxId(ctx, serviceId, postboxId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse(rsp)
}

// GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountWithResponse request returning *GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse
func (c *ClientWithResponses) GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountWithResponse(ctx context.Context, serviceId ServiceIdInPath, postboxId PostboxIdInPath, userId UserIdInPath, reqEditors ...RequestEditorFn) (*GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse, error) {
	rsp, err := c.GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCount(ctx, serviceId, postboxId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse(rsp)
}

// DeletePostboxV10ServicesServiceIdUsersUserIdPostsWithResponse request returning *DeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse
func (c *ClientWithResponses) DeletePostboxV10ServicesServiceIdUsersUserIdPostsWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsParams, reqEditors ...RequestEditorFn) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse, error) {
	rsp, err := c.DeletePostboxV10ServicesServiceIdUsersUserIdPosts(ctx, serviceId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse(rsp)
}

// GetPostboxV10ServicesServiceIdUsersUserIdPostsWithResponse request returning *GetPostboxV10ServicesServiceIdUsersUserIdPostsResponse
func (c *ClientWithResponses) GetPostboxV10ServicesServiceIdUsersUserIdPostsWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdPostsParams, reqEditors ...RequestEditorFn) (*GetPostboxV10ServicesServiceIdUsersUserIdPostsResponse, error) {
	rsp, err := c.GetPostboxV10ServicesServiceIdUsersUserIdPosts(ctx, serviceId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostboxV10ServicesServiceIdUsersUserIdPostsResponse(rsp)
}

// DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsWithResponse request returning *DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse
func (c *ClientWithResponses) DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsParams, reqEditors ...RequestEditorFn) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse, error) {
	rsp, err := c.DeletePostboxV10ServicesServiceIdUsersUserIdPostsItems(ctx, serviceId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse(rsp)
}

// PutPostboxV10ServicesServiceIdUsersUserIdPostsReadWithResponse request returning *PutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse
func (c *ClientWithResponses) PutPostboxV10ServicesServiceIdUsersUserIdPostsReadWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *PutPostboxV10ServicesServiceIdUsersUserIdPostsReadParams, reqEditors ...RequestEditorFn) (*PutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse, error) {
	rsp, err := c.PutPostboxV10ServicesServiceIdUsersUserIdPostsRead(ctx, serviceId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse(rsp)
}

// DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse request returning *DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse
func (c *ClientWithResponses) DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, reqEditors ...RequestEditorFn) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse, error) {
	rsp, err := c.DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNo(ctx, serviceId, userId, postNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse(rsp)
}

// GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse request returning *GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse
func (c *ClientWithResponses) GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, reqEditors ...RequestEditorFn) (*GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse, error) {
	rsp, err := c.GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNo(ctx, serviceId, userId, postNo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse(rsp)
}

// DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsWithResponse request returning *DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse
func (c *ClientWithResponses) DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, postNo PostNoInPath, params *DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsParams, reqEditors ...RequestEditorFn) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse, error) {
	rsp, err := c.DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItems(ctx, serviceId, userId, postNo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse(rsp)
}

// GetPostboxV10ServicesServiceIdUsersUserIdSummaryWithResponse request returning *GetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse
func (c *ClientWithResponses) GetPostboxV10ServicesServiceIdUsersUserIdSummaryWithResponse(ctx context.Context, serviceId ServiceIdInPath, userId UserIdInPath, params *GetPostboxV10ServicesServiceIdUsersUserIdSummaryParams, reqEditors ...RequestEditorFn) (*GetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse, error) {
	rsp, err := c.GetPostboxV10ServicesServiceIdUsersUserIdSummary(ctx, serviceId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse(rsp)
}

// ParsePostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse parses an HTTP response from a PostPostboxV10ServicesServiceIdPostboxesPostboxIdWithResponse call
func ParsePostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse(rsp *http.Response) (*PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPostboxV10ServicesServiceIdPostboxesPostboxIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int32             `json:"code"`
			Data    *SendPostResponse `json:"data,omitempty"`
			Message string            `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse parses an HTTP response from a GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountWithResponse call
func ParseGetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse(rsp *http.Response) (*GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostboxV10ServicesServiceIdPostboxesPostboxIdUsersUserIdCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int32          `json:"code"`
			Data    *UserPostCount `json:"data,omitempty"`
			Message string         `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse parses an HTTP response from a DeletePostboxV10ServicesServiceIdUsersUserIdPostsWithResponse call
func ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse(rsp *http.Response) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostboxV10ServicesServiceIdUsersUserIdPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPostboxV10ServicesServiceIdUsersUserIdPostsResponse parses an HTTP response from a GetPostboxV10ServicesServiceIdUsersUserIdPostsWithResponse call
func ParseGetPostboxV10ServicesServiceIdUsersUserIdPostsResponse(rsp *http.Response) (*GetPostboxV10ServicesServiceIdUsersUserIdPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostboxV10ServicesServiceIdUsersUserIdPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int32 `json:"code"`
			Data *struct {
				List *[]PostResponse `json:"list,omitempty"`
			} `json:"data,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse parses an HTTP response from a DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsWithResponse call
func ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse(rsp *http.Response) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostboxV10ServicesServiceIdUsersUserIdPostsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int32                   `json:"code"`
			Data    *SuccessFailureResponse `json:"data,omitempty"`
			Message string                  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse parses an HTTP response from a PutPostboxV10ServicesServiceIdUsersUserIdPostsReadWithResponse call
func ParsePutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse(rsp *http.Response) (*PutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPostboxV10ServicesServiceIdUsersUserIdPostsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int32 `json:"code"`
			Data *struct {
				List *[]PostResponse `json:"list,omitempty"`
			} `json:"data,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse parses an HTTP response from a DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse call
func ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse(rsp *http.Response) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse parses an HTTP response from a GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoWithResponse call
func ParseGetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse(rsp *http.Response) (*GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostboxV10ServicesServiceIdUsersUserIdPostsPostNoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code    int32         `json:"code"`
			Data    *PostResponse `json:"data,omitempty"`
			Message string        `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse parses an HTTP response from a DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsWithResponse call
func ParseDeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse(rsp *http.Response) (*DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostboxV10ServicesServiceIdUsersUserIdPostsPostNoItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse parses an HTTP response from a GetPostboxV10ServicesServiceIdUsersUserIdSummaryWithResponse call
func ParseGetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse(rsp *http.Response) (*GetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostboxV10ServicesServiceIdUsersUserIdSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int32 `json:"code"`
			Data *struct {
				List *[]UserPostCountSummary `json:"list,omitempty"`
			} `json:"data,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
